
SPI_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002258  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002364  08002364  00012364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002384  08002384  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002384  08002384  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002384  08002384  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002384  08002384  00012384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002388  08002388  00012388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800238c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  08002398  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002398  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006156  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001526  00000000  00000000  0002618b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000670  00000000  00000000  000276b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005c8  00000000  00000000  00027d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e8d  00000000  00000000  000282f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007017  00000000  00000000  0003e17d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d9e1  00000000  00000000  00045194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c2b75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000189c  00000000  00000000  000c2bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800234c 	.word	0x0800234c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800234c 	.word	0x0800234c

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f947 	bl	80003f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	200f      	movs	r0, #15
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 ffbc 	bl	80020e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f95f 	bl	800045a <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f927 	bl	8000406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000030 	.word	0x20000030

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000030 	.word	0x20000030

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <HAL_Delay+0x44>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	bf00      	nop
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000004 	.word	0x20000004

08000258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f003 0307 	and.w	r3, r3, #7
 8000266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000268:	4b0c      	ldr	r3, [pc, #48]	; (800029c <__NVIC_SetPriorityGrouping+0x44>)
 800026a:	68db      	ldr	r3, [r3, #12]
 800026c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026e:	68ba      	ldr	r2, [r7, #8]
 8000270:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000274:	4013      	ands	r3, r2
 8000276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000280:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800028a:	4a04      	ldr	r2, [pc, #16]	; (800029c <__NVIC_SetPriorityGrouping+0x44>)
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	60d3      	str	r3, [r2, #12]
}
 8000290:	bf00      	nop
 8000292:	3714      	adds	r7, #20
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	e000ed00 	.word	0xe000ed00

080002a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a4:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <__NVIC_GetPriorityGrouping+0x18>)
 80002a6:	68db      	ldr	r3, [r3, #12]
 80002a8:	0a1b      	lsrs	r3, r3, #8
 80002aa:	f003 0307 	and.w	r3, r3, #7
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000ed00 	.word	0xe000ed00

080002bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	db0b      	blt.n	80002e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	f003 021f 	and.w	r2, r3, #31
 80002d4:	4906      	ldr	r1, [pc, #24]	; (80002f0 <__NVIC_EnableIRQ+0x34>)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	095b      	lsrs	r3, r3, #5
 80002dc:	2001      	movs	r0, #1
 80002de:	fa00 f202 	lsl.w	r2, r0, r2
 80002e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002e6:	bf00      	nop
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr
 80002f0:	e000e100 	.word	0xe000e100

080002f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	6039      	str	r1, [r7, #0]
 80002fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000304:	2b00      	cmp	r3, #0
 8000306:	db0a      	blt.n	800031e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	b2da      	uxtb	r2, r3
 800030c:	490c      	ldr	r1, [pc, #48]	; (8000340 <__NVIC_SetPriority+0x4c>)
 800030e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000312:	0112      	lsls	r2, r2, #4
 8000314:	b2d2      	uxtb	r2, r2
 8000316:	440b      	add	r3, r1
 8000318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800031c:	e00a      	b.n	8000334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	b2da      	uxtb	r2, r3
 8000322:	4908      	ldr	r1, [pc, #32]	; (8000344 <__NVIC_SetPriority+0x50>)
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	f003 030f 	and.w	r3, r3, #15
 800032a:	3b04      	subs	r3, #4
 800032c:	0112      	lsls	r2, r2, #4
 800032e:	b2d2      	uxtb	r2, r2
 8000330:	440b      	add	r3, r1
 8000332:	761a      	strb	r2, [r3, #24]
}
 8000334:	bf00      	nop
 8000336:	370c      	adds	r7, #12
 8000338:	46bd      	mov	sp, r7
 800033a:	bc80      	pop	{r7}
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	e000e100 	.word	0xe000e100
 8000344:	e000ed00 	.word	0xe000ed00

08000348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000348:	b480      	push	{r7}
 800034a:	b089      	sub	sp, #36	; 0x24
 800034c:	af00      	add	r7, sp, #0
 800034e:	60f8      	str	r0, [r7, #12]
 8000350:	60b9      	str	r1, [r7, #8]
 8000352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	f003 0307 	and.w	r3, r3, #7
 800035a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800035c:	69fb      	ldr	r3, [r7, #28]
 800035e:	f1c3 0307 	rsb	r3, r3, #7
 8000362:	2b04      	cmp	r3, #4
 8000364:	bf28      	it	cs
 8000366:	2304      	movcs	r3, #4
 8000368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800036a:	69fb      	ldr	r3, [r7, #28]
 800036c:	3304      	adds	r3, #4
 800036e:	2b06      	cmp	r3, #6
 8000370:	d902      	bls.n	8000378 <NVIC_EncodePriority+0x30>
 8000372:	69fb      	ldr	r3, [r7, #28]
 8000374:	3b03      	subs	r3, #3
 8000376:	e000      	b.n	800037a <NVIC_EncodePriority+0x32>
 8000378:	2300      	movs	r3, #0
 800037a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800037c:	f04f 32ff 	mov.w	r2, #4294967295
 8000380:	69bb      	ldr	r3, [r7, #24]
 8000382:	fa02 f303 	lsl.w	r3, r2, r3
 8000386:	43da      	mvns	r2, r3
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	401a      	ands	r2, r3
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000390:	f04f 31ff 	mov.w	r1, #4294967295
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	fa01 f303 	lsl.w	r3, r1, r3
 800039a:	43d9      	mvns	r1, r3
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a0:	4313      	orrs	r3, r2
         );
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	3724      	adds	r7, #36	; 0x24
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr

080003ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	3b01      	subs	r3, #1
 80003b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003bc:	d301      	bcc.n	80003c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003be:	2301      	movs	r3, #1
 80003c0:	e00f      	b.n	80003e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003c2:	4a0a      	ldr	r2, [pc, #40]	; (80003ec <SysTick_Config+0x40>)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	3b01      	subs	r3, #1
 80003c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003ca:	210f      	movs	r1, #15
 80003cc:	f04f 30ff 	mov.w	r0, #4294967295
 80003d0:	f7ff ff90 	bl	80002f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003d4:	4b05      	ldr	r3, [pc, #20]	; (80003ec <SysTick_Config+0x40>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003da:	4b04      	ldr	r3, [pc, #16]	; (80003ec <SysTick_Config+0x40>)
 80003dc:	2207      	movs	r2, #7
 80003de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003e0:	2300      	movs	r3, #0
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	3708      	adds	r7, #8
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	e000e010 	.word	0xe000e010

080003f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003f8:	6878      	ldr	r0, [r7, #4]
 80003fa:	f7ff ff2d 	bl	8000258 <__NVIC_SetPriorityGrouping>
}
 80003fe:	bf00      	nop
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000406:	b580      	push	{r7, lr}
 8000408:	b086      	sub	sp, #24
 800040a:	af00      	add	r7, sp, #0
 800040c:	4603      	mov	r3, r0
 800040e:	60b9      	str	r1, [r7, #8]
 8000410:	607a      	str	r2, [r7, #4]
 8000412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000414:	2300      	movs	r3, #0
 8000416:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000418:	f7ff ff42 	bl	80002a0 <__NVIC_GetPriorityGrouping>
 800041c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	68b9      	ldr	r1, [r7, #8]
 8000422:	6978      	ldr	r0, [r7, #20]
 8000424:	f7ff ff90 	bl	8000348 <NVIC_EncodePriority>
 8000428:	4602      	mov	r2, r0
 800042a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800042e:	4611      	mov	r1, r2
 8000430:	4618      	mov	r0, r3
 8000432:	f7ff ff5f 	bl	80002f4 <__NVIC_SetPriority>
}
 8000436:	bf00      	nop
 8000438:	3718      	adds	r7, #24
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}

0800043e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800043e:	b580      	push	{r7, lr}
 8000440:	b082      	sub	sp, #8
 8000442:	af00      	add	r7, sp, #0
 8000444:	4603      	mov	r3, r0
 8000446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff ff35 	bl	80002bc <__NVIC_EnableIRQ>
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}

0800045a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	b082      	sub	sp, #8
 800045e:	af00      	add	r7, sp, #0
 8000460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	f7ff ffa2 	bl	80003ac <SysTick_Config>
 8000468:	4603      	mov	r3, r0
}
 800046a:	4618      	mov	r0, r3
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
	...

08000474 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800047c:	2300      	movs	r3, #0
 800047e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000486:	2b02      	cmp	r3, #2
 8000488:	d005      	beq.n	8000496 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	2204      	movs	r2, #4
 800048e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000490:	2301      	movs	r3, #1
 8000492:	73fb      	strb	r3, [r7, #15]
 8000494:	e051      	b.n	800053a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	681a      	ldr	r2, [r3, #0]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f022 020e 	bic.w	r2, r2, #14
 80004a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	681a      	ldr	r2, [r3, #0]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f022 0201 	bic.w	r2, r2, #1
 80004b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a22      	ldr	r2, [pc, #136]	; (8000544 <HAL_DMA_Abort_IT+0xd0>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d029      	beq.n	8000514 <HAL_DMA_Abort_IT+0xa0>
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a20      	ldr	r2, [pc, #128]	; (8000548 <HAL_DMA_Abort_IT+0xd4>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d022      	beq.n	8000510 <HAL_DMA_Abort_IT+0x9c>
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a1f      	ldr	r2, [pc, #124]	; (800054c <HAL_DMA_Abort_IT+0xd8>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d01a      	beq.n	800050a <HAL_DMA_Abort_IT+0x96>
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a1d      	ldr	r2, [pc, #116]	; (8000550 <HAL_DMA_Abort_IT+0xdc>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d012      	beq.n	8000504 <HAL_DMA_Abort_IT+0x90>
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a1c      	ldr	r2, [pc, #112]	; (8000554 <HAL_DMA_Abort_IT+0xe0>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d00a      	beq.n	80004fe <HAL_DMA_Abort_IT+0x8a>
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a1a      	ldr	r2, [pc, #104]	; (8000558 <HAL_DMA_Abort_IT+0xe4>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d102      	bne.n	80004f8 <HAL_DMA_Abort_IT+0x84>
 80004f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004f6:	e00e      	b.n	8000516 <HAL_DMA_Abort_IT+0xa2>
 80004f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80004fc:	e00b      	b.n	8000516 <HAL_DMA_Abort_IT+0xa2>
 80004fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000502:	e008      	b.n	8000516 <HAL_DMA_Abort_IT+0xa2>
 8000504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000508:	e005      	b.n	8000516 <HAL_DMA_Abort_IT+0xa2>
 800050a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800050e:	e002      	b.n	8000516 <HAL_DMA_Abort_IT+0xa2>
 8000510:	2310      	movs	r3, #16
 8000512:	e000      	b.n	8000516 <HAL_DMA_Abort_IT+0xa2>
 8000514:	2301      	movs	r3, #1
 8000516:	4a11      	ldr	r2, [pc, #68]	; (800055c <HAL_DMA_Abort_IT+0xe8>)
 8000518:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2201      	movs	r2, #1
 800051e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2200      	movs	r2, #0
 8000526:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800052e:	2b00      	cmp	r3, #0
 8000530:	d003      	beq.n	800053a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	4798      	blx	r3
    } 
  }
  return status;
 800053a:	7bfb      	ldrb	r3, [r7, #15]
}
 800053c:	4618      	mov	r0, r3
 800053e:	3710      	adds	r7, #16
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40020008 	.word	0x40020008
 8000548:	4002001c 	.word	0x4002001c
 800054c:	40020030 	.word	0x40020030
 8000550:	40020044 	.word	0x40020044
 8000554:	40020058 	.word	0x40020058
 8000558:	4002006c 	.word	0x4002006c
 800055c:	40020000 	.word	0x40020000

08000560 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000560:	b480      	push	{r7}
 8000562:	b08b      	sub	sp, #44	; 0x2c
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800056a:	2300      	movs	r3, #0
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800056e:	2300      	movs	r3, #0
 8000570:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000572:	e169      	b.n	8000848 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000574:	2201      	movs	r2, #1
 8000576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000578:	fa02 f303 	lsl.w	r3, r2, r3
 800057c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	69fa      	ldr	r2, [r7, #28]
 8000584:	4013      	ands	r3, r2
 8000586:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000588:	69ba      	ldr	r2, [r7, #24]
 800058a:	69fb      	ldr	r3, [r7, #28]
 800058c:	429a      	cmp	r2, r3
 800058e:	f040 8158 	bne.w	8000842 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	4a9a      	ldr	r2, [pc, #616]	; (8000800 <HAL_GPIO_Init+0x2a0>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d05e      	beq.n	800065a <HAL_GPIO_Init+0xfa>
 800059c:	4a98      	ldr	r2, [pc, #608]	; (8000800 <HAL_GPIO_Init+0x2a0>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d875      	bhi.n	800068e <HAL_GPIO_Init+0x12e>
 80005a2:	4a98      	ldr	r2, [pc, #608]	; (8000804 <HAL_GPIO_Init+0x2a4>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d058      	beq.n	800065a <HAL_GPIO_Init+0xfa>
 80005a8:	4a96      	ldr	r2, [pc, #600]	; (8000804 <HAL_GPIO_Init+0x2a4>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d86f      	bhi.n	800068e <HAL_GPIO_Init+0x12e>
 80005ae:	4a96      	ldr	r2, [pc, #600]	; (8000808 <HAL_GPIO_Init+0x2a8>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d052      	beq.n	800065a <HAL_GPIO_Init+0xfa>
 80005b4:	4a94      	ldr	r2, [pc, #592]	; (8000808 <HAL_GPIO_Init+0x2a8>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d869      	bhi.n	800068e <HAL_GPIO_Init+0x12e>
 80005ba:	4a94      	ldr	r2, [pc, #592]	; (800080c <HAL_GPIO_Init+0x2ac>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d04c      	beq.n	800065a <HAL_GPIO_Init+0xfa>
 80005c0:	4a92      	ldr	r2, [pc, #584]	; (800080c <HAL_GPIO_Init+0x2ac>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d863      	bhi.n	800068e <HAL_GPIO_Init+0x12e>
 80005c6:	4a92      	ldr	r2, [pc, #584]	; (8000810 <HAL_GPIO_Init+0x2b0>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d046      	beq.n	800065a <HAL_GPIO_Init+0xfa>
 80005cc:	4a90      	ldr	r2, [pc, #576]	; (8000810 <HAL_GPIO_Init+0x2b0>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d85d      	bhi.n	800068e <HAL_GPIO_Init+0x12e>
 80005d2:	2b12      	cmp	r3, #18
 80005d4:	d82a      	bhi.n	800062c <HAL_GPIO_Init+0xcc>
 80005d6:	2b12      	cmp	r3, #18
 80005d8:	d859      	bhi.n	800068e <HAL_GPIO_Init+0x12e>
 80005da:	a201      	add	r2, pc, #4	; (adr r2, 80005e0 <HAL_GPIO_Init+0x80>)
 80005dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e0:	0800065b 	.word	0x0800065b
 80005e4:	08000635 	.word	0x08000635
 80005e8:	08000647 	.word	0x08000647
 80005ec:	08000689 	.word	0x08000689
 80005f0:	0800068f 	.word	0x0800068f
 80005f4:	0800068f 	.word	0x0800068f
 80005f8:	0800068f 	.word	0x0800068f
 80005fc:	0800068f 	.word	0x0800068f
 8000600:	0800068f 	.word	0x0800068f
 8000604:	0800068f 	.word	0x0800068f
 8000608:	0800068f 	.word	0x0800068f
 800060c:	0800068f 	.word	0x0800068f
 8000610:	0800068f 	.word	0x0800068f
 8000614:	0800068f 	.word	0x0800068f
 8000618:	0800068f 	.word	0x0800068f
 800061c:	0800068f 	.word	0x0800068f
 8000620:	0800068f 	.word	0x0800068f
 8000624:	0800063d 	.word	0x0800063d
 8000628:	08000651 	.word	0x08000651
 800062c:	4a79      	ldr	r2, [pc, #484]	; (8000814 <HAL_GPIO_Init+0x2b4>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d013      	beq.n	800065a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000632:	e02c      	b.n	800068e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	623b      	str	r3, [r7, #32]
          break;
 800063a:	e029      	b.n	8000690 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	3304      	adds	r3, #4
 8000642:	623b      	str	r3, [r7, #32]
          break;
 8000644:	e024      	b.n	8000690 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	68db      	ldr	r3, [r3, #12]
 800064a:	3308      	adds	r3, #8
 800064c:	623b      	str	r3, [r7, #32]
          break;
 800064e:	e01f      	b.n	8000690 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	330c      	adds	r3, #12
 8000656:	623b      	str	r3, [r7, #32]
          break;
 8000658:	e01a      	b.n	8000690 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	689b      	ldr	r3, [r3, #8]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d102      	bne.n	8000668 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000662:	2304      	movs	r3, #4
 8000664:	623b      	str	r3, [r7, #32]
          break;
 8000666:	e013      	b.n	8000690 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d105      	bne.n	800067c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000670:	2308      	movs	r3, #8
 8000672:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	69fa      	ldr	r2, [r7, #28]
 8000678:	611a      	str	r2, [r3, #16]
          break;
 800067a:	e009      	b.n	8000690 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800067c:	2308      	movs	r3, #8
 800067e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	69fa      	ldr	r2, [r7, #28]
 8000684:	615a      	str	r2, [r3, #20]
          break;
 8000686:	e003      	b.n	8000690 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000688:	2300      	movs	r3, #0
 800068a:	623b      	str	r3, [r7, #32]
          break;
 800068c:	e000      	b.n	8000690 <HAL_GPIO_Init+0x130>
          break;
 800068e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	2bff      	cmp	r3, #255	; 0xff
 8000694:	d801      	bhi.n	800069a <HAL_GPIO_Init+0x13a>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	e001      	b.n	800069e <HAL_GPIO_Init+0x13e>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	3304      	adds	r3, #4
 800069e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80006a0:	69bb      	ldr	r3, [r7, #24]
 80006a2:	2bff      	cmp	r3, #255	; 0xff
 80006a4:	d802      	bhi.n	80006ac <HAL_GPIO_Init+0x14c>
 80006a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	e002      	b.n	80006b2 <HAL_GPIO_Init+0x152>
 80006ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ae:	3b08      	subs	r3, #8
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	210f      	movs	r1, #15
 80006ba:	693b      	ldr	r3, [r7, #16]
 80006bc:	fa01 f303 	lsl.w	r3, r1, r3
 80006c0:	43db      	mvns	r3, r3
 80006c2:	401a      	ands	r2, r3
 80006c4:	6a39      	ldr	r1, [r7, #32]
 80006c6:	693b      	ldr	r3, [r7, #16]
 80006c8:	fa01 f303 	lsl.w	r3, r1, r3
 80006cc:	431a      	orrs	r2, r3
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006da:	2b00      	cmp	r3, #0
 80006dc:	f000 80b1 	beq.w	8000842 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80006e0:	4b4d      	ldr	r3, [pc, #308]	; (8000818 <HAL_GPIO_Init+0x2b8>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a4c      	ldr	r2, [pc, #304]	; (8000818 <HAL_GPIO_Init+0x2b8>)
 80006e6:	f043 0301 	orr.w	r3, r3, #1
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	4b4a      	ldr	r3, [pc, #296]	; (8000818 <HAL_GPIO_Init+0x2b8>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f003 0301 	and.w	r3, r3, #1
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80006f8:	4a48      	ldr	r2, [pc, #288]	; (800081c <HAL_GPIO_Init+0x2bc>)
 80006fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fc:	089b      	lsrs	r3, r3, #2
 80006fe:	3302      	adds	r3, #2
 8000700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000704:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000708:	f003 0303 	and.w	r3, r3, #3
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	220f      	movs	r2, #15
 8000710:	fa02 f303 	lsl.w	r3, r2, r3
 8000714:	43db      	mvns	r3, r3
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	4013      	ands	r3, r2
 800071a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a40      	ldr	r2, [pc, #256]	; (8000820 <HAL_GPIO_Init+0x2c0>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d013      	beq.n	800074c <HAL_GPIO_Init+0x1ec>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a3f      	ldr	r2, [pc, #252]	; (8000824 <HAL_GPIO_Init+0x2c4>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d00d      	beq.n	8000748 <HAL_GPIO_Init+0x1e8>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a3e      	ldr	r2, [pc, #248]	; (8000828 <HAL_GPIO_Init+0x2c8>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d007      	beq.n	8000744 <HAL_GPIO_Init+0x1e4>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a3d      	ldr	r2, [pc, #244]	; (800082c <HAL_GPIO_Init+0x2cc>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d101      	bne.n	8000740 <HAL_GPIO_Init+0x1e0>
 800073c:	2303      	movs	r3, #3
 800073e:	e006      	b.n	800074e <HAL_GPIO_Init+0x1ee>
 8000740:	2304      	movs	r3, #4
 8000742:	e004      	b.n	800074e <HAL_GPIO_Init+0x1ee>
 8000744:	2302      	movs	r3, #2
 8000746:	e002      	b.n	800074e <HAL_GPIO_Init+0x1ee>
 8000748:	2301      	movs	r3, #1
 800074a:	e000      	b.n	800074e <HAL_GPIO_Init+0x1ee>
 800074c:	2300      	movs	r3, #0
 800074e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000750:	f002 0203 	and.w	r2, r2, #3
 8000754:	0092      	lsls	r2, r2, #2
 8000756:	4093      	lsls	r3, r2
 8000758:	68fa      	ldr	r2, [r7, #12]
 800075a:	4313      	orrs	r3, r2
 800075c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800075e:	492f      	ldr	r1, [pc, #188]	; (800081c <HAL_GPIO_Init+0x2bc>)
 8000760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000762:	089b      	lsrs	r3, r3, #2
 8000764:	3302      	adds	r3, #2
 8000766:	68fa      	ldr	r2, [r7, #12]
 8000768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000774:	2b00      	cmp	r3, #0
 8000776:	d006      	beq.n	8000786 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000778:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <HAL_GPIO_Init+0x2d0>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	492c      	ldr	r1, [pc, #176]	; (8000830 <HAL_GPIO_Init+0x2d0>)
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	4313      	orrs	r3, r2
 8000782:	600b      	str	r3, [r1, #0]
 8000784:	e006      	b.n	8000794 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000786:	4b2a      	ldr	r3, [pc, #168]	; (8000830 <HAL_GPIO_Init+0x2d0>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	69bb      	ldr	r3, [r7, #24]
 800078c:	43db      	mvns	r3, r3
 800078e:	4928      	ldr	r1, [pc, #160]	; (8000830 <HAL_GPIO_Init+0x2d0>)
 8000790:	4013      	ands	r3, r2
 8000792:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800079c:	2b00      	cmp	r3, #0
 800079e:	d006      	beq.n	80007ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80007a0:	4b23      	ldr	r3, [pc, #140]	; (8000830 <HAL_GPIO_Init+0x2d0>)
 80007a2:	685a      	ldr	r2, [r3, #4]
 80007a4:	4922      	ldr	r1, [pc, #136]	; (8000830 <HAL_GPIO_Init+0x2d0>)
 80007a6:	69bb      	ldr	r3, [r7, #24]
 80007a8:	4313      	orrs	r3, r2
 80007aa:	604b      	str	r3, [r1, #4]
 80007ac:	e006      	b.n	80007bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80007ae:	4b20      	ldr	r3, [pc, #128]	; (8000830 <HAL_GPIO_Init+0x2d0>)
 80007b0:	685a      	ldr	r2, [r3, #4]
 80007b2:	69bb      	ldr	r3, [r7, #24]
 80007b4:	43db      	mvns	r3, r3
 80007b6:	491e      	ldr	r1, [pc, #120]	; (8000830 <HAL_GPIO_Init+0x2d0>)
 80007b8:	4013      	ands	r3, r2
 80007ba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d006      	beq.n	80007d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80007c8:	4b19      	ldr	r3, [pc, #100]	; (8000830 <HAL_GPIO_Init+0x2d0>)
 80007ca:	689a      	ldr	r2, [r3, #8]
 80007cc:	4918      	ldr	r1, [pc, #96]	; (8000830 <HAL_GPIO_Init+0x2d0>)
 80007ce:	69bb      	ldr	r3, [r7, #24]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	608b      	str	r3, [r1, #8]
 80007d4:	e006      	b.n	80007e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <HAL_GPIO_Init+0x2d0>)
 80007d8:	689a      	ldr	r2, [r3, #8]
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	43db      	mvns	r3, r3
 80007de:	4914      	ldr	r1, [pc, #80]	; (8000830 <HAL_GPIO_Init+0x2d0>)
 80007e0:	4013      	ands	r3, r2
 80007e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d021      	beq.n	8000834 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <HAL_GPIO_Init+0x2d0>)
 80007f2:	68da      	ldr	r2, [r3, #12]
 80007f4:	490e      	ldr	r1, [pc, #56]	; (8000830 <HAL_GPIO_Init+0x2d0>)
 80007f6:	69bb      	ldr	r3, [r7, #24]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	60cb      	str	r3, [r1, #12]
 80007fc:	e021      	b.n	8000842 <HAL_GPIO_Init+0x2e2>
 80007fe:	bf00      	nop
 8000800:	10320000 	.word	0x10320000
 8000804:	10310000 	.word	0x10310000
 8000808:	10220000 	.word	0x10220000
 800080c:	10210000 	.word	0x10210000
 8000810:	10120000 	.word	0x10120000
 8000814:	10110000 	.word	0x10110000
 8000818:	40021000 	.word	0x40021000
 800081c:	40010000 	.word	0x40010000
 8000820:	40010800 	.word	0x40010800
 8000824:	40010c00 	.word	0x40010c00
 8000828:	40011000 	.word	0x40011000
 800082c:	40011400 	.word	0x40011400
 8000830:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <HAL_GPIO_Init+0x304>)
 8000836:	68da      	ldr	r2, [r3, #12]
 8000838:	69bb      	ldr	r3, [r7, #24]
 800083a:	43db      	mvns	r3, r3
 800083c:	4909      	ldr	r1, [pc, #36]	; (8000864 <HAL_GPIO_Init+0x304>)
 800083e:	4013      	ands	r3, r2
 8000840:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000844:	3301      	adds	r3, #1
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084e:	fa22 f303 	lsr.w	r3, r2, r3
 8000852:	2b00      	cmp	r3, #0
 8000854:	f47f ae8e 	bne.w	8000574 <HAL_GPIO_Init+0x14>
  }
}
 8000858:	bf00      	nop
 800085a:	bf00      	nop
 800085c:	372c      	adds	r7, #44	; 0x2c
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	40010400 	.word	0x40010400

08000868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	807b      	strh	r3, [r7, #2]
 8000874:	4613      	mov	r3, r2
 8000876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000878:	787b      	ldrb	r3, [r7, #1]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d003      	beq.n	8000886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800087e:	887a      	ldrh	r2, [r7, #2]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000884:	e003      	b.n	800088e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000886:	887b      	ldrh	r3, [r7, #2]
 8000888:	041a      	lsls	r2, r3, #16
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	611a      	str	r2, [r3, #16]
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	460b      	mov	r3, r1
 80008a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80008aa:	887a      	ldrh	r2, [r7, #2]
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	4013      	ands	r3, r2
 80008b0:	041a      	lsls	r2, r3, #16
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	43d9      	mvns	r1, r3
 80008b6:	887b      	ldrh	r3, [r7, #2]
 80008b8:	400b      	ands	r3, r1
 80008ba:	431a      	orrs	r2, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	611a      	str	r2, [r3, #16]
}
 80008c0:	bf00      	nop
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr
	...

080008cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d101      	bne.n	80008de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e26c      	b.n	8000db8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	f000 8087 	beq.w	80009fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80008ec:	4b92      	ldr	r3, [pc, #584]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	f003 030c 	and.w	r3, r3, #12
 80008f4:	2b04      	cmp	r3, #4
 80008f6:	d00c      	beq.n	8000912 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008f8:	4b8f      	ldr	r3, [pc, #572]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	f003 030c 	and.w	r3, r3, #12
 8000900:	2b08      	cmp	r3, #8
 8000902:	d112      	bne.n	800092a <HAL_RCC_OscConfig+0x5e>
 8000904:	4b8c      	ldr	r3, [pc, #560]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800090c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000910:	d10b      	bne.n	800092a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000912:	4b89      	ldr	r3, [pc, #548]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091a:	2b00      	cmp	r3, #0
 800091c:	d06c      	beq.n	80009f8 <HAL_RCC_OscConfig+0x12c>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d168      	bne.n	80009f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	e246      	b.n	8000db8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000932:	d106      	bne.n	8000942 <HAL_RCC_OscConfig+0x76>
 8000934:	4b80      	ldr	r3, [pc, #512]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a7f      	ldr	r2, [pc, #508]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 800093a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800093e:	6013      	str	r3, [r2, #0]
 8000940:	e02e      	b.n	80009a0 <HAL_RCC_OscConfig+0xd4>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d10c      	bne.n	8000964 <HAL_RCC_OscConfig+0x98>
 800094a:	4b7b      	ldr	r3, [pc, #492]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a7a      	ldr	r2, [pc, #488]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 8000950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000954:	6013      	str	r3, [r2, #0]
 8000956:	4b78      	ldr	r3, [pc, #480]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a77      	ldr	r2, [pc, #476]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 800095c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000960:	6013      	str	r3, [r2, #0]
 8000962:	e01d      	b.n	80009a0 <HAL_RCC_OscConfig+0xd4>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800096c:	d10c      	bne.n	8000988 <HAL_RCC_OscConfig+0xbc>
 800096e:	4b72      	ldr	r3, [pc, #456]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a71      	ldr	r2, [pc, #452]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 8000974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000978:	6013      	str	r3, [r2, #0]
 800097a:	4b6f      	ldr	r3, [pc, #444]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a6e      	ldr	r2, [pc, #440]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 8000980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000984:	6013      	str	r3, [r2, #0]
 8000986:	e00b      	b.n	80009a0 <HAL_RCC_OscConfig+0xd4>
 8000988:	4b6b      	ldr	r3, [pc, #428]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a6a      	ldr	r2, [pc, #424]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 800098e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000992:	6013      	str	r3, [r2, #0]
 8000994:	4b68      	ldr	r3, [pc, #416]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a67      	ldr	r2, [pc, #412]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 800099a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800099e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d013      	beq.n	80009d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009a8:	f7ff fc28 	bl	80001fc <HAL_GetTick>
 80009ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009ae:	e008      	b.n	80009c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80009b0:	f7ff fc24 	bl	80001fc <HAL_GetTick>
 80009b4:	4602      	mov	r2, r0
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	2b64      	cmp	r3, #100	; 0x64
 80009bc:	d901      	bls.n	80009c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80009be:	2303      	movs	r3, #3
 80009c0:	e1fa      	b.n	8000db8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009c2:	4b5d      	ldr	r3, [pc, #372]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d0f0      	beq.n	80009b0 <HAL_RCC_OscConfig+0xe4>
 80009ce:	e014      	b.n	80009fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009d0:	f7ff fc14 	bl	80001fc <HAL_GetTick>
 80009d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009d6:	e008      	b.n	80009ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80009d8:	f7ff fc10 	bl	80001fc <HAL_GetTick>
 80009dc:	4602      	mov	r2, r0
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	2b64      	cmp	r3, #100	; 0x64
 80009e4:	d901      	bls.n	80009ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80009e6:	2303      	movs	r3, #3
 80009e8:	e1e6      	b.n	8000db8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009ea:	4b53      	ldr	r3, [pc, #332]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d1f0      	bne.n	80009d8 <HAL_RCC_OscConfig+0x10c>
 80009f6:	e000      	b.n	80009fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d063      	beq.n	8000ace <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a06:	4b4c      	ldr	r3, [pc, #304]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f003 030c 	and.w	r3, r3, #12
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d00b      	beq.n	8000a2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000a12:	4b49      	ldr	r3, [pc, #292]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f003 030c 	and.w	r3, r3, #12
 8000a1a:	2b08      	cmp	r3, #8
 8000a1c:	d11c      	bne.n	8000a58 <HAL_RCC_OscConfig+0x18c>
 8000a1e:	4b46      	ldr	r3, [pc, #280]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d116      	bne.n	8000a58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a2a:	4b43      	ldr	r3, [pc, #268]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d005      	beq.n	8000a42 <HAL_RCC_OscConfig+0x176>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	691b      	ldr	r3, [r3, #16]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d001      	beq.n	8000a42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e1ba      	b.n	8000db8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a42:	4b3d      	ldr	r3, [pc, #244]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	00db      	lsls	r3, r3, #3
 8000a50:	4939      	ldr	r1, [pc, #228]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 8000a52:	4313      	orrs	r3, r2
 8000a54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a56:	e03a      	b.n	8000ace <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	691b      	ldr	r3, [r3, #16]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d020      	beq.n	8000aa2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a60:	4b36      	ldr	r3, [pc, #216]	; (8000b3c <HAL_RCC_OscConfig+0x270>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a66:	f7ff fbc9 	bl	80001fc <HAL_GetTick>
 8000a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a6c:	e008      	b.n	8000a80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a6e:	f7ff fbc5 	bl	80001fc <HAL_GetTick>
 8000a72:	4602      	mov	r2, r0
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d901      	bls.n	8000a80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	e19b      	b.n	8000db8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a80:	4b2d      	ldr	r3, [pc, #180]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f003 0302 	and.w	r3, r3, #2
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d0f0      	beq.n	8000a6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a8c:	4b2a      	ldr	r3, [pc, #168]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	695b      	ldr	r3, [r3, #20]
 8000a98:	00db      	lsls	r3, r3, #3
 8000a9a:	4927      	ldr	r1, [pc, #156]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	600b      	str	r3, [r1, #0]
 8000aa0:	e015      	b.n	8000ace <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000aa2:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <HAL_RCC_OscConfig+0x270>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000aa8:	f7ff fba8 	bl	80001fc <HAL_GetTick>
 8000aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000aae:	e008      	b.n	8000ac2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ab0:	f7ff fba4 	bl	80001fc <HAL_GetTick>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d901      	bls.n	8000ac2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	e17a      	b.n	8000db8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ac2:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d1f0      	bne.n	8000ab0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d03a      	beq.n	8000b50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d019      	beq.n	8000b16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <HAL_RCC_OscConfig+0x274>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ae8:	f7ff fb88 	bl	80001fc <HAL_GetTick>
 8000aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aee:	e008      	b.n	8000b02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000af0:	f7ff fb84 	bl	80001fc <HAL_GetTick>
 8000af4:	4602      	mov	r2, r0
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d901      	bls.n	8000b02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000afe:	2303      	movs	r3, #3
 8000b00:	e15a      	b.n	8000db8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <HAL_RCC_OscConfig+0x26c>)
 8000b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d0f0      	beq.n	8000af0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000b0e:	2001      	movs	r0, #1
 8000b10:	f000 faa6 	bl	8001060 <RCC_Delay>
 8000b14:	e01c      	b.n	8000b50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <HAL_RCC_OscConfig+0x274>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b1c:	f7ff fb6e 	bl	80001fc <HAL_GetTick>
 8000b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b22:	e00f      	b.n	8000b44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b24:	f7ff fb6a 	bl	80001fc <HAL_GetTick>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d908      	bls.n	8000b44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000b32:	2303      	movs	r3, #3
 8000b34:	e140      	b.n	8000db8 <HAL_RCC_OscConfig+0x4ec>
 8000b36:	bf00      	nop
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	42420000 	.word	0x42420000
 8000b40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b44:	4b9e      	ldr	r3, [pc, #632]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d1e9      	bne.n	8000b24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f003 0304 	and.w	r3, r3, #4
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	f000 80a6 	beq.w	8000caa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b62:	4b97      	ldr	r3, [pc, #604]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d10d      	bne.n	8000b8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b6e:	4b94      	ldr	r3, [pc, #592]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	4a93      	ldr	r2, [pc, #588]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b78:	61d3      	str	r3, [r2, #28]
 8000b7a:	4b91      	ldr	r3, [pc, #580]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000b86:	2301      	movs	r3, #1
 8000b88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b8a:	4b8e      	ldr	r3, [pc, #568]	; (8000dc4 <HAL_RCC_OscConfig+0x4f8>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d118      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b96:	4b8b      	ldr	r3, [pc, #556]	; (8000dc4 <HAL_RCC_OscConfig+0x4f8>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a8a      	ldr	r2, [pc, #552]	; (8000dc4 <HAL_RCC_OscConfig+0x4f8>)
 8000b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ba2:	f7ff fb2b 	bl	80001fc <HAL_GetTick>
 8000ba6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ba8:	e008      	b.n	8000bbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000baa:	f7ff fb27 	bl	80001fc <HAL_GetTick>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	2b64      	cmp	r3, #100	; 0x64
 8000bb6:	d901      	bls.n	8000bbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	e0fd      	b.n	8000db8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bbc:	4b81      	ldr	r3, [pc, #516]	; (8000dc4 <HAL_RCC_OscConfig+0x4f8>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0f0      	beq.n	8000baa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d106      	bne.n	8000bde <HAL_RCC_OscConfig+0x312>
 8000bd0:	4b7b      	ldr	r3, [pc, #492]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000bd2:	6a1b      	ldr	r3, [r3, #32]
 8000bd4:	4a7a      	ldr	r2, [pc, #488]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	6213      	str	r3, [r2, #32]
 8000bdc:	e02d      	b.n	8000c3a <HAL_RCC_OscConfig+0x36e>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	68db      	ldr	r3, [r3, #12]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d10c      	bne.n	8000c00 <HAL_RCC_OscConfig+0x334>
 8000be6:	4b76      	ldr	r3, [pc, #472]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000be8:	6a1b      	ldr	r3, [r3, #32]
 8000bea:	4a75      	ldr	r2, [pc, #468]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000bec:	f023 0301 	bic.w	r3, r3, #1
 8000bf0:	6213      	str	r3, [r2, #32]
 8000bf2:	4b73      	ldr	r3, [pc, #460]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000bf4:	6a1b      	ldr	r3, [r3, #32]
 8000bf6:	4a72      	ldr	r2, [pc, #456]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000bf8:	f023 0304 	bic.w	r3, r3, #4
 8000bfc:	6213      	str	r3, [r2, #32]
 8000bfe:	e01c      	b.n	8000c3a <HAL_RCC_OscConfig+0x36e>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	2b05      	cmp	r3, #5
 8000c06:	d10c      	bne.n	8000c22 <HAL_RCC_OscConfig+0x356>
 8000c08:	4b6d      	ldr	r3, [pc, #436]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000c0a:	6a1b      	ldr	r3, [r3, #32]
 8000c0c:	4a6c      	ldr	r2, [pc, #432]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000c0e:	f043 0304 	orr.w	r3, r3, #4
 8000c12:	6213      	str	r3, [r2, #32]
 8000c14:	4b6a      	ldr	r3, [pc, #424]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000c16:	6a1b      	ldr	r3, [r3, #32]
 8000c18:	4a69      	ldr	r2, [pc, #420]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	6213      	str	r3, [r2, #32]
 8000c20:	e00b      	b.n	8000c3a <HAL_RCC_OscConfig+0x36e>
 8000c22:	4b67      	ldr	r3, [pc, #412]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000c24:	6a1b      	ldr	r3, [r3, #32]
 8000c26:	4a66      	ldr	r2, [pc, #408]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000c28:	f023 0301 	bic.w	r3, r3, #1
 8000c2c:	6213      	str	r3, [r2, #32]
 8000c2e:	4b64      	ldr	r3, [pc, #400]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000c30:	6a1b      	ldr	r3, [r3, #32]
 8000c32:	4a63      	ldr	r2, [pc, #396]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000c34:	f023 0304 	bic.w	r3, r3, #4
 8000c38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d015      	beq.n	8000c6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c42:	f7ff fadb 	bl	80001fc <HAL_GetTick>
 8000c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c48:	e00a      	b.n	8000c60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c4a:	f7ff fad7 	bl	80001fc <HAL_GetTick>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d901      	bls.n	8000c60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	e0ab      	b.n	8000db8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c60:	4b57      	ldr	r3, [pc, #348]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000c62:	6a1b      	ldr	r3, [r3, #32]
 8000c64:	f003 0302 	and.w	r3, r3, #2
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d0ee      	beq.n	8000c4a <HAL_RCC_OscConfig+0x37e>
 8000c6c:	e014      	b.n	8000c98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c6e:	f7ff fac5 	bl	80001fc <HAL_GetTick>
 8000c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c74:	e00a      	b.n	8000c8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c76:	f7ff fac1 	bl	80001fc <HAL_GetTick>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d901      	bls.n	8000c8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	e095      	b.n	8000db8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c8c:	4b4c      	ldr	r3, [pc, #304]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000c8e:	6a1b      	ldr	r3, [r3, #32]
 8000c90:	f003 0302 	and.w	r3, r3, #2
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d1ee      	bne.n	8000c76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000c98:	7dfb      	ldrb	r3, [r7, #23]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d105      	bne.n	8000caa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c9e:	4b48      	ldr	r3, [pc, #288]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	4a47      	ldr	r2, [pc, #284]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000ca4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ca8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f000 8081 	beq.w	8000db6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cb4:	4b42      	ldr	r3, [pc, #264]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 030c 	and.w	r3, r3, #12
 8000cbc:	2b08      	cmp	r3, #8
 8000cbe:	d061      	beq.n	8000d84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	69db      	ldr	r3, [r3, #28]
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d146      	bne.n	8000d56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cc8:	4b3f      	ldr	r3, [pc, #252]	; (8000dc8 <HAL_RCC_OscConfig+0x4fc>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cce:	f7ff fa95 	bl	80001fc <HAL_GetTick>
 8000cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cd4:	e008      	b.n	8000ce8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cd6:	f7ff fa91 	bl	80001fc <HAL_GetTick>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d901      	bls.n	8000ce8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	e067      	b.n	8000db8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ce8:	4b35      	ldr	r3, [pc, #212]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d1f0      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6a1b      	ldr	r3, [r3, #32]
 8000cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cfc:	d108      	bne.n	8000d10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000cfe:	4b30      	ldr	r3, [pc, #192]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	492d      	ldr	r1, [pc, #180]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d10:	4b2b      	ldr	r3, [pc, #172]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6a19      	ldr	r1, [r3, #32]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d20:	430b      	orrs	r3, r1
 8000d22:	4927      	ldr	r1, [pc, #156]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000d24:	4313      	orrs	r3, r2
 8000d26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000d28:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <HAL_RCC_OscConfig+0x4fc>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2e:	f7ff fa65 	bl	80001fc <HAL_GetTick>
 8000d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d34:	e008      	b.n	8000d48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d36:	f7ff fa61 	bl	80001fc <HAL_GetTick>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d901      	bls.n	8000d48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000d44:	2303      	movs	r3, #3
 8000d46:	e037      	b.n	8000db8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000d48:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d0f0      	beq.n	8000d36 <HAL_RCC_OscConfig+0x46a>
 8000d54:	e02f      	b.n	8000db6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d56:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <HAL_RCC_OscConfig+0x4fc>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d5c:	f7ff fa4e 	bl	80001fc <HAL_GetTick>
 8000d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d62:	e008      	b.n	8000d76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d64:	f7ff fa4a 	bl	80001fc <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d901      	bls.n	8000d76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000d72:	2303      	movs	r3, #3
 8000d74:	e020      	b.n	8000db8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d1f0      	bne.n	8000d64 <HAL_RCC_OscConfig+0x498>
 8000d82:	e018      	b.n	8000db6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	69db      	ldr	r3, [r3, #28]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d101      	bne.n	8000d90 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e013      	b.n	8000db8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <HAL_RCC_OscConfig+0x4f4>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6a1b      	ldr	r3, [r3, #32]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d106      	bne.n	8000db2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d001      	beq.n	8000db6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e000      	b.n	8000db8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40007000 	.word	0x40007000
 8000dc8:	42420060 	.word	0x42420060

08000dcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d101      	bne.n	8000de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e0d0      	b.n	8000f82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000de0:	4b6a      	ldr	r3, [pc, #424]	; (8000f8c <HAL_RCC_ClockConfig+0x1c0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0307 	and.w	r3, r3, #7
 8000de8:	683a      	ldr	r2, [r7, #0]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d910      	bls.n	8000e10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dee:	4b67      	ldr	r3, [pc, #412]	; (8000f8c <HAL_RCC_ClockConfig+0x1c0>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f023 0207 	bic.w	r2, r3, #7
 8000df6:	4965      	ldr	r1, [pc, #404]	; (8000f8c <HAL_RCC_ClockConfig+0x1c0>)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dfe:	4b63      	ldr	r3, [pc, #396]	; (8000f8c <HAL_RCC_ClockConfig+0x1c0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	683a      	ldr	r2, [r7, #0]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d001      	beq.n	8000e10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e0b8      	b.n	8000f82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d020      	beq.n	8000e5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f003 0304 	and.w	r3, r3, #4
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d005      	beq.n	8000e34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e28:	4b59      	ldr	r3, [pc, #356]	; (8000f90 <HAL_RCC_ClockConfig+0x1c4>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	4a58      	ldr	r2, [pc, #352]	; (8000f90 <HAL_RCC_ClockConfig+0x1c4>)
 8000e2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000e32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f003 0308 	and.w	r3, r3, #8
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d005      	beq.n	8000e4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e40:	4b53      	ldr	r3, [pc, #332]	; (8000f90 <HAL_RCC_ClockConfig+0x1c4>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	4a52      	ldr	r2, [pc, #328]	; (8000f90 <HAL_RCC_ClockConfig+0x1c4>)
 8000e46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000e4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e4c:	4b50      	ldr	r3, [pc, #320]	; (8000f90 <HAL_RCC_ClockConfig+0x1c4>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	494d      	ldr	r1, [pc, #308]	; (8000f90 <HAL_RCC_ClockConfig+0x1c4>)
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d040      	beq.n	8000eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d107      	bne.n	8000e82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e72:	4b47      	ldr	r3, [pc, #284]	; (8000f90 <HAL_RCC_ClockConfig+0x1c4>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d115      	bne.n	8000eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e07f      	b.n	8000f82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d107      	bne.n	8000e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e8a:	4b41      	ldr	r3, [pc, #260]	; (8000f90 <HAL_RCC_ClockConfig+0x1c4>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d109      	bne.n	8000eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e073      	b.n	8000f82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e9a:	4b3d      	ldr	r3, [pc, #244]	; (8000f90 <HAL_RCC_ClockConfig+0x1c4>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d101      	bne.n	8000eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e06b      	b.n	8000f82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000eaa:	4b39      	ldr	r3, [pc, #228]	; (8000f90 <HAL_RCC_ClockConfig+0x1c4>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f023 0203 	bic.w	r2, r3, #3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	4936      	ldr	r1, [pc, #216]	; (8000f90 <HAL_RCC_ClockConfig+0x1c4>)
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000ebc:	f7ff f99e 	bl	80001fc <HAL_GetTick>
 8000ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ec2:	e00a      	b.n	8000eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ec4:	f7ff f99a 	bl	80001fc <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e053      	b.n	8000f82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000eda:	4b2d      	ldr	r3, [pc, #180]	; (8000f90 <HAL_RCC_ClockConfig+0x1c4>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 020c 	and.w	r2, r3, #12
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d1eb      	bne.n	8000ec4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000eec:	4b27      	ldr	r3, [pc, #156]	; (8000f8c <HAL_RCC_ClockConfig+0x1c0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 0307 	and.w	r3, r3, #7
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d210      	bcs.n	8000f1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000efa:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <HAL_RCC_ClockConfig+0x1c0>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f023 0207 	bic.w	r2, r3, #7
 8000f02:	4922      	ldr	r1, [pc, #136]	; (8000f8c <HAL_RCC_ClockConfig+0x1c0>)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <HAL_RCC_ClockConfig+0x1c0>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	683a      	ldr	r2, [r7, #0]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d001      	beq.n	8000f1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e032      	b.n	8000f82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 0304 	and.w	r3, r3, #4
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d008      	beq.n	8000f3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f28:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <HAL_RCC_ClockConfig+0x1c4>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	4916      	ldr	r1, [pc, #88]	; (8000f90 <HAL_RCC_ClockConfig+0x1c4>)
 8000f36:	4313      	orrs	r3, r2
 8000f38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0308 	and.w	r3, r3, #8
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d009      	beq.n	8000f5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000f46:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_RCC_ClockConfig+0x1c4>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	691b      	ldr	r3, [r3, #16]
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	490e      	ldr	r1, [pc, #56]	; (8000f90 <HAL_RCC_ClockConfig+0x1c4>)
 8000f56:	4313      	orrs	r3, r2
 8000f58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000f5a:	f000 f821 	bl	8000fa0 <HAL_RCC_GetSysClockFreq>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <HAL_RCC_ClockConfig+0x1c4>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	091b      	lsrs	r3, r3, #4
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	490a      	ldr	r1, [pc, #40]	; (8000f94 <HAL_RCC_ClockConfig+0x1c8>)
 8000f6c:	5ccb      	ldrb	r3, [r1, r3]
 8000f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f72:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <HAL_RCC_ClockConfig+0x1cc>)
 8000f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <HAL_RCC_ClockConfig+0x1d0>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff f8fc 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40022000 	.word	0x40022000
 8000f90:	40021000 	.word	0x40021000
 8000f94:	08002374 	.word	0x08002374
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	20000000 	.word	0x20000000

08000fa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000fa0:	b490      	push	{r4, r7}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000fa8:	1d3c      	adds	r4, r7, #4
 8000faa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000fb0:	f240 2301 	movw	r3, #513	; 0x201
 8000fb4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61bb      	str	r3, [r7, #24]
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000fca:	4b22      	ldr	r3, [pc, #136]	; (8001054 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f003 030c 	and.w	r3, r3, #12
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	d002      	beq.n	8000fe0 <HAL_RCC_GetSysClockFreq+0x40>
 8000fda:	2b08      	cmp	r3, #8
 8000fdc:	d003      	beq.n	8000fe6 <HAL_RCC_GetSysClockFreq+0x46>
 8000fde:	e02d      	b.n	800103c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000fe0:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000fe2:	623b      	str	r3, [r7, #32]
      break;
 8000fe4:	e02d      	b.n	8001042 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	0c9b      	lsrs	r3, r3, #18
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000ff2:	4413      	add	r3, r2
 8000ff4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000ff8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d013      	beq.n	800102c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	0c5b      	lsrs	r3, r3, #17
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001012:	4413      	add	r3, r2
 8001014:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001018:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <HAL_RCC_GetSysClockFreq+0xb8>)
 800101e:	fb02 f203 	mul.w	r2, r2, r3
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	fbb2 f3f3 	udiv	r3, r2, r3
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
 800102a:	e004      	b.n	8001036 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	4a0b      	ldr	r2, [pc, #44]	; (800105c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001030:	fb02 f303 	mul.w	r3, r2, r3
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	623b      	str	r3, [r7, #32]
      break;
 800103a:	e002      	b.n	8001042 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_RCC_GetSysClockFreq+0xb8>)
 800103e:	623b      	str	r3, [r7, #32]
      break;
 8001040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001042:	6a3b      	ldr	r3, [r7, #32]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3728      	adds	r7, #40	; 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bc90      	pop	{r4, r7}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	08002364 	.word	0x08002364
 8001054:	40021000 	.word	0x40021000
 8001058:	007a1200 	.word	0x007a1200
 800105c:	003d0900 	.word	0x003d0900

08001060 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <RCC_Delay+0x34>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <RCC_Delay+0x38>)
 800106e:	fba2 2303 	umull	r2, r3, r2, r3
 8001072:	0a5b      	lsrs	r3, r3, #9
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	fb02 f303 	mul.w	r3, r2, r3
 800107a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800107c:	bf00      	nop
  }
  while (Delay --);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	1e5a      	subs	r2, r3, #1
 8001082:	60fa      	str	r2, [r7, #12]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1f9      	bne.n	800107c <RCC_Delay+0x1c>
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr
 8001094:	20000008 	.word	0x20000008
 8001098:	10624dd3 	.word	0x10624dd3

0800109c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e076      	b.n	800119c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d108      	bne.n	80010c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80010be:	d009      	beq.n	80010d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
 80010c6:	e005      	b.n	80010d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d106      	bne.n	80010f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f001 f82a 	bl	8002148 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2202      	movs	r2, #2
 80010f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800110a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800111c:	431a      	orrs	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001126:	431a      	orrs	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	431a      	orrs	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	431a      	orrs	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001144:	431a      	orrs	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800114e:	431a      	orrs	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001158:	ea42 0103 	orr.w	r1, r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001160:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	430a      	orrs	r2, r1
 800116a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	0c1a      	lsrs	r2, r3, #16
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f002 0204 	and.w	r2, r2, #4
 800117a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	69da      	ldr	r2, [r3, #28]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800118a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2201      	movs	r2, #1
 8001196:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	4613      	mov	r3, r2
 80011b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80011b4:	2300      	movs	r3, #0
 80011b6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d101      	bne.n	80011c6 <HAL_SPI_Transmit+0x22>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e126      	b.n	8001414 <HAL_SPI_Transmit+0x270>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2201      	movs	r2, #1
 80011ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80011ce:	f7ff f815 	bl	80001fc <HAL_GetTick>
 80011d2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d002      	beq.n	80011ea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80011e4:	2302      	movs	r3, #2
 80011e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80011e8:	e10b      	b.n	8001402 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d002      	beq.n	80011f6 <HAL_SPI_Transmit+0x52>
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d102      	bne.n	80011fc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80011fa:	e102      	b.n	8001402 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2203      	movs	r2, #3
 8001200:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2200      	movs	r2, #0
 8001208:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	68ba      	ldr	r2, [r7, #8]
 800120e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	88fa      	ldrh	r2, [r7, #6]
 8001214:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	88fa      	ldrh	r2, [r7, #6]
 800121a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2200      	movs	r2, #0
 8001220:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2200      	movs	r2, #0
 8001226:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2200      	movs	r2, #0
 800122c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2200      	movs	r2, #0
 8001232:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2200      	movs	r2, #0
 8001238:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001242:	d10f      	bne.n	8001264 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001252:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001262:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800126e:	2b40      	cmp	r3, #64	; 0x40
 8001270:	d007      	beq.n	8001282 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001280:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800128a:	d14b      	bne.n	8001324 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d002      	beq.n	800129a <HAL_SPI_Transmit+0xf6>
 8001294:	8afb      	ldrh	r3, [r7, #22]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d13e      	bne.n	8001318 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	881a      	ldrh	r2, [r3, #0]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	1c9a      	adds	r2, r3, #2
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	3b01      	subs	r3, #1
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80012be:	e02b      	b.n	8001318 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d112      	bne.n	80012f4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	881a      	ldrh	r2, [r3, #0]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	1c9a      	adds	r2, r3, #2
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	3b01      	subs	r3, #1
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80012f2:	e011      	b.n	8001318 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80012f4:	f7fe ff82 	bl	80001fc <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d803      	bhi.n	800130c <HAL_SPI_Transmit+0x168>
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800130a:	d102      	bne.n	8001312 <HAL_SPI_Transmit+0x16e>
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d102      	bne.n	8001318 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001316:	e074      	b.n	8001402 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800131c:	b29b      	uxth	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1ce      	bne.n	80012c0 <HAL_SPI_Transmit+0x11c>
 8001322:	e04c      	b.n	80013be <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d002      	beq.n	8001332 <HAL_SPI_Transmit+0x18e>
 800132c:	8afb      	ldrh	r3, [r7, #22]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d140      	bne.n	80013b4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	330c      	adds	r3, #12
 800133c:	7812      	ldrb	r2, [r2, #0]
 800133e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800134e:	b29b      	uxth	r3, r3
 8001350:	3b01      	subs	r3, #1
 8001352:	b29a      	uxth	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001358:	e02c      	b.n	80013b4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b02      	cmp	r3, #2
 8001366:	d113      	bne.n	8001390 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	330c      	adds	r3, #12
 8001372:	7812      	ldrb	r2, [r2, #0]
 8001374:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001384:	b29b      	uxth	r3, r3
 8001386:	3b01      	subs	r3, #1
 8001388:	b29a      	uxth	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	86da      	strh	r2, [r3, #54]	; 0x36
 800138e:	e011      	b.n	80013b4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001390:	f7fe ff34 	bl	80001fc <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	d803      	bhi.n	80013a8 <HAL_SPI_Transmit+0x204>
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a6:	d102      	bne.n	80013ae <HAL_SPI_Transmit+0x20a>
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d102      	bne.n	80013b4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80013b2:	e026      	b.n	8001402 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1cd      	bne.n	800135a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	6839      	ldr	r1, [r7, #0]
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f000 fc42 	bl	8001c4c <SPI_EndRxTxTransaction>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d002      	beq.n	80013d4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2220      	movs	r2, #32
 80013d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d10a      	bne.n	80013f2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80013dc:	2300      	movs	r3, #0
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	77fb      	strb	r3, [r7, #31]
 80013fe:	e000      	b.n	8001402 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001400:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2201      	movs	r2, #1
 8001406:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001412:	7ffb      	ldrb	r3, [r7, #31]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3720      	adds	r7, #32
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	4613      	mov	r3, r2
 8001428:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d110      	bne.n	8001458 <HAL_SPI_Receive_IT+0x3c>
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800143e:	d10b      	bne.n	8001458 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2204      	movs	r2, #4
 8001444:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f000 f882 	bl	8001558 <HAL_SPI_TransmitReceive_IT>
 8001454:	4603      	mov	r3, r0
 8001456:	e076      	b.n	8001546 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800145e:	2b01      	cmp	r3, #1
 8001460:	d101      	bne.n	8001466 <HAL_SPI_Receive_IT+0x4a>
 8001462:	2302      	movs	r3, #2
 8001464:	e06f      	b.n	8001546 <HAL_SPI_Receive_IT+0x12a>
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2201      	movs	r2, #1
 800146a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b01      	cmp	r3, #1
 8001478:	d002      	beq.n	8001480 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800147a:	2302      	movs	r3, #2
 800147c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800147e:	e05d      	b.n	800153c <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d002      	beq.n	800148c <HAL_SPI_Receive_IT+0x70>
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001490:	e054      	b.n	800153c <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2204      	movs	r2, #4
 8001496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2200      	movs	r2, #0
 800149e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	88fa      	ldrh	r2, [r7, #6]
 80014aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	88fa      	ldrh	r2, [r7, #6]
 80014b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2200      	movs	r2, #0
 80014b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2200      	movs	r2, #0
 80014bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2200      	movs	r2, #0
 80014c8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4a1e      	ldr	r2, [pc, #120]	; (8001550 <HAL_SPI_Receive_IT+0x134>)
 80014d6:	641a      	str	r2, [r3, #64]	; 0x40
 80014d8:	e002      	b.n	80014e0 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4a1d      	ldr	r2, [pc, #116]	; (8001554 <HAL_SPI_Receive_IT+0x138>)
 80014de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014e8:	d10f      	bne.n	800150a <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001508:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001518:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001524:	2b40      	cmp	r3, #64	; 0x40
 8001526:	d008      	beq.n	800153a <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	e000      	b.n	800153c <HAL_SPI_Receive_IT+0x120>
  }

error :
 800153a:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001544:	7dfb      	ldrb	r3, [r7, #23]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	08001a53 	.word	0x08001a53
 8001554:	08001a09 	.word	0x08001a09

08001558 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8001558:	b480      	push	{r7}
 800155a:	b087      	sub	sp, #28
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
 8001564:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001570:	2b01      	cmp	r3, #1
 8001572:	d101      	bne.n	8001578 <HAL_SPI_TransmitReceive_IT+0x20>
 8001574:	2302      	movs	r3, #2
 8001576:	e075      	b.n	8001664 <HAL_SPI_TransmitReceive_IT+0x10c>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001586:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800158e:	7dbb      	ldrb	r3, [r7, #22]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d00d      	beq.n	80015b0 <HAL_SPI_TransmitReceive_IT+0x58>
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800159a:	d106      	bne.n	80015aa <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d102      	bne.n	80015aa <HAL_SPI_TransmitReceive_IT+0x52>
 80015a4:	7dbb      	ldrb	r3, [r7, #22]
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d002      	beq.n	80015b0 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80015aa:	2302      	movs	r3, #2
 80015ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80015ae:	e054      	b.n	800165a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d005      	beq.n	80015c2 <HAL_SPI_TransmitReceive_IT+0x6a>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d002      	beq.n	80015c2 <HAL_SPI_TransmitReceive_IT+0x6a>
 80015bc:	887b      	ldrh	r3, [r7, #2]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d102      	bne.n	80015c8 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80015c6:	e048      	b.n	800165a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b04      	cmp	r3, #4
 80015d2:	d003      	beq.n	80015dc <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2205      	movs	r2, #5
 80015d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2200      	movs	r2, #0
 80015e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	887a      	ldrh	r2, [r7, #2]
 80015ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	887a      	ldrh	r2, [r7, #2]
 80015f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	887a      	ldrh	r2, [r7, #2]
 80015fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	887a      	ldrh	r2, [r7, #2]
 8001604:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d006      	beq.n	800161c <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4a17      	ldr	r2, [pc, #92]	; (8001670 <HAL_SPI_TransmitReceive_IT+0x118>)
 8001612:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4a17      	ldr	r2, [pc, #92]	; (8001674 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8001618:	645a      	str	r2, [r3, #68]	; 0x44
 800161a:	e005      	b.n	8001628 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4a16      	ldr	r2, [pc, #88]	; (8001678 <HAL_SPI_TransmitReceive_IT+0x120>)
 8001620:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4a15      	ldr	r2, [pc, #84]	; (800167c <HAL_SPI_TransmitReceive_IT+0x124>)
 8001626:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8001636:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001642:	2b40      	cmp	r3, #64	; 0x40
 8001644:	d008      	beq.n	8001658 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	e000      	b.n	800165a <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8001658:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001662:	7dfb      	ldrb	r3, [r7, #23]
}
 8001664:	4618      	mov	r0, r3
 8001666:	371c      	adds	r7, #28
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	0800194b 	.word	0x0800194b
 8001674:	080019ab 	.word	0x080019ab
 8001678:	08001887 	.word	0x08001887
 800167c:	080018eb 	.word	0x080018eb

08001680 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	099b      	lsrs	r3, r3, #6
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d10f      	bne.n	80016c4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00a      	beq.n	80016c4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	099b      	lsrs	r3, r3, #6
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d004      	beq.n	80016c4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	4798      	blx	r3
    return;
 80016c2:	e0be      	b.n	8001842 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	085b      	lsrs	r3, r3, #1
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00a      	beq.n	80016e6 <HAL_SPI_IRQHandler+0x66>
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	09db      	lsrs	r3, r3, #7
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d004      	beq.n	80016e6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	4798      	blx	r3
    return;
 80016e4:	e0ad      	b.n	8001842 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	095b      	lsrs	r3, r3, #5
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d106      	bne.n	8001700 <HAL_SPI_IRQHandler+0x80>
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	099b      	lsrs	r3, r3, #6
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 80a1 	beq.w	8001842 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	095b      	lsrs	r3, r3, #5
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 809a 	beq.w	8001842 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	099b      	lsrs	r3, r3, #6
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d023      	beq.n	8001762 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b03      	cmp	r3, #3
 8001724:	d011      	beq.n	800174a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172a:	f043 0204 	orr.w	r2, r3, #4
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	e00b      	b.n	8001762 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	613b      	str	r3, [r7, #16]
 800175e:	693b      	ldr	r3, [r7, #16]
        return;
 8001760:	e06f      	b.n	8001842 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	095b      	lsrs	r3, r3, #5
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d014      	beq.n	8001798 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001772:	f043 0201 	orr.w	r2, r3, #1
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800179c:	2b00      	cmp	r3, #0
 800179e:	d04f      	beq.n	8001840 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80017ae:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d104      	bne.n	80017cc <HAL_SPI_IRQHandler+0x14c>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d034      	beq.n	8001836 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0203 	bic.w	r2, r2, #3
 80017da:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d011      	beq.n	8001808 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e8:	4a17      	ldr	r2, [pc, #92]	; (8001848 <HAL_SPI_IRQHandler+0x1c8>)
 80017ea:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fe3f 	bl	8000474 <HAL_DMA_Abort_IT>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001800:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800180c:	2b00      	cmp	r3, #0
 800180e:	d016      	beq.n	800183e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001814:	4a0c      	ldr	r2, [pc, #48]	; (8001848 <HAL_SPI_IRQHandler+0x1c8>)
 8001816:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fe29 	bl	8000474 <HAL_DMA_Abort_IT>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00a      	beq.n	800183e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8001834:	e003      	b.n	800183e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 fb10 	bl	8001e5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800183c:	e000      	b.n	8001840 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800183e:	bf00      	nop
    return;
 8001840:	bf00      	nop
  }
}
 8001842:	3720      	adds	r7, #32
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	0800185f 	.word	0x0800185f

0800184c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b084      	sub	sp, #16
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2200      	movs	r2, #0
 8001870:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	f000 faef 	bl	8001e5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f103 020c 	add.w	r2, r3, #12
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189a:	7812      	ldrb	r2, [r2, #0]
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a4:	1c5a      	adds	r2, r3, #1
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	3b01      	subs	r3, #1
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018bc:	b29b      	uxth	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10f      	bne.n	80018e2 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80018d0:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d102      	bne.n	80018e2 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 f9d3 	bl	8001c88 <SPI_CloseRxTx_ISR>
    }
  }
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	330c      	adds	r3, #12
 80018fc:	7812      	ldrb	r2, [r2, #0]
 80018fe:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800190e:	b29b      	uxth	r3, r3
 8001910:	3b01      	subs	r3, #1
 8001912:	b29a      	uxth	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800191c:	b29b      	uxth	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10f      	bne.n	8001942 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001930:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001936:	b29b      	uxth	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	d102      	bne.n	8001942 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f9a3 	bl	8001c88 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800195c:	b292      	uxth	r2, r2
 800195e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001964:	1c9a      	adds	r2, r3, #2
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800196e:	b29b      	uxth	r3, r3
 8001970:	3b01      	subs	r3, #1
 8001972:	b29a      	uxth	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800197c:	b29b      	uxth	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10f      	bne.n	80019a2 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001990:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001996:	b29b      	uxth	r3, r3
 8001998:	2b00      	cmp	r3, #0
 800199a:	d102      	bne.n	80019a2 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f973 	bl	8001c88 <SPI_CloseRxTx_ISR>
    }
  }
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	881a      	ldrh	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	1c9a      	adds	r2, r3, #2
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	3b01      	subs	r3, #1
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019da:	b29b      	uxth	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10f      	bne.n	8001a00 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019ee:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d102      	bne.n	8001a00 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f944 	bl	8001c88 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f103 020c 	add.w	r2, r3, #12
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1c:	7812      	ldrb	r2, [r2, #0]
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	3b01      	subs	r3, #1
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 f993 	bl	8001d70 <SPI_CloseRx_ISR>
  }
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a64:	b292      	uxth	r2, r2
 8001a66:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6c:	1c9a      	adds	r2, r3, #2
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d102      	bne.n	8001a90 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f970 	bl	8001d70 <SPI_CloseRx_ISR>
  }
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001aa8:	f7fe fba8 	bl	80001fc <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab0:	1a9b      	subs	r3, r3, r2
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001ab8:	f7fe fba0 	bl	80001fc <HAL_GetTick>
 8001abc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001abe:	4b39      	ldr	r3, [pc, #228]	; (8001ba4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	015b      	lsls	r3, r3, #5
 8001ac4:	0d1b      	lsrs	r3, r3, #20
 8001ac6:	69fa      	ldr	r2, [r7, #28]
 8001ac8:	fb02 f303 	mul.w	r3, r2, r3
 8001acc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ace:	e054      	b.n	8001b7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad6:	d050      	beq.n	8001b7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001ad8:	f7fe fb90 	bl	80001fc <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d902      	bls.n	8001aee <SPI_WaitFlagStateUntilTimeout+0x56>
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d13d      	bne.n	8001b6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001afc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b06:	d111      	bne.n	8001b2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b10:	d004      	beq.n	8001b1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b1a:	d107      	bne.n	8001b2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b34:	d10f      	bne.n	8001b56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e017      	b.n	8001b9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	4013      	ands	r3, r2
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	bf0c      	ite	eq
 8001b8a:	2301      	moveq	r3, #1
 8001b8c:	2300      	movne	r3, #0
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	461a      	mov	r2, r3
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d19b      	bne.n	8001ad0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3720      	adds	r7, #32
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000008 	.word	0x20000008

08001ba8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af02      	add	r7, sp, #8
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bbc:	d111      	bne.n	8001be2 <SPI_EndRxTransaction+0x3a>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bc6:	d004      	beq.n	8001bd2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bd0:	d107      	bne.n	8001be2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001be0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bea:	d117      	bne.n	8001c1c <SPI_EndRxTransaction+0x74>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf4:	d112      	bne.n	8001c1c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2101      	movs	r1, #1
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f7ff ff49 	bl	8001a98 <SPI_WaitFlagStateUntilTimeout>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d01a      	beq.n	8001c42 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c10:	f043 0220 	orr.w	r2, r3, #32
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e013      	b.n	8001c44 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	2200      	movs	r2, #0
 8001c24:	2180      	movs	r1, #128	; 0x80
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f7ff ff36 	bl	8001a98 <SPI_WaitFlagStateUntilTimeout>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d007      	beq.n	8001c42 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c36:	f043 0220 	orr.w	r2, r3, #32
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e000      	b.n	8001c44 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2180      	movs	r1, #128	; 0x80
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f7ff ff18 	bl	8001a98 <SPI_WaitFlagStateUntilTimeout>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d007      	beq.n	8001c7e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c72:	f043 0220 	orr.w	r2, r3, #32
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e000      	b.n	8001c80 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8001c90:	4b35      	ldr	r3, [pc, #212]	; (8001d68 <SPI_CloseRxTx_ISR+0xe0>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a35      	ldr	r2, [pc, #212]	; (8001d6c <SPI_CloseRxTx_ISR+0xe4>)
 8001c96:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9a:	0a5b      	lsrs	r3, r3, #9
 8001c9c:	2264      	movs	r2, #100	; 0x64
 8001c9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ca2:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001ca4:	f7fe faaa 	bl	80001fc <HAL_GetTick>
 8001ca8:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0220 	bic.w	r2, r2, #32
 8001cb8:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d106      	bne.n	8001cce <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc4:	f043 0220 	orr.w	r2, r3, #32
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001ccc:	e009      	b.n	8001ce2 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0eb      	beq.n	8001cba <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	2164      	movs	r1, #100	; 0x64
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff ffb0 	bl	8001c4c <SPI_EndRxTxTransaction>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d005      	beq.n	8001cfe <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf6:	f043 0220 	orr.w	r2, r3, #32
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10a      	bne.n	8001d1c <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d115      	bne.n	8001d50 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d107      	bne.n	8001d40 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f87d 	bl	8001e38 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8001d3e:	e00e      	b.n	8001d5e <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7ff fd7f 	bl	800184c <HAL_SPI_TxRxCpltCallback>
}
 8001d4e:	e006      	b.n	8001d5e <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f87f 	bl	8001e5c <HAL_SPI_ErrorCallback>
}
 8001d5e:	bf00      	nop
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000008 	.word	0x20000008
 8001d6c:	057619f1 	.word	0x057619f1

08001d70 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d86:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8001d88:	f7fe fa38 	bl	80001fc <HAL_GetTick>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	461a      	mov	r2, r3
 8001d90:	2164      	movs	r1, #100	; 0x64
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ff08 	bl	8001ba8 <SPI_EndRxTransaction>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d005      	beq.n	8001daa <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da2:	f043 0220 	orr.w	r2, r3, #32
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10a      	bne.n	8001dc8 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d103      	bne.n	8001de0 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f82d 	bl	8001e38 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8001dde:	e002      	b.n	8001de6 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f83b 	bl	8001e5c <HAL_SPI_ErrorCallback>
}
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <led_on>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t data_rx = 0;

void led_on()
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001df4:	2200      	movs	r2, #0
 8001df6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dfa:	4802      	ldr	r0, [pc, #8]	; (8001e04 <led_on+0x14>)
 8001dfc:	f7fe fd34 	bl	8000868 <HAL_GPIO_WritePin>
}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40011000 	.word	0x40011000

08001e08 <led_off>:

void led_off()
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e12:	4802      	ldr	r0, [pc, #8]	; (8001e1c <led_off+0x14>)
 8001e14:	f7fe fd28 	bl	8000868 <HAL_GPIO_WritePin>
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40011000 	.word	0x40011000

08001e20 <led_toggle>:

void led_toggle()
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001e24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <led_toggle+0x14>)
 8001e2a:	f7fe fd35 	bl	8000898 <HAL_GPIO_TogglePin>
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40011000 	.word	0x40011000

08001e38 <HAL_SPI_RxCpltCallback>:
long int count = 0;

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
//void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
//void HAL_SPI_MasterTxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
    //   fl=1;
    // }
//    led_toggle();
//    count++;
  }
  count++;
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_SPI_RxCpltCallback+0x20>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	3301      	adds	r3, #1
 8001e46:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <HAL_SPI_RxCpltCallback+0x20>)
 8001e48:	6013      	str	r3, [r2, #0]
//  led_on();
  led_toggle();
 8001e4a:	f7ff ffe9 	bl	8001e20 <led_toggle>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	2000002c 	.word	0x2000002c

08001e5c <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
//   led_on();
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr
	...

08001e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e76:	f7fe f969 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e7a:	f000 f833 	bl	8001ee4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e7e:	f000 f8df 	bl	8002040 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001e82:	f000 f871 	bl	8001f68 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001e86:	f000 f8a5 	bl	8001fd4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  uint8_t data_tx = 100;
 8001e8a:	2364      	movs	r3, #100	; 0x64
 8001e8c:	71fb      	strb	r3, [r7, #7]

  led_on();
 8001e8e:	f7ff ffaf 	bl	8001df0 <led_on>
  HAL_Delay(2000);
 8001e92:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e96:	f7fe f9bb 	bl	8000210 <HAL_Delay>
  led_off();
 8001e9a:	f7ff ffb5 	bl	8001e08 <led_off>
  HAL_Delay(1000);
 8001e9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ea2:	f7fe f9b5 	bl	8000210 <HAL_Delay>

  HAL_SPI_Receive_IT(&hspi2, &data_rx, sizeof(data_rx));
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	490b      	ldr	r1, [pc, #44]	; (8001ed8 <main+0x68>)
 8001eaa:	480c      	ldr	r0, [pc, #48]	; (8001edc <main+0x6c>)
 8001eac:	f7ff fab6 	bl	800141c <HAL_SPI_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_SPI_Transmit(&hspi1, &data_tx, sizeof(data_tx), 100);
 8001eb0:	1df9      	adds	r1, r7, #7
 8001eb2:	2364      	movs	r3, #100	; 0x64
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	480a      	ldr	r0, [pc, #40]	; (8001ee0 <main+0x70>)
 8001eb8:	f7ff f974 	bl	80011a4 <HAL_SPI_Transmit>
	data_tx++;
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	71fb      	strb	r3, [r7, #7]
	if (data_tx > 110)
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	2b6e      	cmp	r3, #110	; 0x6e
 8001ec8:	d901      	bls.n	8001ece <main+0x5e>
	{
		data_tx = 100;
 8001eca:	2364      	movs	r3, #100	; 0x64
 8001ecc:	71fb      	strb	r3, [r7, #7]
	}

	//led_toggle();
	HAL_Delay(500);
 8001ece:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ed2:	f7fe f99d 	bl	8000210 <HAL_Delay>
	HAL_SPI_Transmit(&hspi1, &data_tx, sizeof(data_tx), 100);
 8001ed6:	e7eb      	b.n	8001eb0 <main+0x40>
 8001ed8:	20000028 	.word	0x20000028
 8001edc:	20000034 	.word	0x20000034
 8001ee0:	2000008c 	.word	0x2000008c

08001ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b090      	sub	sp, #64	; 0x40
 8001ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eea:	f107 0318 	add.w	r3, r7, #24
 8001eee:	2228      	movs	r2, #40	; 0x28
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 fa22 	bl	800233c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	60da      	str	r2, [r3, #12]
 8001f04:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f06:	2302      	movs	r3, #2
 8001f08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f0e:	2310      	movs	r3, #16
 8001f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f12:	2302      	movs	r3, #2
 8001f14:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001f16:	2300      	movs	r3, #0
 8001f18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f1a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f20:	f107 0318 	add.w	r3, r7, #24
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe fcd1 	bl	80008cc <HAL_RCC_OscConfig>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001f30:	f000 f8d2 	bl	80020d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f34:	230f      	movs	r3, #15
 8001f36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f4a:	1d3b      	adds	r3, r7, #4
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe ff3c 	bl	8000dcc <HAL_RCC_ClockConfig>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001f5a:	f000 f8bd 	bl	80020d8 <Error_Handler>
  }
}
 8001f5e:	bf00      	nop
 8001f60:	3740      	adds	r7, #64	; 0x40
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f6c:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <MX_SPI1_Init+0x64>)
 8001f6e:	4a18      	ldr	r2, [pc, #96]	; (8001fd0 <MX_SPI1_Init+0x68>)
 8001f70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f72:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <MX_SPI1_Init+0x64>)
 8001f74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f7a:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <MX_SPI1_Init+0x64>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <MX_SPI1_Init+0x64>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f86:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <MX_SPI1_Init+0x64>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <MX_SPI1_Init+0x64>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f92:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <MX_SPI1_Init+0x64>)
 8001f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f98:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <MX_SPI1_Init+0x64>)
 8001f9c:	2238      	movs	r2, #56	; 0x38
 8001f9e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <MX_SPI1_Init+0x64>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fa6:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <MX_SPI1_Init+0x64>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fac:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <MX_SPI1_Init+0x64>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fb2:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <MX_SPI1_Init+0x64>)
 8001fb4:	220a      	movs	r2, #10
 8001fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fb8:	4804      	ldr	r0, [pc, #16]	; (8001fcc <MX_SPI1_Init+0x64>)
 8001fba:	f7ff f86f 	bl	800109c <HAL_SPI_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001fc4:	f000 f888 	bl	80020d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fc8:	bf00      	nop
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	2000008c 	.word	0x2000008c
 8001fd0:	40013000 	.word	0x40013000

08001fd4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001fd8:	4b17      	ldr	r3, [pc, #92]	; (8002038 <MX_SPI2_Init+0x64>)
 8001fda:	4a18      	ldr	r2, [pc, #96]	; (800203c <MX_SPI2_Init+0x68>)
 8001fdc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8001fde:	4b16      	ldr	r3, [pc, #88]	; (8002038 <MX_SPI2_Init+0x64>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001fe4:	4b14      	ldr	r3, [pc, #80]	; (8002038 <MX_SPI2_Init+0x64>)
 8001fe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <MX_SPI2_Init+0x64>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <MX_SPI2_Init+0x64>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <MX_SPI2_Init+0x64>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <MX_SPI2_Init+0x64>)
 8002000:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002004:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002006:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <MX_SPI2_Init+0x64>)
 8002008:	2238      	movs	r2, #56	; 0x38
 800200a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800200c:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <MX_SPI2_Init+0x64>)
 800200e:	2200      	movs	r2, #0
 8002010:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <MX_SPI2_Init+0x64>)
 8002014:	2200      	movs	r2, #0
 8002016:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002018:	4b07      	ldr	r3, [pc, #28]	; (8002038 <MX_SPI2_Init+0x64>)
 800201a:	2200      	movs	r2, #0
 800201c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <MX_SPI2_Init+0x64>)
 8002020:	220a      	movs	r2, #10
 8002022:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002024:	4804      	ldr	r0, [pc, #16]	; (8002038 <MX_SPI2_Init+0x64>)
 8002026:	f7ff f839 	bl	800109c <HAL_SPI_Init>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002030:	f000 f852 	bl	80020d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000034 	.word	0x20000034
 800203c:	40003800 	.word	0x40003800

08002040 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002046:	f107 0310 	add.w	r3, r7, #16
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]
 8002050:	609a      	str	r2, [r3, #8]
 8002052:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002054:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <MX_GPIO_Init+0x90>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	4a1d      	ldr	r2, [pc, #116]	; (80020d0 <MX_GPIO_Init+0x90>)
 800205a:	f043 0310 	orr.w	r3, r3, #16
 800205e:	6193      	str	r3, [r2, #24]
 8002060:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <MX_GPIO_Init+0x90>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	f003 0310 	and.w	r3, r3, #16
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800206c:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <MX_GPIO_Init+0x90>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	4a17      	ldr	r2, [pc, #92]	; (80020d0 <MX_GPIO_Init+0x90>)
 8002072:	f043 0304 	orr.w	r3, r3, #4
 8002076:	6193      	str	r3, [r2, #24]
 8002078:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <MX_GPIO_Init+0x90>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002084:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <MX_GPIO_Init+0x90>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	4a11      	ldr	r2, [pc, #68]	; (80020d0 <MX_GPIO_Init+0x90>)
 800208a:	f043 0308 	orr.w	r3, r3, #8
 800208e:	6193      	str	r3, [r2, #24]
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <MX_GPIO_Init+0x90>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800209c:	2200      	movs	r2, #0
 800209e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020a2:	480c      	ldr	r0, [pc, #48]	; (80020d4 <MX_GPIO_Init+0x94>)
 80020a4:	f7fe fbe0 	bl	8000868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80020a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ae:	2301      	movs	r3, #1
 80020b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b6:	2302      	movs	r3, #2
 80020b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80020ba:	f107 0310 	add.w	r3, r7, #16
 80020be:	4619      	mov	r1, r3
 80020c0:	4804      	ldr	r0, [pc, #16]	; (80020d4 <MX_GPIO_Init+0x94>)
 80020c2:	f7fe fa4d 	bl	8000560 <HAL_GPIO_Init>

}
 80020c6:	bf00      	nop
 80020c8:	3720      	adds	r7, #32
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40011000 	.word	0x40011000

080020d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020dc:	b672      	cpsid	i
}
 80020de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020e0:	e7fe      	b.n	80020e0 <Error_Handler+0x8>
	...

080020e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020ea:	4b15      	ldr	r3, [pc, #84]	; (8002140 <HAL_MspInit+0x5c>)
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	4a14      	ldr	r2, [pc, #80]	; (8002140 <HAL_MspInit+0x5c>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6193      	str	r3, [r2, #24]
 80020f6:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_MspInit+0x5c>)
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <HAL_MspInit+0x5c>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	4a0e      	ldr	r2, [pc, #56]	; (8002140 <HAL_MspInit+0x5c>)
 8002108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800210c:	61d3      	str	r3, [r2, #28]
 800210e:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <HAL_MspInit+0x5c>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	607b      	str	r3, [r7, #4]
 8002118:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <HAL_MspInit+0x60>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	4a04      	ldr	r2, [pc, #16]	; (8002144 <HAL_MspInit+0x60>)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	40021000 	.word	0x40021000
 8002144:	40010000 	.word	0x40010000

08002148 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	; 0x28
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 0318 	add.w	r3, r7, #24
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a2f      	ldr	r2, [pc, #188]	; (8002220 <HAL_SPI_MspInit+0xd8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d124      	bne.n	80021b2 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002168:	4b2e      	ldr	r3, [pc, #184]	; (8002224 <HAL_SPI_MspInit+0xdc>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	4a2d      	ldr	r2, [pc, #180]	; (8002224 <HAL_SPI_MspInit+0xdc>)
 800216e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002172:	6193      	str	r3, [r2, #24]
 8002174:	4b2b      	ldr	r3, [pc, #172]	; (8002224 <HAL_SPI_MspInit+0xdc>)
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002180:	4b28      	ldr	r3, [pc, #160]	; (8002224 <HAL_SPI_MspInit+0xdc>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	4a27      	ldr	r2, [pc, #156]	; (8002224 <HAL_SPI_MspInit+0xdc>)
 8002186:	f043 0304 	orr.w	r3, r3, #4
 800218a:	6193      	str	r3, [r2, #24]
 800218c:	4b25      	ldr	r3, [pc, #148]	; (8002224 <HAL_SPI_MspInit+0xdc>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002198:	23a0      	movs	r3, #160	; 0xa0
 800219a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021a0:	2303      	movs	r3, #3
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a4:	f107 0318 	add.w	r3, r7, #24
 80021a8:	4619      	mov	r1, r3
 80021aa:	481f      	ldr	r0, [pc, #124]	; (8002228 <HAL_SPI_MspInit+0xe0>)
 80021ac:	f7fe f9d8 	bl	8000560 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80021b0:	e031      	b.n	8002216 <HAL_SPI_MspInit+0xce>
  else if(hspi->Instance==SPI2)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a1d      	ldr	r2, [pc, #116]	; (800222c <HAL_SPI_MspInit+0xe4>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d12c      	bne.n	8002216 <HAL_SPI_MspInit+0xce>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021bc:	4b19      	ldr	r3, [pc, #100]	; (8002224 <HAL_SPI_MspInit+0xdc>)
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	4a18      	ldr	r2, [pc, #96]	; (8002224 <HAL_SPI_MspInit+0xdc>)
 80021c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c6:	61d3      	str	r3, [r2, #28]
 80021c8:	4b16      	ldr	r3, [pc, #88]	; (8002224 <HAL_SPI_MspInit+0xdc>)
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d4:	4b13      	ldr	r3, [pc, #76]	; (8002224 <HAL_SPI_MspInit+0xdc>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	4a12      	ldr	r2, [pc, #72]	; (8002224 <HAL_SPI_MspInit+0xdc>)
 80021da:	f043 0308 	orr.w	r3, r3, #8
 80021de:	6193      	str	r3, [r2, #24]
 80021e0:	4b10      	ldr	r3, [pc, #64]	; (8002224 <HAL_SPI_MspInit+0xdc>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80021ec:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80021f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fa:	f107 0318 	add.w	r3, r7, #24
 80021fe:	4619      	mov	r1, r3
 8002200:	480b      	ldr	r0, [pc, #44]	; (8002230 <HAL_SPI_MspInit+0xe8>)
 8002202:	f7fe f9ad 	bl	8000560 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002206:	2200      	movs	r2, #0
 8002208:	2100      	movs	r1, #0
 800220a:	2024      	movs	r0, #36	; 0x24
 800220c:	f7fe f8fb 	bl	8000406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002210:	2024      	movs	r0, #36	; 0x24
 8002212:	f7fe f914 	bl	800043e <HAL_NVIC_EnableIRQ>
}
 8002216:	bf00      	nop
 8002218:	3728      	adds	r7, #40	; 0x28
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40013000 	.word	0x40013000
 8002224:	40021000 	.word	0x40021000
 8002228:	40010800 	.word	0x40010800
 800222c:	40003800 	.word	0x40003800
 8002230:	40010c00 	.word	0x40010c00

08002234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002238:	e7fe      	b.n	8002238 <NMI_Handler+0x4>

0800223a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800223e:	e7fe      	b.n	800223e <HardFault_Handler+0x4>

08002240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002244:	e7fe      	b.n	8002244 <MemManage_Handler+0x4>

08002246 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800224a:	e7fe      	b.n	800224a <BusFault_Handler+0x4>

0800224c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002250:	e7fe      	b.n	8002250 <UsageFault_Handler+0x4>

08002252 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr

0800225e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr

0800226a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr

08002276 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800227a:	f7fd ffad 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */
  led_toggle();
 8002288:	f7ff fdca 	bl	8001e20 <led_toggle>

//  led_on();
  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800228c:	4802      	ldr	r0, [pc, #8]	; (8002298 <SPI2_IRQHandler+0x14>)
 800228e:	f7ff f9f7 	bl	8001680 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000034 	.word	0x20000034

0800229c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022a8:	480c      	ldr	r0, [pc, #48]	; (80022dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022aa:	490d      	ldr	r1, [pc, #52]	; (80022e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022ac:	4a0d      	ldr	r2, [pc, #52]	; (80022e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022b0:	e002      	b.n	80022b8 <LoopCopyDataInit>

080022b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022b6:	3304      	adds	r3, #4

080022b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022bc:	d3f9      	bcc.n	80022b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022be:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022c0:	4c0a      	ldr	r4, [pc, #40]	; (80022ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80022c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c4:	e001      	b.n	80022ca <LoopFillZerobss>

080022c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c8:	3204      	adds	r2, #4

080022ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022cc:	d3fb      	bcc.n	80022c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022ce:	f7ff ffe5 	bl	800229c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022d2:	f000 f80f 	bl	80022f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022d6:	f7ff fdcb 	bl	8001e70 <main>
  bx lr
 80022da:	4770      	bx	lr
  ldr r0, =_sdata
 80022dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80022e4:	0800238c 	.word	0x0800238c
  ldr r2, =_sbss
 80022e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80022ec:	200000e4 	.word	0x200000e4

080022f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022f0:	e7fe      	b.n	80022f0 <ADC1_2_IRQHandler>
	...

080022f4 <__libc_init_array>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	2600      	movs	r6, #0
 80022f8:	4d0c      	ldr	r5, [pc, #48]	; (800232c <__libc_init_array+0x38>)
 80022fa:	4c0d      	ldr	r4, [pc, #52]	; (8002330 <__libc_init_array+0x3c>)
 80022fc:	1b64      	subs	r4, r4, r5
 80022fe:	10a4      	asrs	r4, r4, #2
 8002300:	42a6      	cmp	r6, r4
 8002302:	d109      	bne.n	8002318 <__libc_init_array+0x24>
 8002304:	f000 f822 	bl	800234c <_init>
 8002308:	2600      	movs	r6, #0
 800230a:	4d0a      	ldr	r5, [pc, #40]	; (8002334 <__libc_init_array+0x40>)
 800230c:	4c0a      	ldr	r4, [pc, #40]	; (8002338 <__libc_init_array+0x44>)
 800230e:	1b64      	subs	r4, r4, r5
 8002310:	10a4      	asrs	r4, r4, #2
 8002312:	42a6      	cmp	r6, r4
 8002314:	d105      	bne.n	8002322 <__libc_init_array+0x2e>
 8002316:	bd70      	pop	{r4, r5, r6, pc}
 8002318:	f855 3b04 	ldr.w	r3, [r5], #4
 800231c:	4798      	blx	r3
 800231e:	3601      	adds	r6, #1
 8002320:	e7ee      	b.n	8002300 <__libc_init_array+0xc>
 8002322:	f855 3b04 	ldr.w	r3, [r5], #4
 8002326:	4798      	blx	r3
 8002328:	3601      	adds	r6, #1
 800232a:	e7f2      	b.n	8002312 <__libc_init_array+0x1e>
 800232c:	08002384 	.word	0x08002384
 8002330:	08002384 	.word	0x08002384
 8002334:	08002384 	.word	0x08002384
 8002338:	08002388 	.word	0x08002388

0800233c <memset>:
 800233c:	4603      	mov	r3, r0
 800233e:	4402      	add	r2, r0
 8002340:	4293      	cmp	r3, r2
 8002342:	d100      	bne.n	8002346 <memset+0xa>
 8002344:	4770      	bx	lr
 8002346:	f803 1b01 	strb.w	r1, [r3], #1
 800234a:	e7f9      	b.n	8002340 <memset+0x4>

0800234c <_init>:
 800234c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800234e:	bf00      	nop
 8002350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002352:	bc08      	pop	{r3}
 8002354:	469e      	mov	lr, r3
 8002356:	4770      	bx	lr

08002358 <_fini>:
 8002358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800235a:	bf00      	nop
 800235c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800235e:	bc08      	pop	{r3}
 8002360:	469e      	mov	lr, r3
 8002362:	4770      	bx	lr
