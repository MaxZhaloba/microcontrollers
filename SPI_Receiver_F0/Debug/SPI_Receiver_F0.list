
SPI_Receiver_F0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002340  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002400  08002400  00012400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002430  08002430  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002430  08002430  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002430  08002430  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002430  08002430  00012430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002434  08002434  00012434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  08002444  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08002444  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005bc5  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000141c  00000000  00000000  00025bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f0  00000000  00000000  00027018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000548  00000000  00000000  00027608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e599  00000000  00000000  00027b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000735a  00000000  00000000  000360e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055b34  00000000  00000000  0003d443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00092f77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013c8  00000000  00000000  00092fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080023e8 	.word	0x080023e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080023e8 	.word	0x080023e8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <led_on>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void led_on()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000224:	2390      	movs	r3, #144	; 0x90
 8000226:	05db      	lsls	r3, r3, #23
 8000228:	2200      	movs	r2, #0
 800022a:	2110      	movs	r1, #16
 800022c:	0018      	movs	r0, r3
 800022e:	f000 fd15 	bl	8000c5c <HAL_GPIO_WritePin>
}
 8000232:	46c0      	nop			; (mov r8, r8)
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <led_off>:

void led_off()
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800023c:	2390      	movs	r3, #144	; 0x90
 800023e:	05db      	lsls	r3, r3, #23
 8000240:	2201      	movs	r2, #1
 8000242:	2110      	movs	r1, #16
 8000244:	0018      	movs	r0, r3
 8000246:	f000 fd09 	bl	8000c5c <HAL_GPIO_WritePin>
}
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}

08000250 <led_toggle>:

void led_toggle()
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000254:	2390      	movs	r3, #144	; 0x90
 8000256:	05db      	lsls	r3, r3, #23
 8000258:	2110      	movs	r1, #16
 800025a:	0018      	movs	r0, r3
 800025c:	f000 fd1b 	bl	8000c96 <HAL_GPIO_TogglePin>
}
 8000260:	46c0      	nop			; (mov r8, r8)
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
	...

08000268 <HAL_SPI_RxCpltCallback>:

long int count = 0;

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
    //   fl=1;
    // }
//    led_toggle();
//    count++;
  }
  count++;
 8000270:	4b05      	ldr	r3, [pc, #20]	; (8000288 <HAL_SPI_RxCpltCallback+0x20>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	1c5a      	adds	r2, r3, #1
 8000276:	4b04      	ldr	r3, [pc, #16]	; (8000288 <HAL_SPI_RxCpltCallback+0x20>)
 8000278:	601a      	str	r2, [r3, #0]
//  led_on();
  led_toggle();
 800027a:	f7ff ffe9 	bl	8000250 <led_toggle>
}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	46bd      	mov	sp, r7
 8000282:	b002      	add	sp, #8
 8000284:	bd80      	pop	{r7, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	20000028 	.word	0x20000028

0800028c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000292:	f000 f9c7 	bl	8000624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000296:	f000 f827 	bl	80002e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029a:	f000 f8a9 	bl	80003f0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800029e:	f000 f86b 	bl	8000378 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  led_on();
 80002a2:	f7ff ffbd 	bl	8000220 <led_on>
  HAL_Delay(2000);
 80002a6:	23fa      	movs	r3, #250	; 0xfa
 80002a8:	00db      	lsls	r3, r3, #3
 80002aa:	0018      	movs	r0, r3
 80002ac:	f000 fa1e 	bl	80006ec <HAL_Delay>
  led_off();
 80002b0:	f7ff ffc2 	bl	8000238 <led_off>
  HAL_Delay(1000);
 80002b4:	23fa      	movs	r3, #250	; 0xfa
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	0018      	movs	r0, r3
 80002ba:	f000 fa17 	bl	80006ec <HAL_Delay>

  uint8_t data_rx = 0;
 80002be:	1dfb      	adds	r3, r7, #7
 80002c0:	2200      	movs	r2, #0
 80002c2:	701a      	strb	r2, [r3, #0]

  HAL_SPI_Receive_IT(&hspi1, &data_rx, sizeof(data_rx));
 80002c4:	1df9      	adds	r1, r7, #7
 80002c6:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <main+0x54>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	0018      	movs	r0, r3
 80002cc:	f001 fa02 	bl	80016d4 <HAL_SPI_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(5000);
 80002d0:	4b04      	ldr	r3, [pc, #16]	; (80002e4 <main+0x58>)
 80002d2:	0018      	movs	r0, r3
 80002d4:	f000 fa0a 	bl	80006ec <HAL_Delay>

	  HAL_Delay(1);
 80002d8:	2001      	movs	r0, #1
 80002da:	f000 fa07 	bl	80006ec <HAL_Delay>
	  HAL_Delay(5000);
 80002de:	e7f7      	b.n	80002d0 <main+0x44>
 80002e0:	2000002c 	.word	0x2000002c
 80002e4:	00001388 	.word	0x00001388

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b590      	push	{r4, r7, lr}
 80002ea:	b091      	sub	sp, #68	; 0x44
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	2410      	movs	r4, #16
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	0018      	movs	r0, r3
 80002f4:	2330      	movs	r3, #48	; 0x30
 80002f6:	001a      	movs	r2, r3
 80002f8:	2100      	movs	r1, #0
 80002fa:	f002 f86d 	bl	80023d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fe:	003b      	movs	r3, r7
 8000300:	0018      	movs	r0, r3
 8000302:	2310      	movs	r3, #16
 8000304:	001a      	movs	r2, r3
 8000306:	2100      	movs	r1, #0
 8000308:	f002 f866 	bl	80023d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800030c:	0021      	movs	r1, r4
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2201      	movs	r2, #1
 8000312:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2201      	movs	r2, #1
 8000318:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2202      	movs	r2, #2
 800031e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2280      	movs	r2, #128	; 0x80
 8000324:	0252      	lsls	r2, r2, #9
 8000326:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000328:	187b      	adds	r3, r7, r1
 800032a:	2280      	movs	r2, #128	; 0x80
 800032c:	0352      	lsls	r2, r2, #13
 800032e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000330:	187b      	adds	r3, r7, r1
 8000332:	2200      	movs	r2, #0
 8000334:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000336:	187b      	adds	r3, r7, r1
 8000338:	0018      	movs	r0, r3
 800033a:	f000 fcc7 	bl	8000ccc <HAL_RCC_OscConfig>
 800033e:	1e03      	subs	r3, r0, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000342:	f000 f89d 	bl	8000480 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000346:	003b      	movs	r3, r7
 8000348:	2207      	movs	r2, #7
 800034a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034c:	003b      	movs	r3, r7
 800034e:	2202      	movs	r2, #2
 8000350:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000352:	003b      	movs	r3, r7
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000358:	003b      	movs	r3, r7
 800035a:	2200      	movs	r2, #0
 800035c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800035e:	003b      	movs	r3, r7
 8000360:	2101      	movs	r1, #1
 8000362:	0018      	movs	r0, r3
 8000364:	f000 ffcc 	bl	8001300 <HAL_RCC_ClockConfig>
 8000368:	1e03      	subs	r3, r0, #0
 800036a:	d001      	beq.n	8000370 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800036c:	f000 f888 	bl	8000480 <Error_Handler>
  }
}
 8000370:	46c0      	nop			; (mov r8, r8)
 8000372:	46bd      	mov	sp, r7
 8000374:	b011      	add	sp, #68	; 0x44
 8000376:	bd90      	pop	{r4, r7, pc}

08000378 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800037c:	4b1a      	ldr	r3, [pc, #104]	; (80003e8 <MX_SPI1_Init+0x70>)
 800037e:	4a1b      	ldr	r2, [pc, #108]	; (80003ec <MX_SPI1_Init+0x74>)
 8000380:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000382:	4b19      	ldr	r3, [pc, #100]	; (80003e8 <MX_SPI1_Init+0x70>)
 8000384:	2200      	movs	r2, #0
 8000386:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000388:	4b17      	ldr	r3, [pc, #92]	; (80003e8 <MX_SPI1_Init+0x70>)
 800038a:	2280      	movs	r2, #128	; 0x80
 800038c:	00d2      	lsls	r2, r2, #3
 800038e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000390:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <MX_SPI1_Init+0x70>)
 8000392:	22e0      	movs	r2, #224	; 0xe0
 8000394:	00d2      	lsls	r2, r2, #3
 8000396:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000398:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <MX_SPI1_Init+0x70>)
 800039a:	2200      	movs	r2, #0
 800039c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800039e:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <MX_SPI1_Init+0x70>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003a4:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <MX_SPI1_Init+0x70>)
 80003a6:	2280      	movs	r2, #128	; 0x80
 80003a8:	0092      	lsls	r2, r2, #2
 80003aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003ac:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <MX_SPI1_Init+0x70>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003b2:	4b0d      	ldr	r3, [pc, #52]	; (80003e8 <MX_SPI1_Init+0x70>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003b8:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <MX_SPI1_Init+0x70>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003be:	4b0a      	ldr	r3, [pc, #40]	; (80003e8 <MX_SPI1_Init+0x70>)
 80003c0:	2207      	movs	r2, #7
 80003c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003c4:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <MX_SPI1_Init+0x70>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80003ca:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <MX_SPI1_Init+0x70>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <MX_SPI1_Init+0x70>)
 80003d2:	0018      	movs	r0, r3
 80003d4:	f001 f8c6 	bl	8001564 <HAL_SPI_Init>
 80003d8:	1e03      	subs	r3, r0, #0
 80003da:	d001      	beq.n	80003e0 <MX_SPI1_Init+0x68>
  {
    Error_Handler();
 80003dc:	f000 f850 	bl	8000480 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003e0:	46c0      	nop			; (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	2000002c 	.word	0x2000002c
 80003ec:	40013000 	.word	0x40013000

080003f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f0:	b590      	push	{r4, r7, lr}
 80003f2:	b089      	sub	sp, #36	; 0x24
 80003f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f6:	240c      	movs	r4, #12
 80003f8:	193b      	adds	r3, r7, r4
 80003fa:	0018      	movs	r0, r3
 80003fc:	2314      	movs	r3, #20
 80003fe:	001a      	movs	r2, r3
 8000400:	2100      	movs	r1, #0
 8000402:	f001 ffe9 	bl	80023d8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000406:	4b1d      	ldr	r3, [pc, #116]	; (800047c <MX_GPIO_Init+0x8c>)
 8000408:	695a      	ldr	r2, [r3, #20]
 800040a:	4b1c      	ldr	r3, [pc, #112]	; (800047c <MX_GPIO_Init+0x8c>)
 800040c:	2180      	movs	r1, #128	; 0x80
 800040e:	03c9      	lsls	r1, r1, #15
 8000410:	430a      	orrs	r2, r1
 8000412:	615a      	str	r2, [r3, #20]
 8000414:	4b19      	ldr	r3, [pc, #100]	; (800047c <MX_GPIO_Init+0x8c>)
 8000416:	695a      	ldr	r2, [r3, #20]
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	03db      	lsls	r3, r3, #15
 800041c:	4013      	ands	r3, r2
 800041e:	60bb      	str	r3, [r7, #8]
 8000420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000422:	4b16      	ldr	r3, [pc, #88]	; (800047c <MX_GPIO_Init+0x8c>)
 8000424:	695a      	ldr	r2, [r3, #20]
 8000426:	4b15      	ldr	r3, [pc, #84]	; (800047c <MX_GPIO_Init+0x8c>)
 8000428:	2180      	movs	r1, #128	; 0x80
 800042a:	0289      	lsls	r1, r1, #10
 800042c:	430a      	orrs	r2, r1
 800042e:	615a      	str	r2, [r3, #20]
 8000430:	4b12      	ldr	r3, [pc, #72]	; (800047c <MX_GPIO_Init+0x8c>)
 8000432:	695a      	ldr	r2, [r3, #20]
 8000434:	2380      	movs	r3, #128	; 0x80
 8000436:	029b      	lsls	r3, r3, #10
 8000438:	4013      	ands	r3, r2
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800043e:	2390      	movs	r3, #144	; 0x90
 8000440:	05db      	lsls	r3, r3, #23
 8000442:	2200      	movs	r2, #0
 8000444:	2110      	movs	r1, #16
 8000446:	0018      	movs	r0, r3
 8000448:	f000 fc08 	bl	8000c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800044c:	0021      	movs	r1, r4
 800044e:	187b      	adds	r3, r7, r1
 8000450:	2210      	movs	r2, #16
 8000452:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000454:	187b      	adds	r3, r7, r1
 8000456:	2201      	movs	r2, #1
 8000458:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	187b      	adds	r3, r7, r1
 800045c:	2200      	movs	r2, #0
 800045e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000460:	187b      	adds	r3, r7, r1
 8000462:	2200      	movs	r2, #0
 8000464:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000466:	187a      	adds	r2, r7, r1
 8000468:	2390      	movs	r3, #144	; 0x90
 800046a:	05db      	lsls	r3, r3, #23
 800046c:	0011      	movs	r1, r2
 800046e:	0018      	movs	r0, r3
 8000470:	f000 fa84 	bl	800097c <HAL_GPIO_Init>

}
 8000474:	46c0      	nop			; (mov r8, r8)
 8000476:	46bd      	mov	sp, r7
 8000478:	b009      	add	sp, #36	; 0x24
 800047a:	bd90      	pop	{r4, r7, pc}
 800047c:	40021000 	.word	0x40021000

08000480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000484:	b672      	cpsid	i
}
 8000486:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000488:	e7fe      	b.n	8000488 <Error_Handler+0x8>
	...

0800048c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000492:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <HAL_MspInit+0x44>)
 8000494:	699a      	ldr	r2, [r3, #24]
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <HAL_MspInit+0x44>)
 8000498:	2101      	movs	r1, #1
 800049a:	430a      	orrs	r2, r1
 800049c:	619a      	str	r2, [r3, #24]
 800049e:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <HAL_MspInit+0x44>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	2201      	movs	r2, #1
 80004a4:	4013      	ands	r3, r2
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004aa:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <HAL_MspInit+0x44>)
 80004ac:	69da      	ldr	r2, [r3, #28]
 80004ae:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <HAL_MspInit+0x44>)
 80004b0:	2180      	movs	r1, #128	; 0x80
 80004b2:	0549      	lsls	r1, r1, #21
 80004b4:	430a      	orrs	r2, r1
 80004b6:	61da      	str	r2, [r3, #28]
 80004b8:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <HAL_MspInit+0x44>)
 80004ba:	69da      	ldr	r2, [r3, #28]
 80004bc:	2380      	movs	r3, #128	; 0x80
 80004be:	055b      	lsls	r3, r3, #21
 80004c0:	4013      	ands	r3, r2
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b002      	add	sp, #8
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	40021000 	.word	0x40021000

080004d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b08b      	sub	sp, #44	; 0x2c
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004dc:	2414      	movs	r4, #20
 80004de:	193b      	adds	r3, r7, r4
 80004e0:	0018      	movs	r0, r3
 80004e2:	2314      	movs	r3, #20
 80004e4:	001a      	movs	r2, r3
 80004e6:	2100      	movs	r1, #0
 80004e8:	f001 ff76 	bl	80023d8 <memset>
  if(hspi->Instance==SPI1)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a20      	ldr	r2, [pc, #128]	; (8000574 <HAL_SPI_MspInit+0xa0>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d13a      	bne.n	800056c <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004f6:	4b20      	ldr	r3, [pc, #128]	; (8000578 <HAL_SPI_MspInit+0xa4>)
 80004f8:	699a      	ldr	r2, [r3, #24]
 80004fa:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <HAL_SPI_MspInit+0xa4>)
 80004fc:	2180      	movs	r1, #128	; 0x80
 80004fe:	0149      	lsls	r1, r1, #5
 8000500:	430a      	orrs	r2, r1
 8000502:	619a      	str	r2, [r3, #24]
 8000504:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <HAL_SPI_MspInit+0xa4>)
 8000506:	699a      	ldr	r2, [r3, #24]
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	015b      	lsls	r3, r3, #5
 800050c:	4013      	ands	r3, r2
 800050e:	613b      	str	r3, [r7, #16]
 8000510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	4b19      	ldr	r3, [pc, #100]	; (8000578 <HAL_SPI_MspInit+0xa4>)
 8000514:	695a      	ldr	r2, [r3, #20]
 8000516:	4b18      	ldr	r3, [pc, #96]	; (8000578 <HAL_SPI_MspInit+0xa4>)
 8000518:	2180      	movs	r1, #128	; 0x80
 800051a:	0289      	lsls	r1, r1, #10
 800051c:	430a      	orrs	r2, r1
 800051e:	615a      	str	r2, [r3, #20]
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <HAL_SPI_MspInit+0xa4>)
 8000522:	695a      	ldr	r2, [r3, #20]
 8000524:	2380      	movs	r3, #128	; 0x80
 8000526:	029b      	lsls	r3, r3, #10
 8000528:	4013      	ands	r3, r2
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800052e:	0021      	movs	r1, r4
 8000530:	187b      	adds	r3, r7, r1
 8000532:	22a0      	movs	r2, #160	; 0xa0
 8000534:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2202      	movs	r2, #2
 800053a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2203      	movs	r2, #3
 8000546:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2200      	movs	r2, #0
 800054c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054e:	187a      	adds	r2, r7, r1
 8000550:	2390      	movs	r3, #144	; 0x90
 8000552:	05db      	lsls	r3, r3, #23
 8000554:	0011      	movs	r1, r2
 8000556:	0018      	movs	r0, r3
 8000558:	f000 fa10 	bl	800097c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800055c:	2200      	movs	r2, #0
 800055e:	2100      	movs	r1, #0
 8000560:	2019      	movs	r0, #25
 8000562:	f000 f993 	bl	800088c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000566:	2019      	movs	r0, #25
 8000568:	f000 f9a5 	bl	80008b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800056c:	46c0      	nop			; (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	b00b      	add	sp, #44	; 0x2c
 8000572:	bd90      	pop	{r4, r7, pc}
 8000574:	40013000 	.word	0x40013000
 8000578:	40021000 	.word	0x40021000

0800057c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000580:	e7fe      	b.n	8000580 <NMI_Handler+0x4>

08000582 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000586:	e7fe      	b.n	8000586 <HardFault_Handler+0x4>

08000588 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000592:	b580      	push	{r7, lr}
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a0:	f000 f888 	bl	80006b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <SPI1_IRQHandler+0x14>)
 80005b2:	0018      	movs	r0, r3
 80005b4:	f001 fa1c 	bl	80019f0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	2000002c 	.word	0x2000002c

080005c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005c8:	46c0      	nop			; (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005d0:	480d      	ldr	r0, [pc, #52]	; (8000608 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d4:	480d      	ldr	r0, [pc, #52]	; (800060c <LoopForever+0x6>)
  ldr r1, =_edata
 80005d6:	490e      	ldr	r1, [pc, #56]	; (8000610 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005d8:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <LoopForever+0xe>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005dc:	e002      	b.n	80005e4 <LoopCopyDataInit>

080005de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e2:	3304      	adds	r3, #4

080005e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e8:	d3f9      	bcc.n	80005de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ea:	4a0b      	ldr	r2, [pc, #44]	; (8000618 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005ec:	4c0b      	ldr	r4, [pc, #44]	; (800061c <LoopForever+0x16>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f0:	e001      	b.n	80005f6 <LoopFillZerobss>

080005f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f4:	3204      	adds	r2, #4

080005f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f8:	d3fb      	bcc.n	80005f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005fa:	f7ff ffe3 	bl	80005c4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80005fe:	f001 fec7 	bl	8002390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000602:	f7ff fe43 	bl	800028c <main>

08000606 <LoopForever>:

LoopForever:
    b LoopForever
 8000606:	e7fe      	b.n	8000606 <LoopForever>
  ldr   r0, =_estack
 8000608:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800060c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000610:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000614:	08002438 	.word	0x08002438
  ldr r2, =_sbss
 8000618:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800061c:	20000094 	.word	0x20000094

08000620 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000620:	e7fe      	b.n	8000620 <ADC1_IRQHandler>
	...

08000624 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <HAL_Init+0x24>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_Init+0x24>)
 800062e:	2110      	movs	r1, #16
 8000630:	430a      	orrs	r2, r1
 8000632:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000634:	2003      	movs	r0, #3
 8000636:	f000 f809 	bl	800064c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800063a:	f7ff ff27 	bl	800048c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800063e:	2300      	movs	r3, #0
}
 8000640:	0018      	movs	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	40022000 	.word	0x40022000

0800064c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000654:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <HAL_InitTick+0x5c>)
 8000656:	681c      	ldr	r4, [r3, #0]
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <HAL_InitTick+0x60>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	0019      	movs	r1, r3
 800065e:	23fa      	movs	r3, #250	; 0xfa
 8000660:	0098      	lsls	r0, r3, #2
 8000662:	f7ff fd51 	bl	8000108 <__udivsi3>
 8000666:	0003      	movs	r3, r0
 8000668:	0019      	movs	r1, r3
 800066a:	0020      	movs	r0, r4
 800066c:	f7ff fd4c 	bl	8000108 <__udivsi3>
 8000670:	0003      	movs	r3, r0
 8000672:	0018      	movs	r0, r3
 8000674:	f000 f92f 	bl	80008d6 <HAL_SYSTICK_Config>
 8000678:	1e03      	subs	r3, r0, #0
 800067a:	d001      	beq.n	8000680 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800067c:	2301      	movs	r3, #1
 800067e:	e00f      	b.n	80006a0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2b03      	cmp	r3, #3
 8000684:	d80b      	bhi.n	800069e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000686:	6879      	ldr	r1, [r7, #4]
 8000688:	2301      	movs	r3, #1
 800068a:	425b      	negs	r3, r3
 800068c:	2200      	movs	r2, #0
 800068e:	0018      	movs	r0, r3
 8000690:	f000 f8fc 	bl	800088c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <HAL_InitTick+0x64>)
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800069a:	2300      	movs	r3, #0
 800069c:	e000      	b.n	80006a0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
}
 80006a0:	0018      	movs	r0, r3
 80006a2:	46bd      	mov	sp, r7
 80006a4:	b003      	add	sp, #12
 80006a6:	bd90      	pop	{r4, r7, pc}
 80006a8:	20000000 	.word	0x20000000
 80006ac:	20000008 	.word	0x20000008
 80006b0:	20000004 	.word	0x20000004

080006b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <HAL_IncTick+0x1c>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	001a      	movs	r2, r3
 80006be:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <HAL_IncTick+0x20>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	18d2      	adds	r2, r2, r3
 80006c4:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <HAL_IncTick+0x20>)
 80006c6:	601a      	str	r2, [r3, #0]
}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	20000008 	.word	0x20000008
 80006d4:	20000090 	.word	0x20000090

080006d8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  return uwTick;
 80006dc:	4b02      	ldr	r3, [pc, #8]	; (80006e8 <HAL_GetTick+0x10>)
 80006de:	681b      	ldr	r3, [r3, #0]
}
 80006e0:	0018      	movs	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	20000090 	.word	0x20000090

080006ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006f4:	f7ff fff0 	bl	80006d8 <HAL_GetTick>
 80006f8:	0003      	movs	r3, r0
 80006fa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	3301      	adds	r3, #1
 8000704:	d005      	beq.n	8000712 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <HAL_Delay+0x44>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	001a      	movs	r2, r3
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	189b      	adds	r3, r3, r2
 8000710:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	f7ff ffe0 	bl	80006d8 <HAL_GetTick>
 8000718:	0002      	movs	r2, r0
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	429a      	cmp	r2, r3
 8000722:	d8f7      	bhi.n	8000714 <HAL_Delay+0x28>
  {
  }
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	b004      	add	sp, #16
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	20000008 	.word	0x20000008

08000734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	0002      	movs	r2, r0
 800073c:	1dfb      	adds	r3, r7, #7
 800073e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000740:	1dfb      	adds	r3, r7, #7
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b7f      	cmp	r3, #127	; 0x7f
 8000746:	d809      	bhi.n	800075c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000748:	1dfb      	adds	r3, r7, #7
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	001a      	movs	r2, r3
 800074e:	231f      	movs	r3, #31
 8000750:	401a      	ands	r2, r3
 8000752:	4b04      	ldr	r3, [pc, #16]	; (8000764 <__NVIC_EnableIRQ+0x30>)
 8000754:	2101      	movs	r1, #1
 8000756:	4091      	lsls	r1, r2
 8000758:	000a      	movs	r2, r1
 800075a:	601a      	str	r2, [r3, #0]
  }
}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	b002      	add	sp, #8
 8000762:	bd80      	pop	{r7, pc}
 8000764:	e000e100 	.word	0xe000e100

08000768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	0002      	movs	r2, r0
 8000770:	6039      	str	r1, [r7, #0]
 8000772:	1dfb      	adds	r3, r7, #7
 8000774:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000776:	1dfb      	adds	r3, r7, #7
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b7f      	cmp	r3, #127	; 0x7f
 800077c:	d828      	bhi.n	80007d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800077e:	4a2f      	ldr	r2, [pc, #188]	; (800083c <__NVIC_SetPriority+0xd4>)
 8000780:	1dfb      	adds	r3, r7, #7
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b25b      	sxtb	r3, r3
 8000786:	089b      	lsrs	r3, r3, #2
 8000788:	33c0      	adds	r3, #192	; 0xc0
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	589b      	ldr	r3, [r3, r2]
 800078e:	1dfa      	adds	r2, r7, #7
 8000790:	7812      	ldrb	r2, [r2, #0]
 8000792:	0011      	movs	r1, r2
 8000794:	2203      	movs	r2, #3
 8000796:	400a      	ands	r2, r1
 8000798:	00d2      	lsls	r2, r2, #3
 800079a:	21ff      	movs	r1, #255	; 0xff
 800079c:	4091      	lsls	r1, r2
 800079e:	000a      	movs	r2, r1
 80007a0:	43d2      	mvns	r2, r2
 80007a2:	401a      	ands	r2, r3
 80007a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	019b      	lsls	r3, r3, #6
 80007aa:	22ff      	movs	r2, #255	; 0xff
 80007ac:	401a      	ands	r2, r3
 80007ae:	1dfb      	adds	r3, r7, #7
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	0018      	movs	r0, r3
 80007b4:	2303      	movs	r3, #3
 80007b6:	4003      	ands	r3, r0
 80007b8:	00db      	lsls	r3, r3, #3
 80007ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007bc:	481f      	ldr	r0, [pc, #124]	; (800083c <__NVIC_SetPriority+0xd4>)
 80007be:	1dfb      	adds	r3, r7, #7
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	b25b      	sxtb	r3, r3
 80007c4:	089b      	lsrs	r3, r3, #2
 80007c6:	430a      	orrs	r2, r1
 80007c8:	33c0      	adds	r3, #192	; 0xc0
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007ce:	e031      	b.n	8000834 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007d0:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <__NVIC_SetPriority+0xd8>)
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	0019      	movs	r1, r3
 80007d8:	230f      	movs	r3, #15
 80007da:	400b      	ands	r3, r1
 80007dc:	3b08      	subs	r3, #8
 80007de:	089b      	lsrs	r3, r3, #2
 80007e0:	3306      	adds	r3, #6
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	18d3      	adds	r3, r2, r3
 80007e6:	3304      	adds	r3, #4
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	1dfa      	adds	r2, r7, #7
 80007ec:	7812      	ldrb	r2, [r2, #0]
 80007ee:	0011      	movs	r1, r2
 80007f0:	2203      	movs	r2, #3
 80007f2:	400a      	ands	r2, r1
 80007f4:	00d2      	lsls	r2, r2, #3
 80007f6:	21ff      	movs	r1, #255	; 0xff
 80007f8:	4091      	lsls	r1, r2
 80007fa:	000a      	movs	r2, r1
 80007fc:	43d2      	mvns	r2, r2
 80007fe:	401a      	ands	r2, r3
 8000800:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	019b      	lsls	r3, r3, #6
 8000806:	22ff      	movs	r2, #255	; 0xff
 8000808:	401a      	ands	r2, r3
 800080a:	1dfb      	adds	r3, r7, #7
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	0018      	movs	r0, r3
 8000810:	2303      	movs	r3, #3
 8000812:	4003      	ands	r3, r0
 8000814:	00db      	lsls	r3, r3, #3
 8000816:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000818:	4809      	ldr	r0, [pc, #36]	; (8000840 <__NVIC_SetPriority+0xd8>)
 800081a:	1dfb      	adds	r3, r7, #7
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	001c      	movs	r4, r3
 8000820:	230f      	movs	r3, #15
 8000822:	4023      	ands	r3, r4
 8000824:	3b08      	subs	r3, #8
 8000826:	089b      	lsrs	r3, r3, #2
 8000828:	430a      	orrs	r2, r1
 800082a:	3306      	adds	r3, #6
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	18c3      	adds	r3, r0, r3
 8000830:	3304      	adds	r3, #4
 8000832:	601a      	str	r2, [r3, #0]
}
 8000834:	46c0      	nop			; (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	b003      	add	sp, #12
 800083a:	bd90      	pop	{r4, r7, pc}
 800083c:	e000e100 	.word	0xe000e100
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	1e5a      	subs	r2, r3, #1
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	045b      	lsls	r3, r3, #17
 8000854:	429a      	cmp	r2, r3
 8000856:	d301      	bcc.n	800085c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000858:	2301      	movs	r3, #1
 800085a:	e010      	b.n	800087e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <SysTick_Config+0x44>)
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	3a01      	subs	r2, #1
 8000862:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000864:	2301      	movs	r3, #1
 8000866:	425b      	negs	r3, r3
 8000868:	2103      	movs	r1, #3
 800086a:	0018      	movs	r0, r3
 800086c:	f7ff ff7c 	bl	8000768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <SysTick_Config+0x44>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000876:	4b04      	ldr	r3, [pc, #16]	; (8000888 <SysTick_Config+0x44>)
 8000878:	2207      	movs	r2, #7
 800087a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800087c:	2300      	movs	r3, #0
}
 800087e:	0018      	movs	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	b002      	add	sp, #8
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	e000e010 	.word	0xe000e010

0800088c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
 8000896:	210f      	movs	r1, #15
 8000898:	187b      	adds	r3, r7, r1
 800089a:	1c02      	adds	r2, r0, #0
 800089c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	b25b      	sxtb	r3, r3
 80008a6:	0011      	movs	r1, r2
 80008a8:	0018      	movs	r0, r3
 80008aa:	f7ff ff5d 	bl	8000768 <__NVIC_SetPriority>
}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	46bd      	mov	sp, r7
 80008b2:	b004      	add	sp, #16
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	0002      	movs	r2, r0
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008c2:	1dfb      	adds	r3, r7, #7
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	b25b      	sxtb	r3, r3
 80008c8:	0018      	movs	r0, r3
 80008ca:	f7ff ff33 	bl	8000734 <__NVIC_EnableIRQ>
}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b002      	add	sp, #8
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b082      	sub	sp, #8
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	0018      	movs	r0, r3
 80008e2:	f7ff ffaf 	bl	8000844 <SysTick_Config>
 80008e6:	0003      	movs	r3, r0
}
 80008e8:	0018      	movs	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b002      	add	sp, #8
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008f8:	210f      	movs	r1, #15
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2221      	movs	r2, #33	; 0x21
 8000904:	5c9b      	ldrb	r3, [r3, r2]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2b02      	cmp	r3, #2
 800090a:	d006      	beq.n	800091a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2204      	movs	r2, #4
 8000910:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2201      	movs	r2, #1
 8000916:	701a      	strb	r2, [r3, #0]
 8000918:	e028      	b.n	800096c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	210e      	movs	r1, #14
 8000926:	438a      	bics	r2, r1
 8000928:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2101      	movs	r1, #1
 8000936:	438a      	bics	r2, r1
 8000938:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000942:	2101      	movs	r1, #1
 8000944:	4091      	lsls	r1, r2
 8000946:	000a      	movs	r2, r1
 8000948:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2221      	movs	r2, #33	; 0x21
 800094e:	2101      	movs	r1, #1
 8000950:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2220      	movs	r2, #32
 8000956:	2100      	movs	r1, #0
 8000958:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800095e:	2b00      	cmp	r3, #0
 8000960:	d004      	beq.n	800096c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	0010      	movs	r0, r2
 800096a:	4798      	blx	r3
    } 
  }
  return status;
 800096c:	230f      	movs	r3, #15
 800096e:	18fb      	adds	r3, r7, r3
 8000970:	781b      	ldrb	r3, [r3, #0]
}
 8000972:	0018      	movs	r0, r3
 8000974:	46bd      	mov	sp, r7
 8000976:	b004      	add	sp, #16
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800098a:	e14f      	b.n	8000c2c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2101      	movs	r1, #1
 8000992:	697a      	ldr	r2, [r7, #20]
 8000994:	4091      	lsls	r1, r2
 8000996:	000a      	movs	r2, r1
 8000998:	4013      	ands	r3, r2
 800099a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d100      	bne.n	80009a4 <HAL_GPIO_Init+0x28>
 80009a2:	e140      	b.n	8000c26 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	2203      	movs	r2, #3
 80009aa:	4013      	ands	r3, r2
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d005      	beq.n	80009bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	2203      	movs	r2, #3
 80009b6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d130      	bne.n	8000a1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	2203      	movs	r2, #3
 80009c8:	409a      	lsls	r2, r3
 80009ca:	0013      	movs	r3, r2
 80009cc:	43da      	mvns	r2, r3
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	4013      	ands	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	68da      	ldr	r2, [r3, #12]
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	409a      	lsls	r2, r3
 80009de:	0013      	movs	r3, r2
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009f2:	2201      	movs	r2, #1
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	409a      	lsls	r2, r3
 80009f8:	0013      	movs	r3, r2
 80009fa:	43da      	mvns	r2, r3
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	4013      	ands	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	091b      	lsrs	r3, r3, #4
 8000a08:	2201      	movs	r2, #1
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	409a      	lsls	r2, r3
 8000a10:	0013      	movs	r3, r2
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	2203      	movs	r2, #3
 8000a24:	4013      	ands	r3, r2
 8000a26:	2b03      	cmp	r3, #3
 8000a28:	d017      	beq.n	8000a5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	68db      	ldr	r3, [r3, #12]
 8000a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	2203      	movs	r2, #3
 8000a36:	409a      	lsls	r2, r3
 8000a38:	0013      	movs	r3, r2
 8000a3a:	43da      	mvns	r2, r3
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	689a      	ldr	r2, [r3, #8]
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	409a      	lsls	r2, r3
 8000a4c:	0013      	movs	r3, r2
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	2203      	movs	r2, #3
 8000a60:	4013      	ands	r3, r2
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d123      	bne.n	8000aae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	08da      	lsrs	r2, r3, #3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	3208      	adds	r2, #8
 8000a6e:	0092      	lsls	r2, r2, #2
 8000a70:	58d3      	ldr	r3, [r2, r3]
 8000a72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	2207      	movs	r2, #7
 8000a78:	4013      	ands	r3, r2
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	220f      	movs	r2, #15
 8000a7e:	409a      	lsls	r2, r3
 8000a80:	0013      	movs	r3, r2
 8000a82:	43da      	mvns	r2, r3
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	4013      	ands	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	691a      	ldr	r2, [r3, #16]
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	2107      	movs	r1, #7
 8000a92:	400b      	ands	r3, r1
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	409a      	lsls	r2, r3
 8000a98:	0013      	movs	r3, r2
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	08da      	lsrs	r2, r3, #3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3208      	adds	r2, #8
 8000aa8:	0092      	lsls	r2, r2, #2
 8000aaa:	6939      	ldr	r1, [r7, #16]
 8000aac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	2203      	movs	r2, #3
 8000aba:	409a      	lsls	r2, r3
 8000abc:	0013      	movs	r3, r2
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	2203      	movs	r2, #3
 8000acc:	401a      	ands	r2, r3
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	409a      	lsls	r2, r3
 8000ad4:	0013      	movs	r3, r2
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685a      	ldr	r2, [r3, #4]
 8000ae6:	23c0      	movs	r3, #192	; 0xc0
 8000ae8:	029b      	lsls	r3, r3, #10
 8000aea:	4013      	ands	r3, r2
 8000aec:	d100      	bne.n	8000af0 <HAL_GPIO_Init+0x174>
 8000aee:	e09a      	b.n	8000c26 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af0:	4b54      	ldr	r3, [pc, #336]	; (8000c44 <HAL_GPIO_Init+0x2c8>)
 8000af2:	699a      	ldr	r2, [r3, #24]
 8000af4:	4b53      	ldr	r3, [pc, #332]	; (8000c44 <HAL_GPIO_Init+0x2c8>)
 8000af6:	2101      	movs	r1, #1
 8000af8:	430a      	orrs	r2, r1
 8000afa:	619a      	str	r2, [r3, #24]
 8000afc:	4b51      	ldr	r3, [pc, #324]	; (8000c44 <HAL_GPIO_Init+0x2c8>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	2201      	movs	r2, #1
 8000b02:	4013      	ands	r3, r2
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b08:	4a4f      	ldr	r2, [pc, #316]	; (8000c48 <HAL_GPIO_Init+0x2cc>)
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	089b      	lsrs	r3, r3, #2
 8000b0e:	3302      	adds	r3, #2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	589b      	ldr	r3, [r3, r2]
 8000b14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	2203      	movs	r2, #3
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	220f      	movs	r2, #15
 8000b20:	409a      	lsls	r2, r3
 8000b22:	0013      	movs	r3, r2
 8000b24:	43da      	mvns	r2, r3
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	2390      	movs	r3, #144	; 0x90
 8000b30:	05db      	lsls	r3, r3, #23
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d013      	beq.n	8000b5e <HAL_GPIO_Init+0x1e2>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a44      	ldr	r2, [pc, #272]	; (8000c4c <HAL_GPIO_Init+0x2d0>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d00d      	beq.n	8000b5a <HAL_GPIO_Init+0x1de>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a43      	ldr	r2, [pc, #268]	; (8000c50 <HAL_GPIO_Init+0x2d4>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d007      	beq.n	8000b56 <HAL_GPIO_Init+0x1da>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a42      	ldr	r2, [pc, #264]	; (8000c54 <HAL_GPIO_Init+0x2d8>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d101      	bne.n	8000b52 <HAL_GPIO_Init+0x1d6>
 8000b4e:	2303      	movs	r3, #3
 8000b50:	e006      	b.n	8000b60 <HAL_GPIO_Init+0x1e4>
 8000b52:	2305      	movs	r3, #5
 8000b54:	e004      	b.n	8000b60 <HAL_GPIO_Init+0x1e4>
 8000b56:	2302      	movs	r3, #2
 8000b58:	e002      	b.n	8000b60 <HAL_GPIO_Init+0x1e4>
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e000      	b.n	8000b60 <HAL_GPIO_Init+0x1e4>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	2103      	movs	r1, #3
 8000b64:	400a      	ands	r2, r1
 8000b66:	0092      	lsls	r2, r2, #2
 8000b68:	4093      	lsls	r3, r2
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b70:	4935      	ldr	r1, [pc, #212]	; (8000c48 <HAL_GPIO_Init+0x2cc>)
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	089b      	lsrs	r3, r3, #2
 8000b76:	3302      	adds	r3, #2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b7e:	4b36      	ldr	r3, [pc, #216]	; (8000c58 <HAL_GPIO_Init+0x2dc>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	43da      	mvns	r2, r3
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685a      	ldr	r2, [r3, #4]
 8000b92:	2380      	movs	r3, #128	; 0x80
 8000b94:	025b      	lsls	r3, r3, #9
 8000b96:	4013      	ands	r3, r2
 8000b98:	d003      	beq.n	8000ba2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ba2:	4b2d      	ldr	r3, [pc, #180]	; (8000c58 <HAL_GPIO_Init+0x2dc>)
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ba8:	4b2b      	ldr	r3, [pc, #172]	; (8000c58 <HAL_GPIO_Init+0x2dc>)
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	43da      	mvns	r2, r3
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685a      	ldr	r2, [r3, #4]
 8000bbc:	2380      	movs	r3, #128	; 0x80
 8000bbe:	029b      	lsls	r3, r3, #10
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	d003      	beq.n	8000bcc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bcc:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <HAL_GPIO_Init+0x2dc>)
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bd2:	4b21      	ldr	r3, [pc, #132]	; (8000c58 <HAL_GPIO_Init+0x2dc>)
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	43da      	mvns	r2, r3
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	4013      	ands	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685a      	ldr	r2, [r3, #4]
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	035b      	lsls	r3, r3, #13
 8000bea:	4013      	ands	r3, r2
 8000bec:	d003      	beq.n	8000bf6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_GPIO_Init+0x2dc>)
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000bfc:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <HAL_GPIO_Init+0x2dc>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	43da      	mvns	r2, r3
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685a      	ldr	r2, [r3, #4]
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	039b      	lsls	r3, r3, #14
 8000c14:	4013      	ands	r3, r2
 8000c16:	d003      	beq.n	8000c20 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <HAL_GPIO_Init+0x2dc>)
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	40da      	lsrs	r2, r3
 8000c34:	1e13      	subs	r3, r2, #0
 8000c36:	d000      	beq.n	8000c3a <HAL_GPIO_Init+0x2be>
 8000c38:	e6a8      	b.n	800098c <HAL_GPIO_Init+0x10>
  } 
}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b006      	add	sp, #24
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40010000 	.word	0x40010000
 8000c4c:	48000400 	.word	0x48000400
 8000c50:	48000800 	.word	0x48000800
 8000c54:	48000c00 	.word	0x48000c00
 8000c58:	40010400 	.word	0x40010400

08000c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	0008      	movs	r0, r1
 8000c66:	0011      	movs	r1, r2
 8000c68:	1cbb      	adds	r3, r7, #2
 8000c6a:	1c02      	adds	r2, r0, #0
 8000c6c:	801a      	strh	r2, [r3, #0]
 8000c6e:	1c7b      	adds	r3, r7, #1
 8000c70:	1c0a      	adds	r2, r1, #0
 8000c72:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c74:	1c7b      	adds	r3, r7, #1
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d004      	beq.n	8000c86 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c7c:	1cbb      	adds	r3, r7, #2
 8000c7e:	881a      	ldrh	r2, [r3, #0]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c84:	e003      	b.n	8000c8e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c86:	1cbb      	adds	r3, r7, #2
 8000c88:	881a      	ldrh	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b002      	add	sp, #8
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b084      	sub	sp, #16
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
 8000c9e:	000a      	movs	r2, r1
 8000ca0:	1cbb      	adds	r3, r7, #2
 8000ca2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000caa:	1cbb      	adds	r3, r7, #2
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	041a      	lsls	r2, r3, #16
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	1cb9      	adds	r1, r7, #2
 8000cba:	8809      	ldrh	r1, [r1, #0]
 8000cbc:	400b      	ands	r3, r1
 8000cbe:	431a      	orrs	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	619a      	str	r2, [r3, #24]
}
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b004      	add	sp, #16
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b088      	sub	sp, #32
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d101      	bne.n	8000cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e301      	b.n	80012e2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	d100      	bne.n	8000cea <HAL_RCC_OscConfig+0x1e>
 8000ce8:	e08d      	b.n	8000e06 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cea:	4bc3      	ldr	r3, [pc, #780]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	220c      	movs	r2, #12
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	d00e      	beq.n	8000d14 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cf6:	4bc0      	ldr	r3, [pc, #768]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	2b08      	cmp	r3, #8
 8000d00:	d116      	bne.n	8000d30 <HAL_RCC_OscConfig+0x64>
 8000d02:	4bbd      	ldr	r3, [pc, #756]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	2380      	movs	r3, #128	; 0x80
 8000d08:	025b      	lsls	r3, r3, #9
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	2380      	movs	r3, #128	; 0x80
 8000d0e:	025b      	lsls	r3, r3, #9
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d10d      	bne.n	8000d30 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d14:	4bb8      	ldr	r3, [pc, #736]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	029b      	lsls	r3, r3, #10
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	d100      	bne.n	8000d22 <HAL_RCC_OscConfig+0x56>
 8000d20:	e070      	b.n	8000e04 <HAL_RCC_OscConfig+0x138>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d000      	beq.n	8000d2c <HAL_RCC_OscConfig+0x60>
 8000d2a:	e06b      	b.n	8000e04 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e2d8      	b.n	80012e2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d107      	bne.n	8000d48 <HAL_RCC_OscConfig+0x7c>
 8000d38:	4baf      	ldr	r3, [pc, #700]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4bae      	ldr	r3, [pc, #696]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000d3e:	2180      	movs	r1, #128	; 0x80
 8000d40:	0249      	lsls	r1, r1, #9
 8000d42:	430a      	orrs	r2, r1
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	e02f      	b.n	8000da8 <HAL_RCC_OscConfig+0xdc>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d10c      	bne.n	8000d6a <HAL_RCC_OscConfig+0x9e>
 8000d50:	4ba9      	ldr	r3, [pc, #676]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4ba8      	ldr	r3, [pc, #672]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000d56:	49a9      	ldr	r1, [pc, #676]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000d58:	400a      	ands	r2, r1
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	4ba6      	ldr	r3, [pc, #664]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4ba5      	ldr	r3, [pc, #660]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000d62:	49a7      	ldr	r1, [pc, #668]	; (8001000 <HAL_RCC_OscConfig+0x334>)
 8000d64:	400a      	ands	r2, r1
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	e01e      	b.n	8000da8 <HAL_RCC_OscConfig+0xdc>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2b05      	cmp	r3, #5
 8000d70:	d10e      	bne.n	8000d90 <HAL_RCC_OscConfig+0xc4>
 8000d72:	4ba1      	ldr	r3, [pc, #644]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	4ba0      	ldr	r3, [pc, #640]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000d78:	2180      	movs	r1, #128	; 0x80
 8000d7a:	02c9      	lsls	r1, r1, #11
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	4b9d      	ldr	r3, [pc, #628]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b9c      	ldr	r3, [pc, #624]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000d86:	2180      	movs	r1, #128	; 0x80
 8000d88:	0249      	lsls	r1, r1, #9
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	e00b      	b.n	8000da8 <HAL_RCC_OscConfig+0xdc>
 8000d90:	4b99      	ldr	r3, [pc, #612]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b98      	ldr	r3, [pc, #608]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000d96:	4999      	ldr	r1, [pc, #612]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000d98:	400a      	ands	r2, r1
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	4b96      	ldr	r3, [pc, #600]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b95      	ldr	r3, [pc, #596]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000da2:	4997      	ldr	r1, [pc, #604]	; (8001000 <HAL_RCC_OscConfig+0x334>)
 8000da4:	400a      	ands	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d014      	beq.n	8000dda <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db0:	f7ff fc92 	bl	80006d8 <HAL_GetTick>
 8000db4:	0003      	movs	r3, r0
 8000db6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db8:	e008      	b.n	8000dcc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dba:	f7ff fc8d 	bl	80006d8 <HAL_GetTick>
 8000dbe:	0002      	movs	r2, r0
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	2b64      	cmp	r3, #100	; 0x64
 8000dc6:	d901      	bls.n	8000dcc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e28a      	b.n	80012e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dcc:	4b8a      	ldr	r3, [pc, #552]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	029b      	lsls	r3, r3, #10
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	d0f0      	beq.n	8000dba <HAL_RCC_OscConfig+0xee>
 8000dd8:	e015      	b.n	8000e06 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dda:	f7ff fc7d 	bl	80006d8 <HAL_GetTick>
 8000dde:	0003      	movs	r3, r0
 8000de0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000de2:	e008      	b.n	8000df6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000de4:	f7ff fc78 	bl	80006d8 <HAL_GetTick>
 8000de8:	0002      	movs	r2, r0
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b64      	cmp	r3, #100	; 0x64
 8000df0:	d901      	bls.n	8000df6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e275      	b.n	80012e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df6:	4b80      	ldr	r3, [pc, #512]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	2380      	movs	r3, #128	; 0x80
 8000dfc:	029b      	lsls	r3, r3, #10
 8000dfe:	4013      	ands	r3, r2
 8000e00:	d1f0      	bne.n	8000de4 <HAL_RCC_OscConfig+0x118>
 8000e02:	e000      	b.n	8000e06 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e04:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	d100      	bne.n	8000e12 <HAL_RCC_OscConfig+0x146>
 8000e10:	e069      	b.n	8000ee6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e12:	4b79      	ldr	r3, [pc, #484]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	220c      	movs	r2, #12
 8000e18:	4013      	ands	r3, r2
 8000e1a:	d00b      	beq.n	8000e34 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e1c:	4b76      	ldr	r3, [pc, #472]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	220c      	movs	r2, #12
 8000e22:	4013      	ands	r3, r2
 8000e24:	2b08      	cmp	r3, #8
 8000e26:	d11c      	bne.n	8000e62 <HAL_RCC_OscConfig+0x196>
 8000e28:	4b73      	ldr	r3, [pc, #460]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	025b      	lsls	r3, r3, #9
 8000e30:	4013      	ands	r3, r2
 8000e32:	d116      	bne.n	8000e62 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e34:	4b70      	ldr	r3, [pc, #448]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2202      	movs	r2, #2
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	d005      	beq.n	8000e4a <HAL_RCC_OscConfig+0x17e>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d001      	beq.n	8000e4a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e24b      	b.n	80012e2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e4a:	4b6b      	ldr	r3, [pc, #428]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	22f8      	movs	r2, #248	; 0xf8
 8000e50:	4393      	bics	r3, r2
 8000e52:	0019      	movs	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	691b      	ldr	r3, [r3, #16]
 8000e58:	00da      	lsls	r2, r3, #3
 8000e5a:	4b67      	ldr	r3, [pc, #412]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e60:	e041      	b.n	8000ee6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d024      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e6a:	4b63      	ldr	r3, [pc, #396]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	4b62      	ldr	r3, [pc, #392]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000e70:	2101      	movs	r1, #1
 8000e72:	430a      	orrs	r2, r1
 8000e74:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e76:	f7ff fc2f 	bl	80006d8 <HAL_GetTick>
 8000e7a:	0003      	movs	r3, r0
 8000e7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e7e:	e008      	b.n	8000e92 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e80:	f7ff fc2a 	bl	80006d8 <HAL_GetTick>
 8000e84:	0002      	movs	r2, r0
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d901      	bls.n	8000e92 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e227      	b.n	80012e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e92:	4b59      	ldr	r3, [pc, #356]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2202      	movs	r2, #2
 8000e98:	4013      	ands	r3, r2
 8000e9a:	d0f1      	beq.n	8000e80 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e9c:	4b56      	ldr	r3, [pc, #344]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	22f8      	movs	r2, #248	; 0xf8
 8000ea2:	4393      	bics	r3, r2
 8000ea4:	0019      	movs	r1, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	00da      	lsls	r2, r3, #3
 8000eac:	4b52      	ldr	r3, [pc, #328]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	e018      	b.n	8000ee6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eb4:	4b50      	ldr	r3, [pc, #320]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b4f      	ldr	r3, [pc, #316]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000eba:	2101      	movs	r1, #1
 8000ebc:	438a      	bics	r2, r1
 8000ebe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fc0a 	bl	80006d8 <HAL_GetTick>
 8000ec4:	0003      	movs	r3, r0
 8000ec6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ec8:	e008      	b.n	8000edc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eca:	f7ff fc05 	bl	80006d8 <HAL_GetTick>
 8000ece:	0002      	movs	r2, r0
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d901      	bls.n	8000edc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e202      	b.n	80012e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000edc:	4b46      	ldr	r3, [pc, #280]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d1f1      	bne.n	8000eca <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2208      	movs	r2, #8
 8000eec:	4013      	ands	r3, r2
 8000eee:	d036      	beq.n	8000f5e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69db      	ldr	r3, [r3, #28]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d019      	beq.n	8000f2c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ef8:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000efc:	4b3e      	ldr	r3, [pc, #248]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000efe:	2101      	movs	r1, #1
 8000f00:	430a      	orrs	r2, r1
 8000f02:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f04:	f7ff fbe8 	bl	80006d8 <HAL_GetTick>
 8000f08:	0003      	movs	r3, r0
 8000f0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f0c:	e008      	b.n	8000f20 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f0e:	f7ff fbe3 	bl	80006d8 <HAL_GetTick>
 8000f12:	0002      	movs	r2, r0
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e1e0      	b.n	80012e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f20:	4b35      	ldr	r3, [pc, #212]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f24:	2202      	movs	r2, #2
 8000f26:	4013      	ands	r3, r2
 8000f28:	d0f1      	beq.n	8000f0e <HAL_RCC_OscConfig+0x242>
 8000f2a:	e018      	b.n	8000f5e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f2c:	4b32      	ldr	r3, [pc, #200]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000f2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f30:	4b31      	ldr	r3, [pc, #196]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000f32:	2101      	movs	r1, #1
 8000f34:	438a      	bics	r2, r1
 8000f36:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f38:	f7ff fbce 	bl	80006d8 <HAL_GetTick>
 8000f3c:	0003      	movs	r3, r0
 8000f3e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f40:	e008      	b.n	8000f54 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f42:	f7ff fbc9 	bl	80006d8 <HAL_GetTick>
 8000f46:	0002      	movs	r2, r0
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e1c6      	b.n	80012e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f54:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f58:	2202      	movs	r2, #2
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	d1f1      	bne.n	8000f42 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2204      	movs	r2, #4
 8000f64:	4013      	ands	r3, r2
 8000f66:	d100      	bne.n	8000f6a <HAL_RCC_OscConfig+0x29e>
 8000f68:	e0b4      	b.n	80010d4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f6a:	201f      	movs	r0, #31
 8000f6c:	183b      	adds	r3, r7, r0
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f72:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000f74:	69da      	ldr	r2, [r3, #28]
 8000f76:	2380      	movs	r3, #128	; 0x80
 8000f78:	055b      	lsls	r3, r3, #21
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	d110      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000f80:	69da      	ldr	r2, [r3, #28]
 8000f82:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000f84:	2180      	movs	r1, #128	; 0x80
 8000f86:	0549      	lsls	r1, r1, #21
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	61da      	str	r2, [r3, #28]
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000f8e:	69da      	ldr	r2, [r3, #28]
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	055b      	lsls	r3, r3, #21
 8000f94:	4013      	ands	r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f9a:	183b      	adds	r3, r7, r0
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa0:	4b18      	ldr	r3, [pc, #96]	; (8001004 <HAL_RCC_OscConfig+0x338>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	2380      	movs	r3, #128	; 0x80
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d11a      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <HAL_RCC_OscConfig+0x338>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <HAL_RCC_OscConfig+0x338>)
 8000fb2:	2180      	movs	r1, #128	; 0x80
 8000fb4:	0049      	lsls	r1, r1, #1
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fba:	f7ff fb8d 	bl	80006d8 <HAL_GetTick>
 8000fbe:	0003      	movs	r3, r0
 8000fc0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fc4:	f7ff fb88 	bl	80006d8 <HAL_GetTick>
 8000fc8:	0002      	movs	r2, r0
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b64      	cmp	r3, #100	; 0x64
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e185      	b.n	80012e2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <HAL_RCC_OscConfig+0x338>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	2380      	movs	r3, #128	; 0x80
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d0f0      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d10e      	bne.n	8001008 <HAL_RCC_OscConfig+0x33c>
 8000fea:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000fec:	6a1a      	ldr	r2, [r3, #32]
 8000fee:	4b02      	ldr	r3, [pc, #8]	; (8000ff8 <HAL_RCC_OscConfig+0x32c>)
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	621a      	str	r2, [r3, #32]
 8000ff6:	e035      	b.n	8001064 <HAL_RCC_OscConfig+0x398>
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	fffeffff 	.word	0xfffeffff
 8001000:	fffbffff 	.word	0xfffbffff
 8001004:	40007000 	.word	0x40007000
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d10c      	bne.n	800102a <HAL_RCC_OscConfig+0x35e>
 8001010:	4bb6      	ldr	r3, [pc, #728]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 8001012:	6a1a      	ldr	r2, [r3, #32]
 8001014:	4bb5      	ldr	r3, [pc, #724]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 8001016:	2101      	movs	r1, #1
 8001018:	438a      	bics	r2, r1
 800101a:	621a      	str	r2, [r3, #32]
 800101c:	4bb3      	ldr	r3, [pc, #716]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 800101e:	6a1a      	ldr	r2, [r3, #32]
 8001020:	4bb2      	ldr	r3, [pc, #712]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 8001022:	2104      	movs	r1, #4
 8001024:	438a      	bics	r2, r1
 8001026:	621a      	str	r2, [r3, #32]
 8001028:	e01c      	b.n	8001064 <HAL_RCC_OscConfig+0x398>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	2b05      	cmp	r3, #5
 8001030:	d10c      	bne.n	800104c <HAL_RCC_OscConfig+0x380>
 8001032:	4bae      	ldr	r3, [pc, #696]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 8001034:	6a1a      	ldr	r2, [r3, #32]
 8001036:	4bad      	ldr	r3, [pc, #692]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 8001038:	2104      	movs	r1, #4
 800103a:	430a      	orrs	r2, r1
 800103c:	621a      	str	r2, [r3, #32]
 800103e:	4bab      	ldr	r3, [pc, #684]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 8001040:	6a1a      	ldr	r2, [r3, #32]
 8001042:	4baa      	ldr	r3, [pc, #680]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 8001044:	2101      	movs	r1, #1
 8001046:	430a      	orrs	r2, r1
 8001048:	621a      	str	r2, [r3, #32]
 800104a:	e00b      	b.n	8001064 <HAL_RCC_OscConfig+0x398>
 800104c:	4ba7      	ldr	r3, [pc, #668]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 800104e:	6a1a      	ldr	r2, [r3, #32]
 8001050:	4ba6      	ldr	r3, [pc, #664]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 8001052:	2101      	movs	r1, #1
 8001054:	438a      	bics	r2, r1
 8001056:	621a      	str	r2, [r3, #32]
 8001058:	4ba4      	ldr	r3, [pc, #656]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 800105a:	6a1a      	ldr	r2, [r3, #32]
 800105c:	4ba3      	ldr	r3, [pc, #652]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 800105e:	2104      	movs	r1, #4
 8001060:	438a      	bics	r2, r1
 8001062:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d014      	beq.n	8001096 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800106c:	f7ff fb34 	bl	80006d8 <HAL_GetTick>
 8001070:	0003      	movs	r3, r0
 8001072:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001074:	e009      	b.n	800108a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001076:	f7ff fb2f 	bl	80006d8 <HAL_GetTick>
 800107a:	0002      	movs	r2, r0
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	4a9b      	ldr	r2, [pc, #620]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e12b      	b.n	80012e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800108a:	4b98      	ldr	r3, [pc, #608]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 800108c:	6a1b      	ldr	r3, [r3, #32]
 800108e:	2202      	movs	r2, #2
 8001090:	4013      	ands	r3, r2
 8001092:	d0f0      	beq.n	8001076 <HAL_RCC_OscConfig+0x3aa>
 8001094:	e013      	b.n	80010be <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001096:	f7ff fb1f 	bl	80006d8 <HAL_GetTick>
 800109a:	0003      	movs	r3, r0
 800109c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800109e:	e009      	b.n	80010b4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010a0:	f7ff fb1a 	bl	80006d8 <HAL_GetTick>
 80010a4:	0002      	movs	r2, r0
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	4a91      	ldr	r2, [pc, #580]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d901      	bls.n	80010b4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e116      	b.n	80012e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010b4:	4b8d      	ldr	r3, [pc, #564]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 80010b6:	6a1b      	ldr	r3, [r3, #32]
 80010b8:	2202      	movs	r2, #2
 80010ba:	4013      	ands	r3, r2
 80010bc:	d1f0      	bne.n	80010a0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80010be:	231f      	movs	r3, #31
 80010c0:	18fb      	adds	r3, r7, r3
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d105      	bne.n	80010d4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010c8:	4b88      	ldr	r3, [pc, #544]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 80010ca:	69da      	ldr	r2, [r3, #28]
 80010cc:	4b87      	ldr	r3, [pc, #540]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 80010ce:	4989      	ldr	r1, [pc, #548]	; (80012f4 <HAL_RCC_OscConfig+0x628>)
 80010d0:	400a      	ands	r2, r1
 80010d2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2210      	movs	r2, #16
 80010da:	4013      	ands	r3, r2
 80010dc:	d063      	beq.n	80011a6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d12a      	bne.n	800113c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010e6:	4b81      	ldr	r3, [pc, #516]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 80010e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ea:	4b80      	ldr	r3, [pc, #512]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 80010ec:	2104      	movs	r1, #4
 80010ee:	430a      	orrs	r2, r1
 80010f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80010f2:	4b7e      	ldr	r3, [pc, #504]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 80010f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010f6:	4b7d      	ldr	r3, [pc, #500]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 80010f8:	2101      	movs	r1, #1
 80010fa:	430a      	orrs	r2, r1
 80010fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010fe:	f7ff faeb 	bl	80006d8 <HAL_GetTick>
 8001102:	0003      	movs	r3, r0
 8001104:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001106:	e008      	b.n	800111a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001108:	f7ff fae6 	bl	80006d8 <HAL_GetTick>
 800110c:	0002      	movs	r2, r0
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e0e3      	b.n	80012e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800111a:	4b74      	ldr	r3, [pc, #464]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 800111c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800111e:	2202      	movs	r2, #2
 8001120:	4013      	ands	r3, r2
 8001122:	d0f1      	beq.n	8001108 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001124:	4b71      	ldr	r3, [pc, #452]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 8001126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001128:	22f8      	movs	r2, #248	; 0xf8
 800112a:	4393      	bics	r3, r2
 800112c:	0019      	movs	r1, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	00da      	lsls	r2, r3, #3
 8001134:	4b6d      	ldr	r3, [pc, #436]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 8001136:	430a      	orrs	r2, r1
 8001138:	635a      	str	r2, [r3, #52]	; 0x34
 800113a:	e034      	b.n	80011a6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	3305      	adds	r3, #5
 8001142:	d111      	bne.n	8001168 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001144:	4b69      	ldr	r3, [pc, #420]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 8001146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001148:	4b68      	ldr	r3, [pc, #416]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 800114a:	2104      	movs	r1, #4
 800114c:	438a      	bics	r2, r1
 800114e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001150:	4b66      	ldr	r3, [pc, #408]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 8001152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001154:	22f8      	movs	r2, #248	; 0xf8
 8001156:	4393      	bics	r3, r2
 8001158:	0019      	movs	r1, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	00da      	lsls	r2, r3, #3
 8001160:	4b62      	ldr	r3, [pc, #392]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 8001162:	430a      	orrs	r2, r1
 8001164:	635a      	str	r2, [r3, #52]	; 0x34
 8001166:	e01e      	b.n	80011a6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001168:	4b60      	ldr	r3, [pc, #384]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 800116a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800116c:	4b5f      	ldr	r3, [pc, #380]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 800116e:	2104      	movs	r1, #4
 8001170:	430a      	orrs	r2, r1
 8001172:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001174:	4b5d      	ldr	r3, [pc, #372]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 8001176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001178:	4b5c      	ldr	r3, [pc, #368]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 800117a:	2101      	movs	r1, #1
 800117c:	438a      	bics	r2, r1
 800117e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001180:	f7ff faaa 	bl	80006d8 <HAL_GetTick>
 8001184:	0003      	movs	r3, r0
 8001186:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001188:	e008      	b.n	800119c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800118a:	f7ff faa5 	bl	80006d8 <HAL_GetTick>
 800118e:	0002      	movs	r2, r0
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e0a2      	b.n	80012e2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800119c:	4b53      	ldr	r3, [pc, #332]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 800119e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011a0:	2202      	movs	r2, #2
 80011a2:	4013      	ands	r3, r2
 80011a4:	d1f1      	bne.n	800118a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a1b      	ldr	r3, [r3, #32]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d100      	bne.n	80011b0 <HAL_RCC_OscConfig+0x4e4>
 80011ae:	e097      	b.n	80012e0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011b0:	4b4e      	ldr	r3, [pc, #312]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	220c      	movs	r2, #12
 80011b6:	4013      	ands	r3, r2
 80011b8:	2b08      	cmp	r3, #8
 80011ba:	d100      	bne.n	80011be <HAL_RCC_OscConfig+0x4f2>
 80011bc:	e06b      	b.n	8001296 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d14c      	bne.n	8001260 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011c6:	4b49      	ldr	r3, [pc, #292]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4b48      	ldr	r3, [pc, #288]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 80011cc:	494a      	ldr	r1, [pc, #296]	; (80012f8 <HAL_RCC_OscConfig+0x62c>)
 80011ce:	400a      	ands	r2, r1
 80011d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d2:	f7ff fa81 	bl	80006d8 <HAL_GetTick>
 80011d6:	0003      	movs	r3, r0
 80011d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011dc:	f7ff fa7c 	bl	80006d8 <HAL_GetTick>
 80011e0:	0002      	movs	r2, r0
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e079      	b.n	80012e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ee:	4b3f      	ldr	r3, [pc, #252]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	2380      	movs	r3, #128	; 0x80
 80011f4:	049b      	lsls	r3, r3, #18
 80011f6:	4013      	ands	r3, r2
 80011f8:	d1f0      	bne.n	80011dc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011fa:	4b3c      	ldr	r3, [pc, #240]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 80011fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fe:	220f      	movs	r2, #15
 8001200:	4393      	bics	r3, r2
 8001202:	0019      	movs	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001208:	4b38      	ldr	r3, [pc, #224]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 800120a:	430a      	orrs	r2, r1
 800120c:	62da      	str	r2, [r3, #44]	; 0x2c
 800120e:	4b37      	ldr	r3, [pc, #220]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	4a3a      	ldr	r2, [pc, #232]	; (80012fc <HAL_RCC_OscConfig+0x630>)
 8001214:	4013      	ands	r3, r2
 8001216:	0019      	movs	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001220:	431a      	orrs	r2, r3
 8001222:	4b32      	ldr	r3, [pc, #200]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 8001224:	430a      	orrs	r2, r1
 8001226:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001228:	4b30      	ldr	r3, [pc, #192]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 800122e:	2180      	movs	r1, #128	; 0x80
 8001230:	0449      	lsls	r1, r1, #17
 8001232:	430a      	orrs	r2, r1
 8001234:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001236:	f7ff fa4f 	bl	80006d8 <HAL_GetTick>
 800123a:	0003      	movs	r3, r0
 800123c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001240:	f7ff fa4a 	bl	80006d8 <HAL_GetTick>
 8001244:	0002      	movs	r2, r0
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e047      	b.n	80012e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001252:	4b26      	ldr	r3, [pc, #152]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	2380      	movs	r3, #128	; 0x80
 8001258:	049b      	lsls	r3, r3, #18
 800125a:	4013      	ands	r3, r2
 800125c:	d0f0      	beq.n	8001240 <HAL_RCC_OscConfig+0x574>
 800125e:	e03f      	b.n	80012e0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001260:	4b22      	ldr	r3, [pc, #136]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b21      	ldr	r3, [pc, #132]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 8001266:	4924      	ldr	r1, [pc, #144]	; (80012f8 <HAL_RCC_OscConfig+0x62c>)
 8001268:	400a      	ands	r2, r1
 800126a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff fa34 	bl	80006d8 <HAL_GetTick>
 8001270:	0003      	movs	r3, r0
 8001272:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001274:	e008      	b.n	8001288 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001276:	f7ff fa2f 	bl	80006d8 <HAL_GetTick>
 800127a:	0002      	movs	r2, r0
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e02c      	b.n	80012e2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001288:	4b18      	ldr	r3, [pc, #96]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	049b      	lsls	r3, r3, #18
 8001290:	4013      	ands	r3, r2
 8001292:	d1f0      	bne.n	8001276 <HAL_RCC_OscConfig+0x5aa>
 8001294:	e024      	b.n	80012e0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a1b      	ldr	r3, [r3, #32]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d101      	bne.n	80012a2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e01f      	b.n	80012e2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80012a2:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80012a8:	4b10      	ldr	r3, [pc, #64]	; (80012ec <HAL_RCC_OscConfig+0x620>)
 80012aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ac:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	025b      	lsls	r3, r3, #9
 80012b4:	401a      	ands	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d10e      	bne.n	80012dc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	220f      	movs	r2, #15
 80012c2:	401a      	ands	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d107      	bne.n	80012dc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	23f0      	movs	r3, #240	; 0xf0
 80012d0:	039b      	lsls	r3, r3, #14
 80012d2:	401a      	ands	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012d8:	429a      	cmp	r2, r3
 80012da:	d001      	beq.n	80012e0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e000      	b.n	80012e2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	0018      	movs	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	b008      	add	sp, #32
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	40021000 	.word	0x40021000
 80012f0:	00001388 	.word	0x00001388
 80012f4:	efffffff 	.word	0xefffffff
 80012f8:	feffffff 	.word	0xfeffffff
 80012fc:	ffc2ffff 	.word	0xffc2ffff

08001300 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d101      	bne.n	8001314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e0b3      	b.n	800147c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001314:	4b5b      	ldr	r3, [pc, #364]	; (8001484 <HAL_RCC_ClockConfig+0x184>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2201      	movs	r2, #1
 800131a:	4013      	ands	r3, r2
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	429a      	cmp	r2, r3
 8001320:	d911      	bls.n	8001346 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001322:	4b58      	ldr	r3, [pc, #352]	; (8001484 <HAL_RCC_ClockConfig+0x184>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2201      	movs	r2, #1
 8001328:	4393      	bics	r3, r2
 800132a:	0019      	movs	r1, r3
 800132c:	4b55      	ldr	r3, [pc, #340]	; (8001484 <HAL_RCC_ClockConfig+0x184>)
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	430a      	orrs	r2, r1
 8001332:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001334:	4b53      	ldr	r3, [pc, #332]	; (8001484 <HAL_RCC_ClockConfig+0x184>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2201      	movs	r2, #1
 800133a:	4013      	ands	r3, r2
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d001      	beq.n	8001346 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e09a      	b.n	800147c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2202      	movs	r2, #2
 800134c:	4013      	ands	r3, r2
 800134e:	d015      	beq.n	800137c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2204      	movs	r2, #4
 8001356:	4013      	ands	r3, r2
 8001358:	d006      	beq.n	8001368 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800135a:	4b4b      	ldr	r3, [pc, #300]	; (8001488 <HAL_RCC_ClockConfig+0x188>)
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	4b4a      	ldr	r3, [pc, #296]	; (8001488 <HAL_RCC_ClockConfig+0x188>)
 8001360:	21e0      	movs	r1, #224	; 0xe0
 8001362:	00c9      	lsls	r1, r1, #3
 8001364:	430a      	orrs	r2, r1
 8001366:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001368:	4b47      	ldr	r3, [pc, #284]	; (8001488 <HAL_RCC_ClockConfig+0x188>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	22f0      	movs	r2, #240	; 0xf0
 800136e:	4393      	bics	r3, r2
 8001370:	0019      	movs	r1, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	4b44      	ldr	r3, [pc, #272]	; (8001488 <HAL_RCC_ClockConfig+0x188>)
 8001378:	430a      	orrs	r2, r1
 800137a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2201      	movs	r2, #1
 8001382:	4013      	ands	r3, r2
 8001384:	d040      	beq.n	8001408 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d107      	bne.n	800139e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138e:	4b3e      	ldr	r3, [pc, #248]	; (8001488 <HAL_RCC_ClockConfig+0x188>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	2380      	movs	r3, #128	; 0x80
 8001394:	029b      	lsls	r3, r3, #10
 8001396:	4013      	ands	r3, r2
 8001398:	d114      	bne.n	80013c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e06e      	b.n	800147c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d107      	bne.n	80013b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013a6:	4b38      	ldr	r3, [pc, #224]	; (8001488 <HAL_RCC_ClockConfig+0x188>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	049b      	lsls	r3, r3, #18
 80013ae:	4013      	ands	r3, r2
 80013b0:	d108      	bne.n	80013c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e062      	b.n	800147c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b6:	4b34      	ldr	r3, [pc, #208]	; (8001488 <HAL_RCC_ClockConfig+0x188>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2202      	movs	r2, #2
 80013bc:	4013      	ands	r3, r2
 80013be:	d101      	bne.n	80013c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e05b      	b.n	800147c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013c4:	4b30      	ldr	r3, [pc, #192]	; (8001488 <HAL_RCC_ClockConfig+0x188>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2203      	movs	r2, #3
 80013ca:	4393      	bics	r3, r2
 80013cc:	0019      	movs	r1, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	4b2d      	ldr	r3, [pc, #180]	; (8001488 <HAL_RCC_ClockConfig+0x188>)
 80013d4:	430a      	orrs	r2, r1
 80013d6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013d8:	f7ff f97e 	bl	80006d8 <HAL_GetTick>
 80013dc:	0003      	movs	r3, r0
 80013de:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013e0:	e009      	b.n	80013f6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013e2:	f7ff f979 	bl	80006d8 <HAL_GetTick>
 80013e6:	0002      	movs	r2, r0
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	4a27      	ldr	r2, [pc, #156]	; (800148c <HAL_RCC_ClockConfig+0x18c>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e042      	b.n	800147c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013f6:	4b24      	ldr	r3, [pc, #144]	; (8001488 <HAL_RCC_ClockConfig+0x188>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	220c      	movs	r2, #12
 80013fc:	401a      	ands	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	429a      	cmp	r2, r3
 8001406:	d1ec      	bne.n	80013e2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001408:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <HAL_RCC_ClockConfig+0x184>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2201      	movs	r2, #1
 800140e:	4013      	ands	r3, r2
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	429a      	cmp	r2, r3
 8001414:	d211      	bcs.n	800143a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001416:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <HAL_RCC_ClockConfig+0x184>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2201      	movs	r2, #1
 800141c:	4393      	bics	r3, r2
 800141e:	0019      	movs	r1, r3
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <HAL_RCC_ClockConfig+0x184>)
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001428:	4b16      	ldr	r3, [pc, #88]	; (8001484 <HAL_RCC_ClockConfig+0x184>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2201      	movs	r2, #1
 800142e:	4013      	ands	r3, r2
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d001      	beq.n	800143a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e020      	b.n	800147c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2204      	movs	r2, #4
 8001440:	4013      	ands	r3, r2
 8001442:	d009      	beq.n	8001458 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001444:	4b10      	ldr	r3, [pc, #64]	; (8001488 <HAL_RCC_ClockConfig+0x188>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	4a11      	ldr	r2, [pc, #68]	; (8001490 <HAL_RCC_ClockConfig+0x190>)
 800144a:	4013      	ands	r3, r2
 800144c:	0019      	movs	r1, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	68da      	ldr	r2, [r3, #12]
 8001452:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <HAL_RCC_ClockConfig+0x188>)
 8001454:	430a      	orrs	r2, r1
 8001456:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001458:	f000 f820 	bl	800149c <HAL_RCC_GetSysClockFreq>
 800145c:	0001      	movs	r1, r0
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <HAL_RCC_ClockConfig+0x188>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	091b      	lsrs	r3, r3, #4
 8001464:	220f      	movs	r2, #15
 8001466:	4013      	ands	r3, r2
 8001468:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <HAL_RCC_ClockConfig+0x194>)
 800146a:	5cd3      	ldrb	r3, [r2, r3]
 800146c:	000a      	movs	r2, r1
 800146e:	40da      	lsrs	r2, r3
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_RCC_ClockConfig+0x198>)
 8001472:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001474:	2003      	movs	r0, #3
 8001476:	f7ff f8e9 	bl	800064c <HAL_InitTick>
  
  return HAL_OK;
 800147a:	2300      	movs	r3, #0
}
 800147c:	0018      	movs	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	b004      	add	sp, #16
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40022000 	.word	0x40022000
 8001488:	40021000 	.word	0x40021000
 800148c:	00001388 	.word	0x00001388
 8001490:	fffff8ff 	.word	0xfffff8ff
 8001494:	08002420 	.word	0x08002420
 8001498:	20000000 	.word	0x20000000

0800149c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800149c:	b590      	push	{r4, r7, lr}
 800149e:	b08f      	sub	sp, #60	; 0x3c
 80014a0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80014a2:	2314      	movs	r3, #20
 80014a4:	18fb      	adds	r3, r7, r3
 80014a6:	4a2b      	ldr	r2, [pc, #172]	; (8001554 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80014aa:	c313      	stmia	r3!, {r0, r1, r4}
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	4a29      	ldr	r2, [pc, #164]	; (8001558 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014b4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80014b6:	c313      	stmia	r3!, {r0, r1, r4}
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014bc:	2300      	movs	r3, #0
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014c0:	2300      	movs	r3, #0
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80014c4:	2300      	movs	r3, #0
 80014c6:	637b      	str	r3, [r7, #52]	; 0x34
 80014c8:	2300      	movs	r3, #0
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80014d0:	4b22      	ldr	r3, [pc, #136]	; (800155c <HAL_RCC_GetSysClockFreq+0xc0>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d8:	220c      	movs	r2, #12
 80014da:	4013      	ands	r3, r2
 80014dc:	2b04      	cmp	r3, #4
 80014de:	d002      	beq.n	80014e6 <HAL_RCC_GetSysClockFreq+0x4a>
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	d003      	beq.n	80014ec <HAL_RCC_GetSysClockFreq+0x50>
 80014e4:	e02d      	b.n	8001542 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014e6:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <HAL_RCC_GetSysClockFreq+0xc4>)
 80014e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014ea:	e02d      	b.n	8001548 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80014ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ee:	0c9b      	lsrs	r3, r3, #18
 80014f0:	220f      	movs	r2, #15
 80014f2:	4013      	ands	r3, r2
 80014f4:	2214      	movs	r2, #20
 80014f6:	18ba      	adds	r2, r7, r2
 80014f8:	5cd3      	ldrb	r3, [r2, r3]
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80014fc:	4b17      	ldr	r3, [pc, #92]	; (800155c <HAL_RCC_GetSysClockFreq+0xc0>)
 80014fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001500:	220f      	movs	r2, #15
 8001502:	4013      	ands	r3, r2
 8001504:	1d3a      	adds	r2, r7, #4
 8001506:	5cd3      	ldrb	r3, [r2, r3]
 8001508:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800150a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800150c:	2380      	movs	r3, #128	; 0x80
 800150e:	025b      	lsls	r3, r3, #9
 8001510:	4013      	ands	r3, r2
 8001512:	d009      	beq.n	8001528 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001516:	4812      	ldr	r0, [pc, #72]	; (8001560 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001518:	f7fe fdf6 	bl	8000108 <__udivsi3>
 800151c:	0003      	movs	r3, r0
 800151e:	001a      	movs	r2, r3
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	4353      	muls	r3, r2
 8001524:	637b      	str	r3, [r7, #52]	; 0x34
 8001526:	e009      	b.n	800153c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001528:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800152a:	000a      	movs	r2, r1
 800152c:	0152      	lsls	r2, r2, #5
 800152e:	1a52      	subs	r2, r2, r1
 8001530:	0193      	lsls	r3, r2, #6
 8001532:	1a9b      	subs	r3, r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	185b      	adds	r3, r3, r1
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800153c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800153e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001540:	e002      	b.n	8001548 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001542:	4b07      	ldr	r3, [pc, #28]	; (8001560 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001544:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001546:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800154a:	0018      	movs	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	b00f      	add	sp, #60	; 0x3c
 8001550:	bd90      	pop	{r4, r7, pc}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	08002400 	.word	0x08002400
 8001558:	08002410 	.word	0x08002410
 800155c:	40021000 	.word	0x40021000
 8001560:	007a1200 	.word	0x007a1200

08001564 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e0a8      	b.n	80016c8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157a:	2b00      	cmp	r3, #0
 800157c:	d109      	bne.n	8001592 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	2382      	movs	r3, #130	; 0x82
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	429a      	cmp	r2, r3
 8001588:	d009      	beq.n	800159e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	61da      	str	r2, [r3, #28]
 8001590:	e005      	b.n	800159e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	225d      	movs	r2, #93	; 0x5d
 80015a8:	5c9b      	ldrb	r3, [r3, r2]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d107      	bne.n	80015c0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	225c      	movs	r2, #92	; 0x5c
 80015b4:	2100      	movs	r1, #0
 80015b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	0018      	movs	r0, r3
 80015bc:	f7fe ff8a 	bl	80004d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	225d      	movs	r2, #93	; 0x5d
 80015c4:	2102      	movs	r1, #2
 80015c6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2140      	movs	r1, #64	; 0x40
 80015d4:	438a      	bics	r2, r1
 80015d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68da      	ldr	r2, [r3, #12]
 80015dc:	23e0      	movs	r3, #224	; 0xe0
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d902      	bls.n	80015ea <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	e002      	b.n	80015f0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	015b      	lsls	r3, r3, #5
 80015ee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	23f0      	movs	r3, #240	; 0xf0
 80015f6:	011b      	lsls	r3, r3, #4
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d008      	beq.n	800160e <HAL_SPI_Init+0xaa>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68da      	ldr	r2, [r3, #12]
 8001600:	23e0      	movs	r3, #224	; 0xe0
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	429a      	cmp	r2, r3
 8001606:	d002      	beq.n	800160e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	2382      	movs	r3, #130	; 0x82
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	401a      	ands	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6899      	ldr	r1, [r3, #8]
 800161c:	2384      	movs	r3, #132	; 0x84
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	400b      	ands	r3, r1
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	2102      	movs	r1, #2
 800162a:	400b      	ands	r3, r1
 800162c:	431a      	orrs	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	2101      	movs	r1, #1
 8001634:	400b      	ands	r3, r1
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6999      	ldr	r1, [r3, #24]
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	400b      	ands	r3, r1
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	2138      	movs	r1, #56	; 0x38
 800164a:	400b      	ands	r3, r1
 800164c:	431a      	orrs	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	2180      	movs	r1, #128	; 0x80
 8001654:	400b      	ands	r3, r1
 8001656:	431a      	orrs	r2, r3
 8001658:	0011      	movs	r1, r2
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	019b      	lsls	r3, r3, #6
 8001662:	401a      	ands	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	0c1b      	lsrs	r3, r3, #16
 8001672:	2204      	movs	r2, #4
 8001674:	401a      	ands	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	2110      	movs	r1, #16
 800167c:	400b      	ands	r3, r1
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001684:	2108      	movs	r1, #8
 8001686:	400b      	ands	r3, r1
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68d9      	ldr	r1, [r3, #12]
 800168e:	23f0      	movs	r3, #240	; 0xf0
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	400b      	ands	r3, r1
 8001694:	431a      	orrs	r2, r3
 8001696:	0011      	movs	r1, r2
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	015b      	lsls	r3, r3, #5
 800169e:	401a      	ands	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	69da      	ldr	r2, [r3, #28]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4907      	ldr	r1, [pc, #28]	; (80016d0 <HAL_SPI_Init+0x16c>)
 80016b4:	400a      	ands	r2, r1
 80016b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	225d      	movs	r2, #93	; 0x5d
 80016c2:	2101      	movs	r1, #1
 80016c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	0018      	movs	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b004      	add	sp, #16
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	fffff7ff 	.word	0xfffff7ff

080016d4 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	1dbb      	adds	r3, r7, #6
 80016e0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80016e2:	2317      	movs	r3, #23
 80016e4:	18fb      	adds	r3, r7, r3
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d112      	bne.n	8001718 <HAL_SPI_Receive_IT+0x44>
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	2382      	movs	r3, #130	; 0x82
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d10c      	bne.n	8001718 <HAL_SPI_Receive_IT+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	225d      	movs	r2, #93	; 0x5d
 8001702:	2104      	movs	r1, #4
 8001704:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8001706:	1dbb      	adds	r3, r7, #6
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 f8a4 	bl	800185c <HAL_SPI_TransmitReceive_IT>
 8001714:	0003      	movs	r3, r0
 8001716:	e095      	b.n	8001844 <HAL_SPI_Receive_IT+0x170>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	225c      	movs	r2, #92	; 0x5c
 800171c:	5c9b      	ldrb	r3, [r3, r2]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d101      	bne.n	8001726 <HAL_SPI_Receive_IT+0x52>
 8001722:	2302      	movs	r3, #2
 8001724:	e08e      	b.n	8001844 <HAL_SPI_Receive_IT+0x170>
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	225c      	movs	r2, #92	; 0x5c
 800172a:	2101      	movs	r1, #1
 800172c:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	225d      	movs	r2, #93	; 0x5d
 8001732:	5c9b      	ldrb	r3, [r3, r2]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b01      	cmp	r3, #1
 8001738:	d004      	beq.n	8001744 <HAL_SPI_Receive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 800173a:	2317      	movs	r3, #23
 800173c:	18fb      	adds	r3, r7, r3
 800173e:	2202      	movs	r2, #2
 8001740:	701a      	strb	r2, [r3, #0]
    goto error;
 8001742:	e078      	b.n	8001836 <HAL_SPI_Receive_IT+0x162>
  }

  if ((pData == NULL) || (Size == 0U))
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_SPI_Receive_IT+0x7e>
 800174a:	1dbb      	adds	r3, r7, #6
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d104      	bne.n	800175c <HAL_SPI_Receive_IT+0x88>
  {
    errorcode = HAL_ERROR;
 8001752:	2317      	movs	r3, #23
 8001754:	18fb      	adds	r3, r7, r3
 8001756:	2201      	movs	r2, #1
 8001758:	701a      	strb	r2, [r3, #0]
    goto error;
 800175a:	e06c      	b.n	8001836 <HAL_SPI_Receive_IT+0x162>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	225d      	movs	r2, #93	; 0x5d
 8001760:	2104      	movs	r1, #4
 8001762:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2200      	movs	r2, #0
 8001768:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	68ba      	ldr	r2, [r7, #8]
 800176e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	1dba      	adds	r2, r7, #6
 8001774:	2144      	movs	r1, #68	; 0x44
 8001776:	8812      	ldrh	r2, [r2, #0]
 8001778:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	1dba      	adds	r2, r7, #6
 800177e:	2146      	movs	r1, #70	; 0x46
 8001780:	8812      	ldrh	r2, [r2, #0]
 8001782:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2200      	movs	r2, #0
 8001788:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2200      	movs	r2, #0
 8001794:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2200      	movs	r2, #0
 800179a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	68da      	ldr	r2, [r3, #12]
 80017a0:	23e0      	movs	r3, #224	; 0xe0
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d90b      	bls.n	80017c0 <HAL_SPI_Receive_IT+0xec>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4926      	ldr	r1, [pc, #152]	; (800184c <HAL_SPI_Receive_IT+0x178>)
 80017b4:	400a      	ands	r2, r1
 80017b6:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4a25      	ldr	r2, [pc, #148]	; (8001850 <HAL_SPI_Receive_IT+0x17c>)
 80017bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80017be:	e00b      	b.n	80017d8 <HAL_SPI_Receive_IT+0x104>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2180      	movs	r1, #128	; 0x80
 80017cc:	0149      	lsls	r1, r1, #5
 80017ce:	430a      	orrs	r2, r1
 80017d0:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4a1f      	ldr	r2, [pc, #124]	; (8001854 <HAL_SPI_Receive_IT+0x180>)
 80017d6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	021b      	lsls	r3, r3, #8
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d10f      	bne.n	8001804 <HAL_SPI_Receive_IT+0x130>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2140      	movs	r1, #64	; 0x40
 80017f0:	438a      	bics	r2, r1
 80017f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4916      	ldr	r1, [pc, #88]	; (8001858 <HAL_SPI_Receive_IT+0x184>)
 8001800:	400a      	ands	r2, r1
 8001802:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2160      	movs	r1, #96	; 0x60
 8001810:	430a      	orrs	r2, r1
 8001812:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2240      	movs	r2, #64	; 0x40
 800181c:	4013      	ands	r3, r2
 800181e:	2b40      	cmp	r3, #64	; 0x40
 8001820:	d008      	beq.n	8001834 <HAL_SPI_Receive_IT+0x160>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2140      	movs	r1, #64	; 0x40
 800182e:	430a      	orrs	r2, r1
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	e000      	b.n	8001836 <HAL_SPI_Receive_IT+0x162>
  }

error :
 8001834:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	225c      	movs	r2, #92	; 0x5c
 800183a:	2100      	movs	r1, #0
 800183c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800183e:	2317      	movs	r3, #23
 8001840:	18fb      	adds	r3, r7, r3
 8001842:	781b      	ldrb	r3, [r3, #0]
}
 8001844:	0018      	movs	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	b006      	add	sp, #24
 800184a:	bd80      	pop	{r7, pc}
 800184c:	ffffefff 	.word	0xffffefff
 8001850:	08001eab 	.word	0x08001eab
 8001854:	08001e59 	.word	0x08001e59
 8001858:	ffffbfff 	.word	0xffffbfff

0800185c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
 8001868:	001a      	movs	r2, r3
 800186a:	1cbb      	adds	r3, r7, #2
 800186c:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800186e:	2317      	movs	r3, #23
 8001870:	18fb      	adds	r3, r7, r3
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	225c      	movs	r2, #92	; 0x5c
 800187a:	5c9b      	ldrb	r3, [r3, r2]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d101      	bne.n	8001884 <HAL_SPI_TransmitReceive_IT+0x28>
 8001880:	2302      	movs	r3, #2
 8001882:	e0a6      	b.n	80019d2 <HAL_SPI_TransmitReceive_IT+0x176>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	225c      	movs	r2, #92	; 0x5c
 8001888:	2101      	movs	r1, #1
 800188a:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800188c:	2016      	movs	r0, #22
 800188e:	183b      	adds	r3, r7, r0
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	215d      	movs	r1, #93	; 0x5d
 8001894:	5c52      	ldrb	r2, [r2, r1]
 8001896:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800189e:	0001      	movs	r1, r0
 80018a0:	187b      	adds	r3, r7, r1
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d011      	beq.n	80018cc <HAL_SPI_TransmitReceive_IT+0x70>
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	2382      	movs	r3, #130	; 0x82
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d107      	bne.n	80018c2 <HAL_SPI_TransmitReceive_IT+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d103      	bne.n	80018c2 <HAL_SPI_TransmitReceive_IT+0x66>
 80018ba:	187b      	adds	r3, r7, r1
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b04      	cmp	r3, #4
 80018c0:	d004      	beq.n	80018cc <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 80018c2:	2317      	movs	r3, #23
 80018c4:	18fb      	adds	r3, r7, r3
 80018c6:	2202      	movs	r2, #2
 80018c8:	701a      	strb	r2, [r3, #0]
    goto error;
 80018ca:	e07b      	b.n	80019c4 <HAL_SPI_TransmitReceive_IT+0x168>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d006      	beq.n	80018e0 <HAL_SPI_TransmitReceive_IT+0x84>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_SPI_TransmitReceive_IT+0x84>
 80018d8:	1cbb      	adds	r3, r7, #2
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d104      	bne.n	80018ea <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    errorcode = HAL_ERROR;
 80018e0:	2317      	movs	r3, #23
 80018e2:	18fb      	adds	r3, r7, r3
 80018e4:	2201      	movs	r2, #1
 80018e6:	701a      	strb	r2, [r3, #0]
    goto error;
 80018e8:	e06c      	b.n	80019c4 <HAL_SPI_TransmitReceive_IT+0x168>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	225d      	movs	r2, #93	; 0x5d
 80018ee:	5c9b      	ldrb	r3, [r3, r2]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d003      	beq.n	80018fe <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	225d      	movs	r2, #93	; 0x5d
 80018fa:	2105      	movs	r1, #5
 80018fc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1cba      	adds	r2, r7, #2
 800190e:	8812      	ldrh	r2, [r2, #0]
 8001910:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	1cba      	adds	r2, r7, #2
 8001916:	8812      	ldrh	r2, [r2, #0]
 8001918:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	1cba      	adds	r2, r7, #2
 8001924:	2144      	movs	r1, #68	; 0x44
 8001926:	8812      	ldrh	r2, [r2, #0]
 8001928:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1cba      	adds	r2, r7, #2
 800192e:	2146      	movs	r1, #70	; 0x46
 8001930:	8812      	ldrh	r2, [r2, #0]
 8001932:	525a      	strh	r2, [r3, r1]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	23e0      	movs	r3, #224	; 0xe0
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	429a      	cmp	r2, r3
 800193e:	d906      	bls.n	800194e <HAL_SPI_TransmitReceive_IT+0xf2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4a26      	ldr	r2, [pc, #152]	; (80019dc <HAL_SPI_TransmitReceive_IT+0x180>)
 8001944:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4a25      	ldr	r2, [pc, #148]	; (80019e0 <HAL_SPI_TransmitReceive_IT+0x184>)
 800194a:	651a      	str	r2, [r3, #80]	; 0x50
 800194c:	e005      	b.n	800195a <HAL_SPI_TransmitReceive_IT+0xfe>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4a24      	ldr	r2, [pc, #144]	; (80019e4 <HAL_SPI_TransmitReceive_IT+0x188>)
 8001952:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4a24      	ldr	r2, [pc, #144]	; (80019e8 <HAL_SPI_TransmitReceive_IT+0x18c>)
 8001958:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	68da      	ldr	r2, [r3, #12]
 800195e:	23e0      	movs	r3, #224	; 0xe0
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	429a      	cmp	r2, r3
 8001964:	d803      	bhi.n	800196e <HAL_SPI_TransmitReceive_IT+0x112>
 8001966:	1cbb      	adds	r3, r7, #2
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d908      	bls.n	8001980 <HAL_SPI_TransmitReceive_IT+0x124>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	491c      	ldr	r1, [pc, #112]	; (80019ec <HAL_SPI_TransmitReceive_IT+0x190>)
 800197a:	400a      	ands	r2, r1
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	e008      	b.n	8001992 <HAL_SPI_TransmitReceive_IT+0x136>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2180      	movs	r1, #128	; 0x80
 800198c:	0149      	lsls	r1, r1, #5
 800198e:	430a      	orrs	r2, r1
 8001990:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	21e0      	movs	r1, #224	; 0xe0
 800199e:	430a      	orrs	r2, r1
 80019a0:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2240      	movs	r2, #64	; 0x40
 80019aa:	4013      	ands	r3, r2
 80019ac:	2b40      	cmp	r3, #64	; 0x40
 80019ae:	d008      	beq.n	80019c2 <HAL_SPI_TransmitReceive_IT+0x166>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2140      	movs	r1, #64	; 0x40
 80019bc:	430a      	orrs	r2, r1
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	e000      	b.n	80019c4 <HAL_SPI_TransmitReceive_IT+0x168>
  }

error :
 80019c2:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	225c      	movs	r2, #92	; 0x5c
 80019c8:	2100      	movs	r1, #0
 80019ca:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80019cc:	2317      	movs	r3, #23
 80019ce:	18fb      	adds	r3, r7, r3
 80019d0:	781b      	ldrb	r3, [r3, #0]
}
 80019d2:	0018      	movs	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b006      	add	sp, #24
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	08001d8f 	.word	0x08001d8f
 80019e0:	08001df7 	.word	0x08001df7
 80019e4:	08001c39 	.word	0x08001c39
 80019e8:	08001cfb 	.word	0x08001cfb
 80019ec:	ffffefff 	.word	0xffffefff

080019f0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	099b      	lsrs	r3, r3, #6
 8001a0c:	001a      	movs	r2, r3
 8001a0e:	2301      	movs	r3, #1
 8001a10:	4013      	ands	r3, r2
 8001a12:	d10f      	bne.n	8001a34 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	2201      	movs	r2, #1
 8001a18:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001a1a:	d00b      	beq.n	8001a34 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	099b      	lsrs	r3, r3, #6
 8001a20:	001a      	movs	r2, r3
 8001a22:	2301      	movs	r3, #1
 8001a24:	4013      	ands	r3, r2
 8001a26:	d005      	beq.n	8001a34 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	0010      	movs	r0, r2
 8001a30:	4798      	blx	r3
    return;
 8001a32:	e0d5      	b.n	8001be0 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	085b      	lsrs	r3, r3, #1
 8001a38:	001a      	movs	r2, r3
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d00b      	beq.n	8001a58 <HAL_SPI_IRQHandler+0x68>
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	09db      	lsrs	r3, r3, #7
 8001a44:	001a      	movs	r2, r3
 8001a46:	2301      	movs	r3, #1
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d005      	beq.n	8001a58 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	0010      	movs	r0, r2
 8001a54:	4798      	blx	r3
    return;
 8001a56:	e0c3      	b.n	8001be0 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	095b      	lsrs	r3, r3, #5
 8001a5c:	001a      	movs	r2, r3
 8001a5e:	2301      	movs	r3, #1
 8001a60:	4013      	ands	r3, r2
 8001a62:	d10c      	bne.n	8001a7e <HAL_SPI_IRQHandler+0x8e>
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	099b      	lsrs	r3, r3, #6
 8001a68:	001a      	movs	r2, r3
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d106      	bne.n	8001a7e <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	0a1b      	lsrs	r3, r3, #8
 8001a74:	001a      	movs	r2, r3
 8001a76:	2301      	movs	r3, #1
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d100      	bne.n	8001a7e <HAL_SPI_IRQHandler+0x8e>
 8001a7c:	e0b0      	b.n	8001be0 <HAL_SPI_IRQHandler+0x1f0>
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	095b      	lsrs	r3, r3, #5
 8001a82:	001a      	movs	r2, r3
 8001a84:	2301      	movs	r3, #1
 8001a86:	4013      	ands	r3, r2
 8001a88:	d100      	bne.n	8001a8c <HAL_SPI_IRQHandler+0x9c>
 8001a8a:	e0a9      	b.n	8001be0 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	099b      	lsrs	r3, r3, #6
 8001a90:	001a      	movs	r2, r3
 8001a92:	2301      	movs	r3, #1
 8001a94:	4013      	ands	r3, r2
 8001a96:	d023      	beq.n	8001ae0 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	225d      	movs	r2, #93	; 0x5d
 8001a9c:	5c9b      	ldrb	r3, [r3, r2]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b03      	cmp	r3, #3
 8001aa2:	d011      	beq.n	8001ac8 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa8:	2204      	movs	r2, #4
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	e00b      	b.n	8001ae0 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]
        return;
 8001ade:	e07f      	b.n	8001be0 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	095b      	lsrs	r3, r3, #5
 8001ae4:	001a      	movs	r2, r3
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d014      	beq.n	8001b16 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af0:	2201      	movs	r2, #1
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2140      	movs	r1, #64	; 0x40
 8001b10:	438a      	bics	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	0a1b      	lsrs	r3, r3, #8
 8001b1a:	001a      	movs	r2, r3
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d00c      	beq.n	8001b3c <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b26:	2208      	movs	r2, #8
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d04c      	beq.n	8001bde <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	21e0      	movs	r1, #224	; 0xe0
 8001b50:	438a      	bics	r2, r1
 8001b52:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	225d      	movs	r2, #93	; 0x5d
 8001b58:	2101      	movs	r1, #1
 8001b5a:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	4013      	ands	r3, r2
 8001b62:	d103      	bne.n	8001b6c <HAL_SPI_IRQHandler+0x17c>
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	2201      	movs	r2, #1
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d032      	beq.n	8001bd2 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2103      	movs	r1, #3
 8001b78:	438a      	bics	r2, r1
 8001b7a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d010      	beq.n	8001ba6 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b88:	4a17      	ldr	r2, [pc, #92]	; (8001be8 <HAL_SPI_IRQHandler+0x1f8>)
 8001b8a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b90:	0018      	movs	r0, r3
 8001b92:	f7fe fead 	bl	80008f0 <HAL_DMA_Abort_IT>
 8001b96:	1e03      	subs	r3, r0, #0
 8001b98:	d005      	beq.n	8001ba6 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b9e:	2240      	movs	r2, #64	; 0x40
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d016      	beq.n	8001bdc <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb2:	4a0d      	ldr	r2, [pc, #52]	; (8001be8 <HAL_SPI_IRQHandler+0x1f8>)
 8001bb4:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f7fe fe98 	bl	80008f0 <HAL_DMA_Abort_IT>
 8001bc0:	1e03      	subs	r3, r0, #0
 8001bc2:	d00b      	beq.n	8001bdc <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc8:	2240      	movs	r2, #64	; 0x40
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8001bd0:	e004      	b.n	8001bdc <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f000 f811 	bl	8001bfc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001bda:	e000      	b.n	8001bde <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8001bdc:	46c0      	nop			; (mov r8, r8)
    return;
 8001bde:	46c0      	nop			; (mov r8, r8)
  }
}
 8001be0:	46bd      	mov	sp, r7
 8001be2:	b008      	add	sp, #32
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	08001c0d 	.word	0x08001c0d

08001bec <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8001bf4:	46c0      	nop			; (mov r8, r8)
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	b002      	add	sp, #8
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001c04:	46c0      	nop			; (mov r8, r8)
 8001c06:	46bd      	mov	sp, r7
 8001c08:	b002      	add	sp, #8
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2246      	movs	r2, #70	; 0x46
 8001c1e:	2100      	movs	r1, #0
 8001c20:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f7ff ffe6 	bl	8001bfc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001c30:	46c0      	nop			; (mov r8, r8)
 8001c32:	46bd      	mov	sp, r7
 8001c34:	b004      	add	sp, #16
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2246      	movs	r2, #70	; 0x46
 8001c44:	5a9b      	ldrh	r3, [r3, r2]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d924      	bls.n	8001c96 <SPI_2linesRxISR_8BIT+0x5e>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	b292      	uxth	r2, r2
 8001c58:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	1c9a      	adds	r2, r3, #2
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2246      	movs	r2, #70	; 0x46
 8001c68:	5a9b      	ldrh	r3, [r3, r2]
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	3b02      	subs	r3, #2
 8001c6e:	b299      	uxth	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2246      	movs	r2, #70	; 0x46
 8001c74:	5299      	strh	r1, [r3, r2]
    if (hspi->RxXferCount == 1U)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2246      	movs	r2, #70	; 0x46
 8001c7a:	5a9b      	ldrh	r3, [r3, r2]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d120      	bne.n	8001cc4 <SPI_2linesRxISR_8BIT+0x8c>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2180      	movs	r1, #128	; 0x80
 8001c8e:	0149      	lsls	r1, r1, #5
 8001c90:	430a      	orrs	r2, r1
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	e016      	b.n	8001cc4 <SPI_2linesRxISR_8BIT+0x8c>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	330c      	adds	r3, #12
 8001c9c:	001a      	movs	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	7812      	ldrb	r2, [r2, #0]
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	1c5a      	adds	r2, r3, #1
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2246      	movs	r2, #70	; 0x46
 8001cb6:	5a9b      	ldrh	r3, [r3, r2]
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	b299      	uxth	r1, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2246      	movs	r2, #70	; 0x46
 8001cc2:	5299      	strh	r1, [r3, r2]
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2246      	movs	r2, #70	; 0x46
 8001cc8:	5a9b      	ldrh	r3, [r3, r2]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d110      	bne.n	8001cf2 <SPI_2linesRxISR_8BIT+0xba>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2160      	movs	r1, #96	; 0x60
 8001cdc:	438a      	bics	r2, r1
 8001cde:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d103      	bne.n	8001cf2 <SPI_2linesRxISR_8BIT+0xba>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	0018      	movs	r0, r3
 8001cee:	f000 fad7 	bl	80022a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b002      	add	sp, #8
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d912      	bls.n	8001d32 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d10:	881a      	ldrh	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1c:	1c9a      	adds	r2, r3, #2
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	3b02      	subs	r3, #2
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d30:	e012      	b.n	8001d58 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	330c      	adds	r3, #12
 8001d3c:	7812      	ldrb	r2, [r2, #0]
 8001d3e:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d111      	bne.n	8001d86 <SPI_2linesTxISR_8BIT+0x8c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2180      	movs	r1, #128	; 0x80
 8001d6e:	438a      	bics	r2, r1
 8001d70:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2246      	movs	r2, #70	; 0x46
 8001d76:	5a9b      	ldrh	r3, [r3, r2]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d103      	bne.n	8001d86 <SPI_2linesTxISR_8BIT+0x8c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	0018      	movs	r0, r3
 8001d82:	f000 fa8d 	bl	80022a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b002      	add	sp, #8
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	b292      	uxth	r2, r2
 8001da2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	1c9a      	adds	r2, r3, #2
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2246      	movs	r2, #70	; 0x46
 8001db2:	5a9b      	ldrh	r3, [r3, r2]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	3b01      	subs	r3, #1
 8001db8:	b299      	uxth	r1, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2246      	movs	r2, #70	; 0x46
 8001dbe:	5299      	strh	r1, [r3, r2]

  if (hspi->RxXferCount == 0U)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2246      	movs	r2, #70	; 0x46
 8001dc4:	5a9b      	ldrh	r3, [r3, r2]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d110      	bne.n	8001dee <SPI_2linesRxISR_16BIT+0x60>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2140      	movs	r1, #64	; 0x40
 8001dd8:	438a      	bics	r2, r1
 8001dda:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d103      	bne.n	8001dee <SPI_2linesRxISR_16BIT+0x60>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	0018      	movs	r0, r3
 8001dea:	f000 fa59 	bl	80022a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	46bd      	mov	sp, r7
 8001df2:	b002      	add	sp, #8
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e02:	881a      	ldrh	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0e:	1c9a      	adds	r2, r3, #2
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d111      	bne.n	8001e50 <SPI_2linesTxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2180      	movs	r1, #128	; 0x80
 8001e38:	438a      	bics	r2, r1
 8001e3a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2246      	movs	r2, #70	; 0x46
 8001e40:	5a9b      	ldrh	r3, [r3, r2]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d103      	bne.n	8001e50 <SPI_2linesTxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f000 fa28 	bl	80022a0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001e50:	46c0      	nop			; (mov r8, r8)
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b002      	add	sp, #8
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	330c      	adds	r3, #12
 8001e66:	001a      	movs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	7812      	ldrb	r2, [r2, #0]
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2246      	movs	r2, #70	; 0x46
 8001e80:	5a9b      	ldrh	r3, [r3, r2]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	3b01      	subs	r3, #1
 8001e86:	b299      	uxth	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2246      	movs	r2, #70	; 0x46
 8001e8c:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2246      	movs	r2, #70	; 0x46
 8001e92:	5a9b      	ldrh	r3, [r3, r2]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d103      	bne.n	8001ea2 <SPI_RxISR_8BIT+0x4a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f000 fa45 	bl	800232c <SPI_CloseRx_ISR>
  }
}
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	b002      	add	sp, #8
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	b292      	uxth	r2, r2
 8001ebe:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	1c9a      	adds	r2, r3, #2
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2246      	movs	r2, #70	; 0x46
 8001ece:	5a9b      	ldrh	r3, [r3, r2]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	b299      	uxth	r1, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2246      	movs	r2, #70	; 0x46
 8001eda:	5299      	strh	r1, [r3, r2]
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2246      	movs	r2, #70	; 0x46
 8001ee0:	5a9b      	ldrh	r3, [r3, r2]
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d103      	bne.n	8001ef0 <SPI_RxISR_16BIT+0x46>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	0018      	movs	r0, r3
 8001eec:	f000 fa1e 	bl	800232c <SPI_CloseRx_ISR>
  }
}
 8001ef0:	46c0      	nop			; (mov r8, r8)
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	b002      	add	sp, #8
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	1dfb      	adds	r3, r7, #7
 8001f06:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001f08:	f7fe fbe6 	bl	80006d8 <HAL_GetTick>
 8001f0c:	0002      	movs	r2, r0
 8001f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f10:	1a9b      	subs	r3, r3, r2
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	18d3      	adds	r3, r2, r3
 8001f16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001f18:	f7fe fbde 	bl	80006d8 <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001f20:	4b3a      	ldr	r3, [pc, #232]	; (800200c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	015b      	lsls	r3, r3, #5
 8001f26:	0d1b      	lsrs	r3, r3, #20
 8001f28:	69fa      	ldr	r2, [r7, #28]
 8001f2a:	4353      	muls	r3, r2
 8001f2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f2e:	e058      	b.n	8001fe2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	3301      	adds	r3, #1
 8001f34:	d055      	beq.n	8001fe2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f36:	f7fe fbcf 	bl	80006d8 <HAL_GetTick>
 8001f3a:	0002      	movs	r2, r0
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	69fa      	ldr	r2, [r7, #28]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d902      	bls.n	8001f4c <SPI_WaitFlagStateUntilTimeout+0x54>
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d142      	bne.n	8001fd2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	21e0      	movs	r1, #224	; 0xe0
 8001f58:	438a      	bics	r2, r1
 8001f5a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	2382      	movs	r3, #130	; 0x82
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d113      	bne.n	8001f90 <SPI_WaitFlagStateUntilTimeout+0x98>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	021b      	lsls	r3, r3, #8
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d005      	beq.n	8001f80 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d107      	bne.n	8001f90 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2140      	movs	r1, #64	; 0x40
 8001f8c:	438a      	bics	r2, r1
 8001f8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f94:	2380      	movs	r3, #128	; 0x80
 8001f96:	019b      	lsls	r3, r3, #6
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d110      	bne.n	8001fbe <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	491a      	ldr	r1, [pc, #104]	; (8002010 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8001fa8:	400a      	ands	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2180      	movs	r1, #128	; 0x80
 8001fb8:	0189      	lsls	r1, r1, #6
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	225d      	movs	r2, #93	; 0x5d
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	225c      	movs	r2, #92	; 0x5c
 8001fca:	2100      	movs	r1, #0
 8001fcc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e017      	b.n	8002002 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	4013      	ands	r3, r2
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	425a      	negs	r2, r3
 8001ff2:	4153      	adcs	r3, r2
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	001a      	movs	r2, r3
 8001ff8:	1dfb      	adds	r3, r7, #7
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d197      	bne.n	8001f30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	0018      	movs	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	b008      	add	sp, #32
 8002008:	bd80      	pop	{r7, pc}
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	20000000 	.word	0x20000000
 8002010:	ffffdfff 	.word	0xffffdfff

08002014 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08a      	sub	sp, #40	; 0x28
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
 8002020:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002022:	2317      	movs	r3, #23
 8002024:	18fb      	adds	r3, r7, r3
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800202a:	f7fe fb55 	bl	80006d8 <HAL_GetTick>
 800202e:	0002      	movs	r2, r0
 8002030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	18d3      	adds	r3, r2, r3
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800203a:	f7fe fb4d 	bl	80006d8 <HAL_GetTick>
 800203e:	0003      	movs	r3, r0
 8002040:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	330c      	adds	r3, #12
 8002048:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800204a:	4b41      	ldr	r3, [pc, #260]	; (8002150 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	0013      	movs	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	189b      	adds	r3, r3, r2
 8002054:	00da      	lsls	r2, r3, #3
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	0d1b      	lsrs	r3, r3, #20
 800205a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800205c:	4353      	muls	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002060:	e068      	b.n	8002134 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	23c0      	movs	r3, #192	; 0xc0
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	429a      	cmp	r2, r3
 800206a:	d10a      	bne.n	8002082 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d107      	bne.n	8002082 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	2117      	movs	r1, #23
 800207a:	187b      	adds	r3, r7, r1
 800207c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800207e:	187b      	adds	r3, r7, r1
 8002080:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	3301      	adds	r3, #1
 8002086:	d055      	beq.n	8002134 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002088:	f7fe fb26 	bl	80006d8 <HAL_GetTick>
 800208c:	0002      	movs	r2, r0
 800208e:	6a3b      	ldr	r3, [r7, #32]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002094:	429a      	cmp	r2, r3
 8002096:	d902      	bls.n	800209e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	2b00      	cmp	r3, #0
 800209c:	d142      	bne.n	8002124 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	21e0      	movs	r1, #224	; 0xe0
 80020aa:	438a      	bics	r2, r1
 80020ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	2382      	movs	r3, #130	; 0x82
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d113      	bne.n	80020e2 <SPI_WaitFifoStateUntilTimeout+0xce>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	021b      	lsls	r3, r3, #8
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d005      	beq.n	80020d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	2380      	movs	r3, #128	; 0x80
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d107      	bne.n	80020e2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2140      	movs	r1, #64	; 0x40
 80020de:	438a      	bics	r2, r1
 80020e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	019b      	lsls	r3, r3, #6
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d110      	bne.n	8002110 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4916      	ldr	r1, [pc, #88]	; (8002154 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80020fa:	400a      	ands	r2, r1
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2180      	movs	r1, #128	; 0x80
 800210a:	0189      	lsls	r1, r1, #6
 800210c:	430a      	orrs	r2, r1
 800210e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	225d      	movs	r2, #93	; 0x5d
 8002114:	2101      	movs	r1, #1
 8002116:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	225c      	movs	r2, #92	; 0x5c
 800211c:	2100      	movs	r1, #0
 800211e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e010      	b.n	8002146 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	3b01      	subs	r3, #1
 8002132:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	4013      	ands	r3, r2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	429a      	cmp	r2, r3
 8002142:	d18e      	bne.n	8002062 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	0018      	movs	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	b00a      	add	sp, #40	; 0x28
 800214c:	bd80      	pop	{r7, pc}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	20000000 	.word	0x20000000
 8002154:	ffffdfff 	.word	0xffffdfff

08002158 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af02      	add	r7, sp, #8
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	2382      	movs	r3, #130	; 0x82
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	429a      	cmp	r2, r3
 800216e:	d113      	bne.n	8002198 <SPI_EndRxTransaction+0x40>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	2380      	movs	r3, #128	; 0x80
 8002176:	021b      	lsls	r3, r3, #8
 8002178:	429a      	cmp	r2, r3
 800217a:	d005      	beq.n	8002188 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	429a      	cmp	r2, r3
 8002186:	d107      	bne.n	8002198 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2140      	movs	r1, #64	; 0x40
 8002194:	438a      	bics	r2, r1
 8002196:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	0013      	movs	r3, r2
 80021a2:	2200      	movs	r2, #0
 80021a4:	2180      	movs	r1, #128	; 0x80
 80021a6:	f7ff fea7 	bl	8001ef8 <SPI_WaitFlagStateUntilTimeout>
 80021aa:	1e03      	subs	r3, r0, #0
 80021ac:	d007      	beq.n	80021be <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b2:	2220      	movs	r2, #32
 80021b4:	431a      	orrs	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e026      	b.n	800220c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	2382      	movs	r3, #130	; 0x82
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d11f      	bne.n	800220a <SPI_EndRxTransaction+0xb2>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	2380      	movs	r3, #128	; 0x80
 80021d0:	021b      	lsls	r3, r3, #8
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d005      	beq.n	80021e2 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	429a      	cmp	r2, r3
 80021e0:	d113      	bne.n	800220a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	23c0      	movs	r3, #192	; 0xc0
 80021e6:	00d9      	lsls	r1, r3, #3
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	0013      	movs	r3, r2
 80021f0:	2200      	movs	r2, #0
 80021f2:	f7ff ff0f 	bl	8002014 <SPI_WaitFifoStateUntilTimeout>
 80021f6:	1e03      	subs	r3, r0, #0
 80021f8:	d007      	beq.n	800220a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021fe:	2220      	movs	r2, #32
 8002200:	431a      	orrs	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e000      	b.n	800220c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	0018      	movs	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	b004      	add	sp, #16
 8002212:	bd80      	pop	{r7, pc}

08002214 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af02      	add	r7, sp, #8
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	23c0      	movs	r3, #192	; 0xc0
 8002224:	0159      	lsls	r1, r3, #5
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	0013      	movs	r3, r2
 800222e:	2200      	movs	r2, #0
 8002230:	f7ff fef0 	bl	8002014 <SPI_WaitFifoStateUntilTimeout>
 8002234:	1e03      	subs	r3, r0, #0
 8002236:	d007      	beq.n	8002248 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223c:	2220      	movs	r2, #32
 800223e:	431a      	orrs	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e027      	b.n	8002298 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	0013      	movs	r3, r2
 8002252:	2200      	movs	r2, #0
 8002254:	2180      	movs	r1, #128	; 0x80
 8002256:	f7ff fe4f 	bl	8001ef8 <SPI_WaitFlagStateUntilTimeout>
 800225a:	1e03      	subs	r3, r0, #0
 800225c:	d007      	beq.n	800226e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002262:	2220      	movs	r2, #32
 8002264:	431a      	orrs	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e014      	b.n	8002298 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	23c0      	movs	r3, #192	; 0xc0
 8002272:	00d9      	lsls	r1, r3, #3
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	0013      	movs	r3, r2
 800227c:	2200      	movs	r2, #0
 800227e:	f7ff fec9 	bl	8002014 <SPI_WaitFifoStateUntilTimeout>
 8002282:	1e03      	subs	r3, r0, #0
 8002284:	d007      	beq.n	8002296 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800228a:	2220      	movs	r2, #32
 800228c:	431a      	orrs	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e000      	b.n	8002298 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	0018      	movs	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	b004      	add	sp, #16
 800229e:	bd80      	pop	{r7, pc}

080022a0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80022a8:	f7fe fa16 	bl	80006d8 <HAL_GetTick>
 80022ac:	0003      	movs	r3, r0
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2120      	movs	r1, #32
 80022bc:	438a      	bics	r2, r1
 80022be:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2164      	movs	r1, #100	; 0x64
 80022c6:	0018      	movs	r0, r3
 80022c8:	f7ff ffa4 	bl	8002214 <SPI_EndRxTxTransaction>
 80022cc:	1e03      	subs	r3, r0, #0
 80022ce:	d005      	beq.n	80022dc <SPI_CloseRxTx_ISR+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d4:	2220      	movs	r2, #32
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d117      	bne.n	8002314 <SPI_CloseRxTx_ISR+0x74>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	225d      	movs	r2, #93	; 0x5d
 80022e8:	5c9b      	ldrb	r3, [r3, r2]
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d108      	bne.n	8002302 <SPI_CloseRxTx_ISR+0x62>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	225d      	movs	r2, #93	; 0x5d
 80022f4:	2101      	movs	r1, #1
 80022f6:	5499      	strb	r1, [r3, r2]
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	0018      	movs	r0, r3
 80022fc:	f7fd ffb4 	bl	8000268 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002300:	e010      	b.n	8002324 <SPI_CloseRxTx_ISR+0x84>
        hspi->State = HAL_SPI_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	225d      	movs	r2, #93	; 0x5d
 8002306:	2101      	movs	r1, #1
 8002308:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	0018      	movs	r0, r3
 800230e:	f7ff fc6d 	bl	8001bec <HAL_SPI_TxRxCpltCallback>
}
 8002312:	e007      	b.n	8002324 <SPI_CloseRxTx_ISR+0x84>
      hspi->State = HAL_SPI_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	225d      	movs	r2, #93	; 0x5d
 8002318:	2101      	movs	r1, #1
 800231a:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	0018      	movs	r0, r3
 8002320:	f7ff fc6c 	bl	8001bfc <HAL_SPI_ErrorCallback>
}
 8002324:	46c0      	nop			; (mov r8, r8)
 8002326:	46bd      	mov	sp, r7
 8002328:	b004      	add	sp, #16
 800232a:	bd80      	pop	{r7, pc}

0800232c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2160      	movs	r1, #96	; 0x60
 8002340:	438a      	bics	r2, r1
 8002342:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8002344:	f7fe f9c8 	bl	80006d8 <HAL_GetTick>
 8002348:	0002      	movs	r2, r0
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2164      	movs	r1, #100	; 0x64
 800234e:	0018      	movs	r0, r3
 8002350:	f7ff ff02 	bl	8002158 <SPI_EndRxTransaction>
 8002354:	1e03      	subs	r3, r0, #0
 8002356:	d005      	beq.n	8002364 <SPI_CloseRx_ISR+0x38>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800235c:	2220      	movs	r2, #32
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	225d      	movs	r2, #93	; 0x5d
 8002368:	2101      	movs	r1, #1
 800236a:	5499      	strb	r1, [r3, r2]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002370:	2b00      	cmp	r3, #0
 8002372:	d104      	bne.n	800237e <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	0018      	movs	r0, r3
 8002378:	f7fd ff76 	bl	8000268 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800237c:	e003      	b.n	8002386 <SPI_CloseRx_ISR+0x5a>
      HAL_SPI_ErrorCallback(hspi);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	0018      	movs	r0, r3
 8002382:	f7ff fc3b 	bl	8001bfc <HAL_SPI_ErrorCallback>
}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	46bd      	mov	sp, r7
 800238a:	b002      	add	sp, #8
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <__libc_init_array>:
 8002390:	b570      	push	{r4, r5, r6, lr}
 8002392:	2600      	movs	r6, #0
 8002394:	4d0c      	ldr	r5, [pc, #48]	; (80023c8 <__libc_init_array+0x38>)
 8002396:	4c0d      	ldr	r4, [pc, #52]	; (80023cc <__libc_init_array+0x3c>)
 8002398:	1b64      	subs	r4, r4, r5
 800239a:	10a4      	asrs	r4, r4, #2
 800239c:	42a6      	cmp	r6, r4
 800239e:	d109      	bne.n	80023b4 <__libc_init_array+0x24>
 80023a0:	2600      	movs	r6, #0
 80023a2:	f000 f821 	bl	80023e8 <_init>
 80023a6:	4d0a      	ldr	r5, [pc, #40]	; (80023d0 <__libc_init_array+0x40>)
 80023a8:	4c0a      	ldr	r4, [pc, #40]	; (80023d4 <__libc_init_array+0x44>)
 80023aa:	1b64      	subs	r4, r4, r5
 80023ac:	10a4      	asrs	r4, r4, #2
 80023ae:	42a6      	cmp	r6, r4
 80023b0:	d105      	bne.n	80023be <__libc_init_array+0x2e>
 80023b2:	bd70      	pop	{r4, r5, r6, pc}
 80023b4:	00b3      	lsls	r3, r6, #2
 80023b6:	58eb      	ldr	r3, [r5, r3]
 80023b8:	4798      	blx	r3
 80023ba:	3601      	adds	r6, #1
 80023bc:	e7ee      	b.n	800239c <__libc_init_array+0xc>
 80023be:	00b3      	lsls	r3, r6, #2
 80023c0:	58eb      	ldr	r3, [r5, r3]
 80023c2:	4798      	blx	r3
 80023c4:	3601      	adds	r6, #1
 80023c6:	e7f2      	b.n	80023ae <__libc_init_array+0x1e>
 80023c8:	08002430 	.word	0x08002430
 80023cc:	08002430 	.word	0x08002430
 80023d0:	08002430 	.word	0x08002430
 80023d4:	08002434 	.word	0x08002434

080023d8 <memset>:
 80023d8:	0003      	movs	r3, r0
 80023da:	1882      	adds	r2, r0, r2
 80023dc:	4293      	cmp	r3, r2
 80023de:	d100      	bne.n	80023e2 <memset+0xa>
 80023e0:	4770      	bx	lr
 80023e2:	7019      	strb	r1, [r3, #0]
 80023e4:	3301      	adds	r3, #1
 80023e6:	e7f9      	b.n	80023dc <memset+0x4>

080023e8 <_init>:
 80023e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ee:	bc08      	pop	{r3}
 80023f0:	469e      	mov	lr, r3
 80023f2:	4770      	bx	lr

080023f4 <_fini>:
 80023f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023fa:	bc08      	pop	{r3}
 80023fc:	469e      	mov	lr, r3
 80023fe:	4770      	bx	lr
