
SPI_Receiver_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002000  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800210c  0800210c  0001210c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800212c  0800212c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800212c  0800212c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800212c  0800212c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800212c  0800212c  0001212c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002130  08002130  00012130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  08002140  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08002140  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005e7f  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014b4  00000000  00000000  00025eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000668  00000000  00000000  00027368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005c0  00000000  00000000  000279d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e93  00000000  00000000  00027f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000700c  00000000  00000000  0003de23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007da09  00000000  00000000  00044e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c2838  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000187c  00000000  00000000  000c288c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080020f4 	.word	0x080020f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080020f4 	.word	0x080020f4

0800014c <led_on>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void led_on()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000156:	4802      	ldr	r0, [pc, #8]	; (8000160 <led_on+0x14>)
 8000158:	f000 ff46 	bl	8000fe8 <HAL_GPIO_WritePin>
}
 800015c:	bf00      	nop
 800015e:	bd80      	pop	{r7, pc}
 8000160:	40011000 	.word	0x40011000

08000164 <led_off>:

void led_off()
{
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800016e:	4802      	ldr	r0, [pc, #8]	; (8000178 <led_off+0x14>)
 8000170:	f000 ff3a 	bl	8000fe8 <HAL_GPIO_WritePin>
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40011000 	.word	0x40011000

0800017c <led_toggle>:

void led_toggle()
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000180:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000184:	4802      	ldr	r0, [pc, #8]	; (8000190 <led_toggle+0x14>)
 8000186:	f000 ff47 	bl	8001018 <HAL_GPIO_TogglePin>
}
 800018a:	bf00      	nop
 800018c:	bd80      	pop	{r7, pc}
 800018e:	bf00      	nop
 8000190:	40011000 	.word	0x40011000

08000194 <HAL_SPI_RxCpltCallback>:


long int count = 0;

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
  if(hspi == &hspi1)
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	4a07      	ldr	r2, [pc, #28]	; (80001bc <HAL_SPI_RxCpltCallback+0x28>)
 80001a0:	4293      	cmp	r3, r2
 80001a2:	d106      	bne.n	80001b2 <HAL_SPI_RxCpltCallback+0x1e>
  {
    led_toggle();
 80001a4:	f7ff ffea 	bl	800017c <led_toggle>
    count++;
 80001a8:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <HAL_SPI_RxCpltCallback+0x2c>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	3301      	adds	r3, #1
 80001ae:	4a04      	ldr	r2, [pc, #16]	; (80001c0 <HAL_SPI_RxCpltCallback+0x2c>)
 80001b0:	6013      	str	r3, [r2, #0]
  }
//  count++;
//  led_on();
//  led_toggle();
}
 80001b2:	bf00      	nop
 80001b4:	3708      	adds	r7, #8
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	2000002c 	.word	0x2000002c
 80001c0:	20000028 	.word	0x20000028

080001c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ca:	f000 fa07 	bl	80005dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ce:	f000 f821 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d2:	f000 f8b9 	bl	8000348 <MX_GPIO_Init>
  MX_DMA_Init();
 80001d6:	f000 f899 	bl	800030c <MX_DMA_Init>
  MX_SPI1_Init();
 80001da:	f000 f861 	bl	80002a0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  led_on();
 80001de:	f7ff ffb5 	bl	800014c <led_on>
  HAL_Delay(2000);
 80001e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001e6:	f000 fa5b 	bl	80006a0 <HAL_Delay>
  led_off();
 80001ea:	f7ff ffbb 	bl	8000164 <led_off>
  HAL_Delay(1000);
 80001ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001f2:	f000 fa55 	bl	80006a0 <HAL_Delay>

  uint8_t data_rx = 0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	71fb      	strb	r3, [r7, #7]

  HAL_SPI_Receive_DMA(&hspi1, &data_rx, sizeof(data_rx));
 80001fa:	1dfb      	adds	r3, r7, #7
 80001fc:	2201      	movs	r2, #1
 80001fe:	4619      	mov	r1, r3
 8000200:	4803      	ldr	r0, [pc, #12]	; (8000210 <main+0x4c>)
 8000202:	f001 fb8f 	bl	8001924 <HAL_SPI_Receive_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_Delay(500);
 8000206:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800020a:	f000 fa49 	bl	80006a0 <HAL_Delay>
 800020e:	e7fa      	b.n	8000206 <main+0x42>
 8000210:	2000002c 	.word	0x2000002c

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b090      	sub	sp, #64	; 0x40
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0318 	add.w	r3, r7, #24
 800021e:	2228      	movs	r2, #40	; 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f001 ff5e 	bl	80020e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]
 8000234:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000236:	2301      	movs	r3, #1
 8000238:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800023a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800023e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000240:	2300      	movs	r3, #0
 8000242:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000244:	2301      	movs	r3, #1
 8000246:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000248:	2302      	movs	r3, #2
 800024a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000250:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000252:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000256:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000258:	f107 0318 	add.w	r3, r7, #24
 800025c:	4618      	mov	r0, r3
 800025e:	f000 fef5 	bl	800104c <HAL_RCC_OscConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000268:	f000 f8ba 	bl	80003e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026c:	230f      	movs	r3, #15
 800026e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000270:	2302      	movs	r3, #2
 8000272:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800027c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	2102      	movs	r1, #2
 8000286:	4618      	mov	r0, r3
 8000288:	f001 f960 	bl	800154c <HAL_RCC_ClockConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000292:	f000 f8a5 	bl	80003e0 <Error_Handler>
  }
}
 8000296:	bf00      	nop
 8000298:	3740      	adds	r7, #64	; 0x40
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
	...

080002a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002a4:	4b17      	ldr	r3, [pc, #92]	; (8000304 <MX_SPI1_Init+0x64>)
 80002a6:	4a18      	ldr	r2, [pc, #96]	; (8000308 <MX_SPI1_Init+0x68>)
 80002a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80002aa:	4b16      	ldr	r3, [pc, #88]	; (8000304 <MX_SPI1_Init+0x64>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80002b0:	4b14      	ldr	r3, [pc, #80]	; (8000304 <MX_SPI1_Init+0x64>)
 80002b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002b8:	4b12      	ldr	r3, [pc, #72]	; (8000304 <MX_SPI1_Init+0x64>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002be:	4b11      	ldr	r3, [pc, #68]	; (8000304 <MX_SPI1_Init+0x64>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002c4:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <MX_SPI1_Init+0x64>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80002ca:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <MX_SPI1_Init+0x64>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80002d0:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <MX_SPI1_Init+0x64>)
 80002d2:	2238      	movs	r2, #56	; 0x38
 80002d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002d6:	4b0b      	ldr	r3, [pc, #44]	; (8000304 <MX_SPI1_Init+0x64>)
 80002d8:	2200      	movs	r2, #0
 80002da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002dc:	4b09      	ldr	r3, [pc, #36]	; (8000304 <MX_SPI1_Init+0x64>)
 80002de:	2200      	movs	r2, #0
 80002e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002e2:	4b08      	ldr	r3, [pc, #32]	; (8000304 <MX_SPI1_Init+0x64>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <MX_SPI1_Init+0x64>)
 80002ea:	220a      	movs	r2, #10
 80002ec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002ee:	4805      	ldr	r0, [pc, #20]	; (8000304 <MX_SPI1_Init+0x64>)
 80002f0:	f001 fa94 	bl	800181c <HAL_SPI_Init>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 80002fa:	f000 f871 	bl	80003e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	2000002c 	.word	0x2000002c
 8000308:	40013000 	.word	0x40013000

0800030c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000312:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <MX_DMA_Init+0x38>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	4a0b      	ldr	r2, [pc, #44]	; (8000344 <MX_DMA_Init+0x38>)
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	6153      	str	r3, [r2, #20]
 800031e:	4b09      	ldr	r3, [pc, #36]	; (8000344 <MX_DMA_Init+0x38>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800032a:	2200      	movs	r2, #0
 800032c:	2100      	movs	r1, #0
 800032e:	200c      	movs	r0, #12
 8000330:	f000 fab1 	bl	8000896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000334:	200c      	movs	r0, #12
 8000336:	f000 faca 	bl	80008ce <HAL_NVIC_EnableIRQ>

}
 800033a:	bf00      	nop
 800033c:	3708      	adds	r7, #8
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40021000 	.word	0x40021000

08000348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b088      	sub	sp, #32
 800034c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034e:	f107 0310 	add.w	r3, r7, #16
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]
 800035a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800035c:	4b1e      	ldr	r3, [pc, #120]	; (80003d8 <MX_GPIO_Init+0x90>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a1d      	ldr	r2, [pc, #116]	; (80003d8 <MX_GPIO_Init+0x90>)
 8000362:	f043 0310 	orr.w	r3, r3, #16
 8000366:	6193      	str	r3, [r2, #24]
 8000368:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <MX_GPIO_Init+0x90>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	f003 0310 	and.w	r3, r3, #16
 8000370:	60fb      	str	r3, [r7, #12]
 8000372:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000374:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <MX_GPIO_Init+0x90>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a17      	ldr	r2, [pc, #92]	; (80003d8 <MX_GPIO_Init+0x90>)
 800037a:	f043 0320 	orr.w	r3, r3, #32
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <MX_GPIO_Init+0x90>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0320 	and.w	r3, r3, #32
 8000388:	60bb      	str	r3, [r7, #8]
 800038a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038c:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <MX_GPIO_Init+0x90>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a11      	ldr	r2, [pc, #68]	; (80003d8 <MX_GPIO_Init+0x90>)
 8000392:	f043 0304 	orr.w	r3, r3, #4
 8000396:	6193      	str	r3, [r2, #24]
 8000398:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <MX_GPIO_Init+0x90>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f003 0304 	and.w	r3, r3, #4
 80003a0:	607b      	str	r3, [r7, #4]
 80003a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003aa:	480c      	ldr	r0, [pc, #48]	; (80003dc <MX_GPIO_Init+0x94>)
 80003ac:	f000 fe1c 	bl	8000fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b6:	2301      	movs	r3, #1
 80003b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ba:	2300      	movs	r3, #0
 80003bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003be:	2302      	movs	r3, #2
 80003c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003c2:	f107 0310 	add.w	r3, r7, #16
 80003c6:	4619      	mov	r1, r3
 80003c8:	4804      	ldr	r0, [pc, #16]	; (80003dc <MX_GPIO_Init+0x94>)
 80003ca:	f000 fc89 	bl	8000ce0 <HAL_GPIO_Init>

}
 80003ce:	bf00      	nop
 80003d0:	3720      	adds	r7, #32
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000
 80003dc:	40011000 	.word	0x40011000

080003e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e4:	b672      	cpsid	i
}
 80003e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <Error_Handler+0x8>
	...

080003ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003f2:	4b15      	ldr	r3, [pc, #84]	; (8000448 <HAL_MspInit+0x5c>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	4a14      	ldr	r2, [pc, #80]	; (8000448 <HAL_MspInit+0x5c>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6193      	str	r3, [r2, #24]
 80003fe:	4b12      	ldr	r3, [pc, #72]	; (8000448 <HAL_MspInit+0x5c>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	60bb      	str	r3, [r7, #8]
 8000408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040a:	4b0f      	ldr	r3, [pc, #60]	; (8000448 <HAL_MspInit+0x5c>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	4a0e      	ldr	r2, [pc, #56]	; (8000448 <HAL_MspInit+0x5c>)
 8000410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000414:	61d3      	str	r3, [r2, #28]
 8000416:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <HAL_MspInit+0x5c>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000422:	4b0a      	ldr	r3, [pc, #40]	; (800044c <HAL_MspInit+0x60>)
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <HAL_MspInit+0x60>)
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800043e:	bf00      	nop
 8000440:	3714      	adds	r7, #20
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr
 8000448:	40021000 	.word	0x40021000
 800044c:	40010000 	.word	0x40010000

08000450 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b088      	sub	sp, #32
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000458:	f107 0310 	add.w	r3, r7, #16
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	605a      	str	r2, [r3, #4]
 8000462:	609a      	str	r2, [r3, #8]
 8000464:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a28      	ldr	r2, [pc, #160]	; (800050c <HAL_SPI_MspInit+0xbc>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d149      	bne.n	8000504 <HAL_SPI_MspInit+0xb4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000470:	4b27      	ldr	r3, [pc, #156]	; (8000510 <HAL_SPI_MspInit+0xc0>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a26      	ldr	r2, [pc, #152]	; (8000510 <HAL_SPI_MspInit+0xc0>)
 8000476:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b24      	ldr	r3, [pc, #144]	; (8000510 <HAL_SPI_MspInit+0xc0>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000484:	60fb      	str	r3, [r7, #12]
 8000486:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000488:	4b21      	ldr	r3, [pc, #132]	; (8000510 <HAL_SPI_MspInit+0xc0>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a20      	ldr	r2, [pc, #128]	; (8000510 <HAL_SPI_MspInit+0xc0>)
 800048e:	f043 0304 	orr.w	r3, r3, #4
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b1e      	ldr	r3, [pc, #120]	; (8000510 <HAL_SPI_MspInit+0xc0>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f003 0304 	and.w	r3, r3, #4
 800049c:	60bb      	str	r3, [r7, #8]
 800049e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80004a0:	23b0      	movs	r3, #176	; 0xb0
 80004a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004a4:	2300      	movs	r3, #0
 80004a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a8:	2300      	movs	r3, #0
 80004aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ac:	f107 0310 	add.w	r3, r7, #16
 80004b0:	4619      	mov	r1, r3
 80004b2:	4818      	ldr	r0, [pc, #96]	; (8000514 <HAL_SPI_MspInit+0xc4>)
 80004b4:	f000 fc14 	bl	8000ce0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80004b8:	4b17      	ldr	r3, [pc, #92]	; (8000518 <HAL_SPI_MspInit+0xc8>)
 80004ba:	4a18      	ldr	r2, [pc, #96]	; (800051c <HAL_SPI_MspInit+0xcc>)
 80004bc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004be:	4b16      	ldr	r3, [pc, #88]	; (8000518 <HAL_SPI_MspInit+0xc8>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80004c4:	4b14      	ldr	r3, [pc, #80]	; (8000518 <HAL_SPI_MspInit+0xc8>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80004ca:	4b13      	ldr	r3, [pc, #76]	; (8000518 <HAL_SPI_MspInit+0xc8>)
 80004cc:	2280      	movs	r2, #128	; 0x80
 80004ce:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80004d0:	4b11      	ldr	r3, [pc, #68]	; (8000518 <HAL_SPI_MspInit+0xc8>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80004d6:	4b10      	ldr	r3, [pc, #64]	; (8000518 <HAL_SPI_MspInit+0xc8>)
 80004d8:	2200      	movs	r2, #0
 80004da:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_SPI_MspInit+0xc8>)
 80004de:	2200      	movs	r2, #0
 80004e0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80004e2:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <HAL_SPI_MspInit+0xc8>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80004e8:	480b      	ldr	r0, [pc, #44]	; (8000518 <HAL_SPI_MspInit+0xc8>)
 80004ea:	f000 fa0b 	bl	8000904 <HAL_DMA_Init>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 80004f4:	f7ff ff74 	bl	80003e0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4a07      	ldr	r2, [pc, #28]	; (8000518 <HAL_SPI_MspInit+0xc8>)
 80004fc:	64da      	str	r2, [r3, #76]	; 0x4c
 80004fe:	4a06      	ldr	r2, [pc, #24]	; (8000518 <HAL_SPI_MspInit+0xc8>)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000504:	bf00      	nop
 8000506:	3720      	adds	r7, #32
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40013000 	.word	0x40013000
 8000510:	40021000 	.word	0x40021000
 8000514:	40010800 	.word	0x40010800
 8000518:	20000084 	.word	0x20000084
 800051c:	4002001c 	.word	0x4002001c

08000520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000524:	e7fe      	b.n	8000524 <NMI_Handler+0x4>

08000526 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800052a:	e7fe      	b.n	800052a <HardFault_Handler+0x4>

0800052c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000530:	e7fe      	b.n	8000530 <MemManage_Handler+0x4>

08000532 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000536:	e7fe      	b.n	8000536 <BusFault_Handler+0x4>

08000538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800053c:	e7fe      	b.n	800053c <UsageFault_Handler+0x4>

0800053e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr

0800054a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr

08000556 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800055a:	bf00      	nop
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr

08000562 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000562:	b580      	push	{r7, lr}
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000566:	f000 f87f 	bl	8000668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000574:	4802      	ldr	r0, [pc, #8]	; (8000580 <DMA1_Channel2_IRQHandler+0x10>)
 8000576:	f000 fa7f 	bl	8000a78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000084 	.word	0x20000084

08000584 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000590:	480c      	ldr	r0, [pc, #48]	; (80005c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000592:	490d      	ldr	r1, [pc, #52]	; (80005c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000594:	4a0d      	ldr	r2, [pc, #52]	; (80005cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000598:	e002      	b.n	80005a0 <LoopCopyDataInit>

0800059a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800059c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059e:	3304      	adds	r3, #4

080005a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a4:	d3f9      	bcc.n	800059a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a6:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005a8:	4c0a      	ldr	r4, [pc, #40]	; (80005d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005ac:	e001      	b.n	80005b2 <LoopFillZerobss>

080005ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b0:	3204      	adds	r2, #4

080005b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b4:	d3fb      	bcc.n	80005ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005b6:	f7ff ffe5 	bl	8000584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ba:	f001 fd6f 	bl	800209c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005be:	f7ff fe01 	bl	80001c4 <main>
  bx lr
 80005c2:	4770      	bx	lr
  ldr r0, =_sdata
 80005c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005cc:	08002134 	.word	0x08002134
  ldr r2, =_sbss
 80005d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005d4:	200000cc 	.word	0x200000cc

080005d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d8:	e7fe      	b.n	80005d8 <ADC1_2_IRQHandler>
	...

080005dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <HAL_Init+0x28>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a07      	ldr	r2, [pc, #28]	; (8000604 <HAL_Init+0x28>)
 80005e6:	f043 0310 	orr.w	r3, r3, #16
 80005ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ec:	2003      	movs	r0, #3
 80005ee:	f000 f947 	bl	8000880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005f2:	200f      	movs	r0, #15
 80005f4:	f000 f808 	bl	8000608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f8:	f7ff fef8 	bl	80003ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005fc:	2300      	movs	r3, #0
}
 80005fe:	4618      	mov	r0, r3
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40022000 	.word	0x40022000

08000608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_InitTick+0x54>)
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <HAL_InitTick+0x58>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	4619      	mov	r1, r3
 800061a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000622:	fbb2 f3f3 	udiv	r3, r2, r3
 8000626:	4618      	mov	r0, r3
 8000628:	f000 f95f 	bl	80008ea <HAL_SYSTICK_Config>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000632:	2301      	movs	r3, #1
 8000634:	e00e      	b.n	8000654 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2b0f      	cmp	r3, #15
 800063a:	d80a      	bhi.n	8000652 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800063c:	2200      	movs	r2, #0
 800063e:	6879      	ldr	r1, [r7, #4]
 8000640:	f04f 30ff 	mov.w	r0, #4294967295
 8000644:	f000 f927 	bl	8000896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000648:	4a06      	ldr	r2, [pc, #24]	; (8000664 <HAL_InitTick+0x5c>)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800064e:	2300      	movs	r3, #0
 8000650:	e000      	b.n	8000654 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000652:	2301      	movs	r3, #1
}
 8000654:	4618      	mov	r0, r3
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000000 	.word	0x20000000
 8000660:	20000008 	.word	0x20000008
 8000664:	20000004 	.word	0x20000004

08000668 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <HAL_IncTick+0x1c>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	461a      	mov	r2, r3
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <HAL_IncTick+0x20>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4413      	add	r3, r2
 8000678:	4a03      	ldr	r2, [pc, #12]	; (8000688 <HAL_IncTick+0x20>)
 800067a:	6013      	str	r3, [r2, #0]
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	20000008 	.word	0x20000008
 8000688:	200000c8 	.word	0x200000c8

0800068c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  return uwTick;
 8000690:	4b02      	ldr	r3, [pc, #8]	; (800069c <HAL_GetTick+0x10>)
 8000692:	681b      	ldr	r3, [r3, #0]
}
 8000694:	4618      	mov	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr
 800069c:	200000c8 	.word	0x200000c8

080006a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006a8:	f7ff fff0 	bl	800068c <HAL_GetTick>
 80006ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006b8:	d005      	beq.n	80006c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006ba:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <HAL_Delay+0x44>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	461a      	mov	r2, r3
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	4413      	add	r3, r2
 80006c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006c6:	bf00      	nop
 80006c8:	f7ff ffe0 	bl	800068c <HAL_GetTick>
 80006cc:	4602      	mov	r2, r0
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	68fa      	ldr	r2, [r7, #12]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d8f7      	bhi.n	80006c8 <HAL_Delay+0x28>
  {
  }
}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000008 	.word	0x20000008

080006e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <__NVIC_SetPriorityGrouping+0x44>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006fe:	68ba      	ldr	r2, [r7, #8]
 8000700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000704:	4013      	ands	r3, r2
 8000706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800071a:	4a04      	ldr	r2, [pc, #16]	; (800072c <__NVIC_SetPriorityGrouping+0x44>)
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	60d3      	str	r3, [r2, #12]
}
 8000720:	bf00      	nop
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <__NVIC_GetPriorityGrouping+0x18>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	0a1b      	lsrs	r3, r3, #8
 800073a:	f003 0307 	and.w	r3, r3, #7
}
 800073e:	4618      	mov	r0, r3
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	2b00      	cmp	r3, #0
 800075c:	db0b      	blt.n	8000776 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	f003 021f 	and.w	r2, r3, #31
 8000764:	4906      	ldr	r1, [pc, #24]	; (8000780 <__NVIC_EnableIRQ+0x34>)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	095b      	lsrs	r3, r3, #5
 800076c:	2001      	movs	r0, #1
 800076e:	fa00 f202 	lsl.w	r2, r0, r2
 8000772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr
 8000780:	e000e100 	.word	0xe000e100

08000784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	6039      	str	r1, [r7, #0]
 800078e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000794:	2b00      	cmp	r3, #0
 8000796:	db0a      	blt.n	80007ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	b2da      	uxtb	r2, r3
 800079c:	490c      	ldr	r1, [pc, #48]	; (80007d0 <__NVIC_SetPriority+0x4c>)
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	0112      	lsls	r2, r2, #4
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	440b      	add	r3, r1
 80007a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007ac:	e00a      	b.n	80007c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4908      	ldr	r1, [pc, #32]	; (80007d4 <__NVIC_SetPriority+0x50>)
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	f003 030f 	and.w	r3, r3, #15
 80007ba:	3b04      	subs	r3, #4
 80007bc:	0112      	lsls	r2, r2, #4
 80007be:	b2d2      	uxtb	r2, r2
 80007c0:	440b      	add	r3, r1
 80007c2:	761a      	strb	r2, [r3, #24]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000e100 	.word	0xe000e100
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d8:	b480      	push	{r7}
 80007da:	b089      	sub	sp, #36	; 0x24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	f1c3 0307 	rsb	r3, r3, #7
 80007f2:	2b04      	cmp	r3, #4
 80007f4:	bf28      	it	cs
 80007f6:	2304      	movcs	r3, #4
 80007f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3304      	adds	r3, #4
 80007fe:	2b06      	cmp	r3, #6
 8000800:	d902      	bls.n	8000808 <NVIC_EncodePriority+0x30>
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	3b03      	subs	r3, #3
 8000806:	e000      	b.n	800080a <NVIC_EncodePriority+0x32>
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	f04f 32ff 	mov.w	r2, #4294967295
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	43da      	mvns	r2, r3
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	401a      	ands	r2, r3
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000820:	f04f 31ff 	mov.w	r1, #4294967295
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	fa01 f303 	lsl.w	r3, r1, r3
 800082a:	43d9      	mvns	r1, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000830:	4313      	orrs	r3, r2
         );
}
 8000832:	4618      	mov	r0, r3
 8000834:	3724      	adds	r7, #36	; 0x24
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3b01      	subs	r3, #1
 8000848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800084c:	d301      	bcc.n	8000852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800084e:	2301      	movs	r3, #1
 8000850:	e00f      	b.n	8000872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <SysTick_Config+0x40>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3b01      	subs	r3, #1
 8000858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085a:	210f      	movs	r1, #15
 800085c:	f04f 30ff 	mov.w	r0, #4294967295
 8000860:	f7ff ff90 	bl	8000784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <SysTick_Config+0x40>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <SysTick_Config+0x40>)
 800086c:	2207      	movs	r2, #7
 800086e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	e000e010 	.word	0xe000e010

08000880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff ff2d 	bl	80006e8 <__NVIC_SetPriorityGrouping>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000896:	b580      	push	{r7, lr}
 8000898:	b086      	sub	sp, #24
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
 80008a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008a8:	f7ff ff42 	bl	8000730 <__NVIC_GetPriorityGrouping>
 80008ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	68b9      	ldr	r1, [r7, #8]
 80008b2:	6978      	ldr	r0, [r7, #20]
 80008b4:	f7ff ff90 	bl	80007d8 <NVIC_EncodePriority>
 80008b8:	4602      	mov	r2, r0
 80008ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008be:	4611      	mov	r1, r2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff5f 	bl	8000784 <__NVIC_SetPriority>
}
 80008c6:	bf00      	nop
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	4603      	mov	r3, r0
 80008d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff35 	bl	800074c <__NVIC_EnableIRQ>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff ffa2 	bl	800083c <SysTick_Config>
 80008f8:	4603      	mov	r3, r0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d101      	bne.n	800091a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	e043      	b.n	80009a2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	461a      	mov	r2, r3
 8000920:	4b22      	ldr	r3, [pc, #136]	; (80009ac <HAL_DMA_Init+0xa8>)
 8000922:	4413      	add	r3, r2
 8000924:	4a22      	ldr	r2, [pc, #136]	; (80009b0 <HAL_DMA_Init+0xac>)
 8000926:	fba2 2303 	umull	r2, r3, r2, r3
 800092a:	091b      	lsrs	r3, r3, #4
 800092c:	009a      	lsls	r2, r3, #2
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a1f      	ldr	r2, [pc, #124]	; (80009b4 <HAL_DMA_Init+0xb0>)
 8000936:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2202      	movs	r2, #2
 800093c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800094e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000952:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800095c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	68db      	ldr	r3, [r3, #12]
 8000962:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000968:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000974:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	4313      	orrs	r3, r2
 8000980:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	68fa      	ldr	r2, [r7, #12]
 8000988:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2200      	movs	r2, #0
 800098e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2201      	movs	r2, #1
 8000994:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	bffdfff8 	.word	0xbffdfff8
 80009b0:	cccccccd 	.word	0xcccccccd
 80009b4:	40020000 	.word	0x40020000

080009b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
 80009c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80009c6:	2300      	movs	r3, #0
 80009c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d101      	bne.n	80009d8 <HAL_DMA_Start_IT+0x20>
 80009d4:	2302      	movs	r3, #2
 80009d6:	e04a      	b.n	8000a6e <HAL_DMA_Start_IT+0xb6>
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	2201      	movs	r2, #1
 80009dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d13a      	bne.n	8000a60 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	2202      	movs	r2, #2
 80009ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	2200      	movs	r2, #0
 80009f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f022 0201 	bic.w	r2, r2, #1
 8000a06:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	68b9      	ldr	r1, [r7, #8]
 8000a0e:	68f8      	ldr	r0, [r7, #12]
 8000a10:	f000 f938 	bl	8000c84 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d008      	beq.n	8000a2e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f042 020e 	orr.w	r2, r2, #14
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	e00f      	b.n	8000a4e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f022 0204 	bic.w	r2, r2, #4
 8000a3c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f042 020a 	orr.w	r2, r2, #10
 8000a4c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f042 0201 	orr.w	r2, r2, #1
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	e005      	b.n	8000a6c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2200      	movs	r2, #0
 8000a64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	2204      	movs	r2, #4
 8000a96:	409a      	lsls	r2, r3
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d04f      	beq.n	8000b40 <HAL_DMA_IRQHandler+0xc8>
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	f003 0304 	and.w	r3, r3, #4
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d04a      	beq.n	8000b40 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f003 0320 	and.w	r3, r3, #32
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d107      	bne.n	8000ac8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f022 0204 	bic.w	r2, r2, #4
 8000ac6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a66      	ldr	r2, [pc, #408]	; (8000c68 <HAL_DMA_IRQHandler+0x1f0>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d029      	beq.n	8000b26 <HAL_DMA_IRQHandler+0xae>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a65      	ldr	r2, [pc, #404]	; (8000c6c <HAL_DMA_IRQHandler+0x1f4>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d022      	beq.n	8000b22 <HAL_DMA_IRQHandler+0xaa>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a63      	ldr	r2, [pc, #396]	; (8000c70 <HAL_DMA_IRQHandler+0x1f8>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d01a      	beq.n	8000b1c <HAL_DMA_IRQHandler+0xa4>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a62      	ldr	r2, [pc, #392]	; (8000c74 <HAL_DMA_IRQHandler+0x1fc>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d012      	beq.n	8000b16 <HAL_DMA_IRQHandler+0x9e>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a60      	ldr	r2, [pc, #384]	; (8000c78 <HAL_DMA_IRQHandler+0x200>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d00a      	beq.n	8000b10 <HAL_DMA_IRQHandler+0x98>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a5f      	ldr	r2, [pc, #380]	; (8000c7c <HAL_DMA_IRQHandler+0x204>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d102      	bne.n	8000b0a <HAL_DMA_IRQHandler+0x92>
 8000b04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b08:	e00e      	b.n	8000b28 <HAL_DMA_IRQHandler+0xb0>
 8000b0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000b0e:	e00b      	b.n	8000b28 <HAL_DMA_IRQHandler+0xb0>
 8000b10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000b14:	e008      	b.n	8000b28 <HAL_DMA_IRQHandler+0xb0>
 8000b16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b1a:	e005      	b.n	8000b28 <HAL_DMA_IRQHandler+0xb0>
 8000b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b20:	e002      	b.n	8000b28 <HAL_DMA_IRQHandler+0xb0>
 8000b22:	2340      	movs	r3, #64	; 0x40
 8000b24:	e000      	b.n	8000b28 <HAL_DMA_IRQHandler+0xb0>
 8000b26:	2304      	movs	r3, #4
 8000b28:	4a55      	ldr	r2, [pc, #340]	; (8000c80 <HAL_DMA_IRQHandler+0x208>)
 8000b2a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	f000 8094 	beq.w	8000c5e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000b3e:	e08e      	b.n	8000c5e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	2202      	movs	r2, #2
 8000b46:	409a      	lsls	r2, r3
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d056      	beq.n	8000bfe <HAL_DMA_IRQHandler+0x186>
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d051      	beq.n	8000bfe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f003 0320 	and.w	r3, r3, #32
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d10b      	bne.n	8000b80 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f022 020a 	bic.w	r2, r2, #10
 8000b76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a38      	ldr	r2, [pc, #224]	; (8000c68 <HAL_DMA_IRQHandler+0x1f0>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d029      	beq.n	8000bde <HAL_DMA_IRQHandler+0x166>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a37      	ldr	r2, [pc, #220]	; (8000c6c <HAL_DMA_IRQHandler+0x1f4>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d022      	beq.n	8000bda <HAL_DMA_IRQHandler+0x162>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a35      	ldr	r2, [pc, #212]	; (8000c70 <HAL_DMA_IRQHandler+0x1f8>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d01a      	beq.n	8000bd4 <HAL_DMA_IRQHandler+0x15c>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a34      	ldr	r2, [pc, #208]	; (8000c74 <HAL_DMA_IRQHandler+0x1fc>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d012      	beq.n	8000bce <HAL_DMA_IRQHandler+0x156>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a32      	ldr	r2, [pc, #200]	; (8000c78 <HAL_DMA_IRQHandler+0x200>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d00a      	beq.n	8000bc8 <HAL_DMA_IRQHandler+0x150>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a31      	ldr	r2, [pc, #196]	; (8000c7c <HAL_DMA_IRQHandler+0x204>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d102      	bne.n	8000bc2 <HAL_DMA_IRQHandler+0x14a>
 8000bbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000bc0:	e00e      	b.n	8000be0 <HAL_DMA_IRQHandler+0x168>
 8000bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bc6:	e00b      	b.n	8000be0 <HAL_DMA_IRQHandler+0x168>
 8000bc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bcc:	e008      	b.n	8000be0 <HAL_DMA_IRQHandler+0x168>
 8000bce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd2:	e005      	b.n	8000be0 <HAL_DMA_IRQHandler+0x168>
 8000bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bd8:	e002      	b.n	8000be0 <HAL_DMA_IRQHandler+0x168>
 8000bda:	2320      	movs	r3, #32
 8000bdc:	e000      	b.n	8000be0 <HAL_DMA_IRQHandler+0x168>
 8000bde:	2302      	movs	r3, #2
 8000be0:	4a27      	ldr	r2, [pc, #156]	; (8000c80 <HAL_DMA_IRQHandler+0x208>)
 8000be2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2200      	movs	r2, #0
 8000be8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d034      	beq.n	8000c5e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000bfc:	e02f      	b.n	8000c5e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	2208      	movs	r2, #8
 8000c04:	409a      	lsls	r2, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d028      	beq.n	8000c60 <HAL_DMA_IRQHandler+0x1e8>
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	f003 0308 	and.w	r3, r3, #8
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d023      	beq.n	8000c60 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f022 020e 	bic.w	r2, r2, #14
 8000c26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c30:	2101      	movs	r1, #1
 8000c32:	fa01 f202 	lsl.w	r2, r1, r2
 8000c36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2201      	movs	r2, #1
 8000c42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d004      	beq.n	8000c60 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	4798      	blx	r3
    }
  }
  return;
 8000c5e:	bf00      	nop
 8000c60:	bf00      	nop
}
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40020008 	.word	0x40020008
 8000c6c:	4002001c 	.word	0x4002001c
 8000c70:	40020030 	.word	0x40020030
 8000c74:	40020044 	.word	0x40020044
 8000c78:	40020058 	.word	0x40020058
 8000c7c:	4002006c 	.word	0x4002006c
 8000c80:	40020000 	.word	0x40020000

08000c84 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
 8000c90:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	683a      	ldr	r2, [r7, #0]
 8000ca8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2b10      	cmp	r3, #16
 8000cb0:	d108      	bne.n	8000cc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000cc2:	e007      	b.n	8000cd4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	60da      	str	r2, [r3, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr
	...

08000ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b08b      	sub	sp, #44	; 0x2c
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf2:	e169      	b.n	8000fc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	69fa      	ldr	r2, [r7, #28]
 8000d04:	4013      	ands	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	f040 8158 	bne.w	8000fc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	4a9a      	ldr	r2, [pc, #616]	; (8000f80 <HAL_GPIO_Init+0x2a0>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d05e      	beq.n	8000dda <HAL_GPIO_Init+0xfa>
 8000d1c:	4a98      	ldr	r2, [pc, #608]	; (8000f80 <HAL_GPIO_Init+0x2a0>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d875      	bhi.n	8000e0e <HAL_GPIO_Init+0x12e>
 8000d22:	4a98      	ldr	r2, [pc, #608]	; (8000f84 <HAL_GPIO_Init+0x2a4>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d058      	beq.n	8000dda <HAL_GPIO_Init+0xfa>
 8000d28:	4a96      	ldr	r2, [pc, #600]	; (8000f84 <HAL_GPIO_Init+0x2a4>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d86f      	bhi.n	8000e0e <HAL_GPIO_Init+0x12e>
 8000d2e:	4a96      	ldr	r2, [pc, #600]	; (8000f88 <HAL_GPIO_Init+0x2a8>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d052      	beq.n	8000dda <HAL_GPIO_Init+0xfa>
 8000d34:	4a94      	ldr	r2, [pc, #592]	; (8000f88 <HAL_GPIO_Init+0x2a8>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d869      	bhi.n	8000e0e <HAL_GPIO_Init+0x12e>
 8000d3a:	4a94      	ldr	r2, [pc, #592]	; (8000f8c <HAL_GPIO_Init+0x2ac>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d04c      	beq.n	8000dda <HAL_GPIO_Init+0xfa>
 8000d40:	4a92      	ldr	r2, [pc, #584]	; (8000f8c <HAL_GPIO_Init+0x2ac>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d863      	bhi.n	8000e0e <HAL_GPIO_Init+0x12e>
 8000d46:	4a92      	ldr	r2, [pc, #584]	; (8000f90 <HAL_GPIO_Init+0x2b0>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d046      	beq.n	8000dda <HAL_GPIO_Init+0xfa>
 8000d4c:	4a90      	ldr	r2, [pc, #576]	; (8000f90 <HAL_GPIO_Init+0x2b0>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d85d      	bhi.n	8000e0e <HAL_GPIO_Init+0x12e>
 8000d52:	2b12      	cmp	r3, #18
 8000d54:	d82a      	bhi.n	8000dac <HAL_GPIO_Init+0xcc>
 8000d56:	2b12      	cmp	r3, #18
 8000d58:	d859      	bhi.n	8000e0e <HAL_GPIO_Init+0x12e>
 8000d5a:	a201      	add	r2, pc, #4	; (adr r2, 8000d60 <HAL_GPIO_Init+0x80>)
 8000d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d60:	08000ddb 	.word	0x08000ddb
 8000d64:	08000db5 	.word	0x08000db5
 8000d68:	08000dc7 	.word	0x08000dc7
 8000d6c:	08000e09 	.word	0x08000e09
 8000d70:	08000e0f 	.word	0x08000e0f
 8000d74:	08000e0f 	.word	0x08000e0f
 8000d78:	08000e0f 	.word	0x08000e0f
 8000d7c:	08000e0f 	.word	0x08000e0f
 8000d80:	08000e0f 	.word	0x08000e0f
 8000d84:	08000e0f 	.word	0x08000e0f
 8000d88:	08000e0f 	.word	0x08000e0f
 8000d8c:	08000e0f 	.word	0x08000e0f
 8000d90:	08000e0f 	.word	0x08000e0f
 8000d94:	08000e0f 	.word	0x08000e0f
 8000d98:	08000e0f 	.word	0x08000e0f
 8000d9c:	08000e0f 	.word	0x08000e0f
 8000da0:	08000e0f 	.word	0x08000e0f
 8000da4:	08000dbd 	.word	0x08000dbd
 8000da8:	08000dd1 	.word	0x08000dd1
 8000dac:	4a79      	ldr	r2, [pc, #484]	; (8000f94 <HAL_GPIO_Init+0x2b4>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d013      	beq.n	8000dda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000db2:	e02c      	b.n	8000e0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	623b      	str	r3, [r7, #32]
          break;
 8000dba:	e029      	b.n	8000e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	623b      	str	r3, [r7, #32]
          break;
 8000dc4:	e024      	b.n	8000e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	3308      	adds	r3, #8
 8000dcc:	623b      	str	r3, [r7, #32]
          break;
 8000dce:	e01f      	b.n	8000e10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	330c      	adds	r3, #12
 8000dd6:	623b      	str	r3, [r7, #32]
          break;
 8000dd8:	e01a      	b.n	8000e10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d102      	bne.n	8000de8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000de2:	2304      	movs	r3, #4
 8000de4:	623b      	str	r3, [r7, #32]
          break;
 8000de6:	e013      	b.n	8000e10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d105      	bne.n	8000dfc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000df0:	2308      	movs	r3, #8
 8000df2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	69fa      	ldr	r2, [r7, #28]
 8000df8:	611a      	str	r2, [r3, #16]
          break;
 8000dfa:	e009      	b.n	8000e10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dfc:	2308      	movs	r3, #8
 8000dfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69fa      	ldr	r2, [r7, #28]
 8000e04:	615a      	str	r2, [r3, #20]
          break;
 8000e06:	e003      	b.n	8000e10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	623b      	str	r3, [r7, #32]
          break;
 8000e0c:	e000      	b.n	8000e10 <HAL_GPIO_Init+0x130>
          break;
 8000e0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	2bff      	cmp	r3, #255	; 0xff
 8000e14:	d801      	bhi.n	8000e1a <HAL_GPIO_Init+0x13a>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	e001      	b.n	8000e1e <HAL_GPIO_Init+0x13e>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	2bff      	cmp	r3, #255	; 0xff
 8000e24:	d802      	bhi.n	8000e2c <HAL_GPIO_Init+0x14c>
 8000e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	e002      	b.n	8000e32 <HAL_GPIO_Init+0x152>
 8000e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2e:	3b08      	subs	r3, #8
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	210f      	movs	r1, #15
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	401a      	ands	r2, r3
 8000e44:	6a39      	ldr	r1, [r7, #32]
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 80b1 	beq.w	8000fc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e60:	4b4d      	ldr	r3, [pc, #308]	; (8000f98 <HAL_GPIO_Init+0x2b8>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a4c      	ldr	r2, [pc, #304]	; (8000f98 <HAL_GPIO_Init+0x2b8>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b4a      	ldr	r3, [pc, #296]	; (8000f98 <HAL_GPIO_Init+0x2b8>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e78:	4a48      	ldr	r2, [pc, #288]	; (8000f9c <HAL_GPIO_Init+0x2bc>)
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	089b      	lsrs	r3, r3, #2
 8000e7e:	3302      	adds	r3, #2
 8000e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	f003 0303 	and.w	r3, r3, #3
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	220f      	movs	r2, #15
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a40      	ldr	r2, [pc, #256]	; (8000fa0 <HAL_GPIO_Init+0x2c0>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d013      	beq.n	8000ecc <HAL_GPIO_Init+0x1ec>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a3f      	ldr	r2, [pc, #252]	; (8000fa4 <HAL_GPIO_Init+0x2c4>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d00d      	beq.n	8000ec8 <HAL_GPIO_Init+0x1e8>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a3e      	ldr	r2, [pc, #248]	; (8000fa8 <HAL_GPIO_Init+0x2c8>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d007      	beq.n	8000ec4 <HAL_GPIO_Init+0x1e4>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a3d      	ldr	r2, [pc, #244]	; (8000fac <HAL_GPIO_Init+0x2cc>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d101      	bne.n	8000ec0 <HAL_GPIO_Init+0x1e0>
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e006      	b.n	8000ece <HAL_GPIO_Init+0x1ee>
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	e004      	b.n	8000ece <HAL_GPIO_Init+0x1ee>
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	e002      	b.n	8000ece <HAL_GPIO_Init+0x1ee>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e000      	b.n	8000ece <HAL_GPIO_Init+0x1ee>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ed0:	f002 0203 	and.w	r2, r2, #3
 8000ed4:	0092      	lsls	r2, r2, #2
 8000ed6:	4093      	lsls	r3, r2
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ede:	492f      	ldr	r1, [pc, #188]	; (8000f9c <HAL_GPIO_Init+0x2bc>)
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d006      	beq.n	8000f06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ef8:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	492c      	ldr	r1, [pc, #176]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	600b      	str	r3, [r1, #0]
 8000f04:	e006      	b.n	8000f14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f06:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	4928      	ldr	r1, [pc, #160]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f10:	4013      	ands	r3, r2
 8000f12:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d006      	beq.n	8000f2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f20:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	4922      	ldr	r1, [pc, #136]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	604b      	str	r3, [r1, #4]
 8000f2c:	e006      	b.n	8000f3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f2e:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	491e      	ldr	r1, [pc, #120]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f38:	4013      	ands	r3, r2
 8000f3a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d006      	beq.n	8000f56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f48:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	4918      	ldr	r1, [pc, #96]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	608b      	str	r3, [r1, #8]
 8000f54:	e006      	b.n	8000f64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	4914      	ldr	r1, [pc, #80]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d021      	beq.n	8000fb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	490e      	ldr	r1, [pc, #56]	; (8000fb0 <HAL_GPIO_Init+0x2d0>)
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	60cb      	str	r3, [r1, #12]
 8000f7c:	e021      	b.n	8000fc2 <HAL_GPIO_Init+0x2e2>
 8000f7e:	bf00      	nop
 8000f80:	10320000 	.word	0x10320000
 8000f84:	10310000 	.word	0x10310000
 8000f88:	10220000 	.word	0x10220000
 8000f8c:	10210000 	.word	0x10210000
 8000f90:	10120000 	.word	0x10120000
 8000f94:	10110000 	.word	0x10110000
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010000 	.word	0x40010000
 8000fa0:	40010800 	.word	0x40010800
 8000fa4:	40010c00 	.word	0x40010c00
 8000fa8:	40011000 	.word	0x40011000
 8000fac:	40011400 	.word	0x40011400
 8000fb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <HAL_GPIO_Init+0x304>)
 8000fb6:	68da      	ldr	r2, [r3, #12]
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	4909      	ldr	r1, [pc, #36]	; (8000fe4 <HAL_GPIO_Init+0x304>)
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fce:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f47f ae8e 	bne.w	8000cf4 <HAL_GPIO_Init+0x14>
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	372c      	adds	r7, #44	; 0x2c
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr
 8000fe4:	40010400 	.word	0x40010400

08000fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ff8:	787b      	ldrb	r3, [r7, #1]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ffe:	887a      	ldrh	r2, [r7, #2]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001004:	e003      	b.n	800100e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001006:	887b      	ldrh	r3, [r7, #2]
 8001008:	041a      	lsls	r2, r3, #16
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	611a      	str	r2, [r3, #16]
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800102a:	887a      	ldrh	r2, [r7, #2]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4013      	ands	r3, r2
 8001030:	041a      	lsls	r2, r3, #16
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	43d9      	mvns	r1, r3
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	400b      	ands	r3, r1
 800103a:	431a      	orrs	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	611a      	str	r2, [r3, #16]
}
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
	...

0800104c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e26c      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 8087 	beq.w	800117a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800106c:	4b92      	ldr	r3, [pc, #584]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 030c 	and.w	r3, r3, #12
 8001074:	2b04      	cmp	r3, #4
 8001076:	d00c      	beq.n	8001092 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001078:	4b8f      	ldr	r3, [pc, #572]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 030c 	and.w	r3, r3, #12
 8001080:	2b08      	cmp	r3, #8
 8001082:	d112      	bne.n	80010aa <HAL_RCC_OscConfig+0x5e>
 8001084:	4b8c      	ldr	r3, [pc, #560]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001090:	d10b      	bne.n	80010aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001092:	4b89      	ldr	r3, [pc, #548]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d06c      	beq.n	8001178 <HAL_RCC_OscConfig+0x12c>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d168      	bne.n	8001178 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e246      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010b2:	d106      	bne.n	80010c2 <HAL_RCC_OscConfig+0x76>
 80010b4:	4b80      	ldr	r3, [pc, #512]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a7f      	ldr	r2, [pc, #508]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	e02e      	b.n	8001120 <HAL_RCC_OscConfig+0xd4>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d10c      	bne.n	80010e4 <HAL_RCC_OscConfig+0x98>
 80010ca:	4b7b      	ldr	r3, [pc, #492]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a7a      	ldr	r2, [pc, #488]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	4b78      	ldr	r3, [pc, #480]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a77      	ldr	r2, [pc, #476]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	e01d      	b.n	8001120 <HAL_RCC_OscConfig+0xd4>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010ec:	d10c      	bne.n	8001108 <HAL_RCC_OscConfig+0xbc>
 80010ee:	4b72      	ldr	r3, [pc, #456]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a71      	ldr	r2, [pc, #452]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	4b6f      	ldr	r3, [pc, #444]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a6e      	ldr	r2, [pc, #440]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	e00b      	b.n	8001120 <HAL_RCC_OscConfig+0xd4>
 8001108:	4b6b      	ldr	r3, [pc, #428]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a6a      	ldr	r2, [pc, #424]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800110e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	4b68      	ldr	r3, [pc, #416]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a67      	ldr	r2, [pc, #412]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800111a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800111e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d013      	beq.n	8001150 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001128:	f7ff fab0 	bl	800068c <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001130:	f7ff faac 	bl	800068c <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b64      	cmp	r3, #100	; 0x64
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e1fa      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001142:	4b5d      	ldr	r3, [pc, #372]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0f0      	beq.n	8001130 <HAL_RCC_OscConfig+0xe4>
 800114e:	e014      	b.n	800117a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fa9c 	bl	800068c <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001158:	f7ff fa98 	bl	800068c <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b64      	cmp	r3, #100	; 0x64
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e1e6      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116a:	4b53      	ldr	r3, [pc, #332]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x10c>
 8001176:	e000      	b.n	800117a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d063      	beq.n	800124e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001186:	4b4c      	ldr	r3, [pc, #304]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 030c 	and.w	r3, r3, #12
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00b      	beq.n	80011aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001192:	4b49      	ldr	r3, [pc, #292]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 030c 	and.w	r3, r3, #12
 800119a:	2b08      	cmp	r3, #8
 800119c:	d11c      	bne.n	80011d8 <HAL_RCC_OscConfig+0x18c>
 800119e:	4b46      	ldr	r3, [pc, #280]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d116      	bne.n	80011d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011aa:	4b43      	ldr	r3, [pc, #268]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d005      	beq.n	80011c2 <HAL_RCC_OscConfig+0x176>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d001      	beq.n	80011c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e1ba      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c2:	4b3d      	ldr	r3, [pc, #244]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	4939      	ldr	r1, [pc, #228]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d6:	e03a      	b.n	800124e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d020      	beq.n	8001222 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e0:	4b36      	ldr	r3, [pc, #216]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e6:	f7ff fa51 	bl	800068c <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ee:	f7ff fa4d 	bl	800068c <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e19b      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001200:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f0      	beq.n	80011ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120c:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	4927      	ldr	r1, [pc, #156]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800121c:	4313      	orrs	r3, r2
 800121e:	600b      	str	r3, [r1, #0]
 8001220:	e015      	b.n	800124e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001222:	4b26      	ldr	r3, [pc, #152]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fa30 	bl	800068c <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001230:	f7ff fa2c 	bl	800068c <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e17a      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001242:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f0      	bne.n	8001230 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	2b00      	cmp	r3, #0
 8001258:	d03a      	beq.n	80012d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d019      	beq.n	8001296 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <HAL_RCC_OscConfig+0x274>)
 8001264:	2201      	movs	r2, #1
 8001266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001268:	f7ff fa10 	bl	800068c <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001270:	f7ff fa0c 	bl	800068c <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e15a      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001282:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f0      	beq.n	8001270 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800128e:	2001      	movs	r0, #1
 8001290:	f000 faa6 	bl	80017e0 <RCC_Delay>
 8001294:	e01c      	b.n	80012d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <HAL_RCC_OscConfig+0x274>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129c:	f7ff f9f6 	bl	800068c <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a2:	e00f      	b.n	80012c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a4:	f7ff f9f2 	bl	800068c <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d908      	bls.n	80012c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e140      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000
 80012bc:	42420000 	.word	0x42420000
 80012c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c4:	4b9e      	ldr	r3, [pc, #632]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80012c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1e9      	bne.n	80012a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80a6 	beq.w	800142a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e2:	4b97      	ldr	r3, [pc, #604]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10d      	bne.n	800130a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	4b94      	ldr	r3, [pc, #592]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a93      	ldr	r2, [pc, #588]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80012f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f8:	61d3      	str	r3, [r2, #28]
 80012fa:	4b91      	ldr	r3, [pc, #580]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001306:	2301      	movs	r3, #1
 8001308:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130a:	4b8e      	ldr	r3, [pc, #568]	; (8001544 <HAL_RCC_OscConfig+0x4f8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001312:	2b00      	cmp	r3, #0
 8001314:	d118      	bne.n	8001348 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001316:	4b8b      	ldr	r3, [pc, #556]	; (8001544 <HAL_RCC_OscConfig+0x4f8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a8a      	ldr	r2, [pc, #552]	; (8001544 <HAL_RCC_OscConfig+0x4f8>)
 800131c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001322:	f7ff f9b3 	bl	800068c <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800132a:	f7ff f9af 	bl	800068c <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b64      	cmp	r3, #100	; 0x64
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e0fd      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133c:	4b81      	ldr	r3, [pc, #516]	; (8001544 <HAL_RCC_OscConfig+0x4f8>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0f0      	beq.n	800132a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d106      	bne.n	800135e <HAL_RCC_OscConfig+0x312>
 8001350:	4b7b      	ldr	r3, [pc, #492]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	4a7a      	ldr	r2, [pc, #488]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6213      	str	r3, [r2, #32]
 800135c:	e02d      	b.n	80013ba <HAL_RCC_OscConfig+0x36e>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10c      	bne.n	8001380 <HAL_RCC_OscConfig+0x334>
 8001366:	4b76      	ldr	r3, [pc, #472]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	4a75      	ldr	r2, [pc, #468]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	6213      	str	r3, [r2, #32]
 8001372:	4b73      	ldr	r3, [pc, #460]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	4a72      	ldr	r2, [pc, #456]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001378:	f023 0304 	bic.w	r3, r3, #4
 800137c:	6213      	str	r3, [r2, #32]
 800137e:	e01c      	b.n	80013ba <HAL_RCC_OscConfig+0x36e>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	2b05      	cmp	r3, #5
 8001386:	d10c      	bne.n	80013a2 <HAL_RCC_OscConfig+0x356>
 8001388:	4b6d      	ldr	r3, [pc, #436]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	4a6c      	ldr	r2, [pc, #432]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 800138e:	f043 0304 	orr.w	r3, r3, #4
 8001392:	6213      	str	r3, [r2, #32]
 8001394:	4b6a      	ldr	r3, [pc, #424]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	4a69      	ldr	r2, [pc, #420]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	6213      	str	r3, [r2, #32]
 80013a0:	e00b      	b.n	80013ba <HAL_RCC_OscConfig+0x36e>
 80013a2:	4b67      	ldr	r3, [pc, #412]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	4a66      	ldr	r2, [pc, #408]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80013a8:	f023 0301 	bic.w	r3, r3, #1
 80013ac:	6213      	str	r3, [r2, #32]
 80013ae:	4b64      	ldr	r3, [pc, #400]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	4a63      	ldr	r2, [pc, #396]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80013b4:	f023 0304 	bic.w	r3, r3, #4
 80013b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d015      	beq.n	80013ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c2:	f7ff f963 	bl	800068c <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c8:	e00a      	b.n	80013e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ca:	f7ff f95f 	bl	800068c <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d8:	4293      	cmp	r3, r2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e0ab      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e0:	4b57      	ldr	r3, [pc, #348]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0ee      	beq.n	80013ca <HAL_RCC_OscConfig+0x37e>
 80013ec:	e014      	b.n	8001418 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ee:	f7ff f94d 	bl	800068c <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f4:	e00a      	b.n	800140c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f6:	f7ff f949 	bl	800068c <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	f241 3288 	movw	r2, #5000	; 0x1388
 8001404:	4293      	cmp	r3, r2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e095      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800140c:	4b4c      	ldr	r3, [pc, #304]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1ee      	bne.n	80013f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001418:	7dfb      	ldrb	r3, [r7, #23]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d105      	bne.n	800142a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800141e:	4b48      	ldr	r3, [pc, #288]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	4a47      	ldr	r2, [pc, #284]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001428:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 8081 	beq.w	8001536 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001434:	4b42      	ldr	r3, [pc, #264]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 030c 	and.w	r3, r3, #12
 800143c:	2b08      	cmp	r3, #8
 800143e:	d061      	beq.n	8001504 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	2b02      	cmp	r3, #2
 8001446:	d146      	bne.n	80014d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001448:	4b3f      	ldr	r3, [pc, #252]	; (8001548 <HAL_RCC_OscConfig+0x4fc>)
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144e:	f7ff f91d 	bl	800068c <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001456:	f7ff f919 	bl	800068c <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e067      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001468:	4b35      	ldr	r3, [pc, #212]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1f0      	bne.n	8001456 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800147c:	d108      	bne.n	8001490 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800147e:	4b30      	ldr	r3, [pc, #192]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	492d      	ldr	r1, [pc, #180]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 800148c:	4313      	orrs	r3, r2
 800148e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001490:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a19      	ldr	r1, [r3, #32]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	430b      	orrs	r3, r1
 80014a2:	4927      	ldr	r1, [pc, #156]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014a8:	4b27      	ldr	r3, [pc, #156]	; (8001548 <HAL_RCC_OscConfig+0x4fc>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ae:	f7ff f8ed 	bl	800068c <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b6:	f7ff f8e9 	bl	800068c <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e037      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014c8:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCC_OscConfig+0x46a>
 80014d4:	e02f      	b.n	8001536 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <HAL_RCC_OscConfig+0x4fc>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff f8d6 	bl	800068c <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e4:	f7ff f8d2 	bl	800068c <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e020      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f6:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x498>
 8001502:	e018      	b.n	8001536 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d101      	bne.n	8001510 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e013      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	429a      	cmp	r2, r3
 8001522:	d106      	bne.n	8001532 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152e:	429a      	cmp	r2, r3
 8001530:	d001      	beq.n	8001536 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40021000 	.word	0x40021000
 8001544:	40007000 	.word	0x40007000
 8001548:	42420060 	.word	0x42420060

0800154c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e0d0      	b.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001560:	4b6a      	ldr	r3, [pc, #424]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d910      	bls.n	8001590 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156e:	4b67      	ldr	r3, [pc, #412]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 0207 	bic.w	r2, r3, #7
 8001576:	4965      	ldr	r1, [pc, #404]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800157e:	4b63      	ldr	r3, [pc, #396]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d001      	beq.n	8001590 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e0b8      	b.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d020      	beq.n	80015de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015a8:	4b59      	ldr	r3, [pc, #356]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	4a58      	ldr	r2, [pc, #352]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80015ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c0:	4b53      	ldr	r3, [pc, #332]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	4a52      	ldr	r2, [pc, #328]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80015c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015cc:	4b50      	ldr	r3, [pc, #320]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	494d      	ldr	r1, [pc, #308]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d040      	beq.n	800166c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d107      	bne.n	8001602 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f2:	4b47      	ldr	r3, [pc, #284]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d115      	bne.n	800162a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e07f      	b.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d107      	bne.n	800161a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160a:	4b41      	ldr	r3, [pc, #260]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d109      	bne.n	800162a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e073      	b.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161a:	4b3d      	ldr	r3, [pc, #244]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e06b      	b.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800162a:	4b39      	ldr	r3, [pc, #228]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f023 0203 	bic.w	r2, r3, #3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	4936      	ldr	r1, [pc, #216]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 8001638:	4313      	orrs	r3, r2
 800163a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800163c:	f7ff f826 	bl	800068c <HAL_GetTick>
 8001640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001642:	e00a      	b.n	800165a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001644:	f7ff f822 	bl	800068c <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001652:	4293      	cmp	r3, r2
 8001654:	d901      	bls.n	800165a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e053      	b.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165a:	4b2d      	ldr	r3, [pc, #180]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 020c 	and.w	r2, r3, #12
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	429a      	cmp	r2, r3
 800166a:	d1eb      	bne.n	8001644 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800166c:	4b27      	ldr	r3, [pc, #156]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d210      	bcs.n	800169c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167a:	4b24      	ldr	r3, [pc, #144]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 0207 	bic.w	r2, r3, #7
 8001682:	4922      	ldr	r1, [pc, #136]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	4313      	orrs	r3, r2
 8001688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800168a:	4b20      	ldr	r3, [pc, #128]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d001      	beq.n	800169c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e032      	b.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a8:	4b19      	ldr	r3, [pc, #100]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	4916      	ldr	r1, [pc, #88]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d009      	beq.n	80016da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	490e      	ldr	r1, [pc, #56]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016da:	f000 f821 	bl	8001720 <HAL_RCC_GetSysClockFreq>
 80016de:	4602      	mov	r2, r0
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	490a      	ldr	r1, [pc, #40]	; (8001714 <HAL_RCC_ClockConfig+0x1c8>)
 80016ec:	5ccb      	ldrb	r3, [r1, r3]
 80016ee:	fa22 f303 	lsr.w	r3, r2, r3
 80016f2:	4a09      	ldr	r2, [pc, #36]	; (8001718 <HAL_RCC_ClockConfig+0x1cc>)
 80016f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_RCC_ClockConfig+0x1d0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe ff84 	bl	8000608 <HAL_InitTick>

  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40022000 	.word	0x40022000
 8001710:	40021000 	.word	0x40021000
 8001714:	0800211c 	.word	0x0800211c
 8001718:	20000000 	.word	0x20000000
 800171c:	20000004 	.word	0x20000004

08001720 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001720:	b490      	push	{r4, r7}
 8001722:	b08a      	sub	sp, #40	; 0x28
 8001724:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001726:	4b2a      	ldr	r3, [pc, #168]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001728:	1d3c      	adds	r4, r7, #4
 800172a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800172c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001730:	f240 2301 	movw	r3, #513	; 0x201
 8001734:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
 800173e:	2300      	movs	r3, #0
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800174a:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	2b04      	cmp	r3, #4
 8001758:	d002      	beq.n	8001760 <HAL_RCC_GetSysClockFreq+0x40>
 800175a:	2b08      	cmp	r3, #8
 800175c:	d003      	beq.n	8001766 <HAL_RCC_GetSysClockFreq+0x46>
 800175e:	e02d      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001762:	623b      	str	r3, [r7, #32]
      break;
 8001764:	e02d      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	0c9b      	lsrs	r3, r3, #18
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001772:	4413      	add	r3, r2
 8001774:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001778:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d013      	beq.n	80017ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001784:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	0c5b      	lsrs	r3, r3, #17
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001792:	4413      	add	r3, r2
 8001794:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001798:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	4a0e      	ldr	r2, [pc, #56]	; (80017d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800179e:	fb02 f203 	mul.w	r2, r2, r3
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
 80017aa:	e004      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80017b0:	fb02 f303 	mul.w	r3, r2, r3
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	623b      	str	r3, [r7, #32]
      break;
 80017ba:	e002      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017be:	623b      	str	r3, [r7, #32]
      break;
 80017c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017c2:	6a3b      	ldr	r3, [r7, #32]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3728      	adds	r7, #40	; 0x28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc90      	pop	{r4, r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	0800210c 	.word	0x0800210c
 80017d4:	40021000 	.word	0x40021000
 80017d8:	007a1200 	.word	0x007a1200
 80017dc:	003d0900 	.word	0x003d0900

080017e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <RCC_Delay+0x34>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <RCC_Delay+0x38>)
 80017ee:	fba2 2303 	umull	r2, r3, r2, r3
 80017f2:	0a5b      	lsrs	r3, r3, #9
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	fb02 f303 	mul.w	r3, r2, r3
 80017fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017fc:	bf00      	nop
  }
  while (Delay --);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	1e5a      	subs	r2, r3, #1
 8001802:	60fa      	str	r2, [r7, #12]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1f9      	bne.n	80017fc <RCC_Delay+0x1c>
}
 8001808:	bf00      	nop
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr
 8001814:	20000000 	.word	0x20000000
 8001818:	10624dd3 	.word	0x10624dd3

0800181c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e076      	b.n	800191c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	2b00      	cmp	r3, #0
 8001834:	d108      	bne.n	8001848 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800183e:	d009      	beq.n	8001854 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	61da      	str	r2, [r3, #28]
 8001846:	e005      	b.n	8001854 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d106      	bne.n	8001874 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7fe fdee 	bl	8000450 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2202      	movs	r2, #2
 8001878:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800188a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800189c:	431a      	orrs	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	431a      	orrs	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d8:	ea42 0103 	orr.w	r1, r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	0c1a      	lsrs	r2, r3, #16
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f002 0204 	and.w	r2, r2, #4
 80018fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	69da      	ldr	r2, [r3, #28]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800190a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	4613      	mov	r3, r2
 8001930:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001932:	2300      	movs	r3, #0
 8001934:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d110      	bne.n	8001960 <HAL_SPI_Receive_DMA+0x3c>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001946:	d10b      	bne.n	8001960 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2204      	movs	r2, #4
 800194c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 f8ac 	bl	8001ab4 <HAL_SPI_TransmitReceive_DMA>
 800195c:	4603      	mov	r3, r0
 800195e:	e09f      	b.n	8001aa0 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001966:	2b01      	cmp	r3, #1
 8001968:	d101      	bne.n	800196e <HAL_SPI_Receive_DMA+0x4a>
 800196a:	2302      	movs	r3, #2
 800196c:	e098      	b.n	8001aa0 <HAL_SPI_Receive_DMA+0x17c>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b01      	cmp	r3, #1
 8001980:	d002      	beq.n	8001988 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8001982:	2302      	movs	r3, #2
 8001984:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001986:	e086      	b.n	8001a96 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <HAL_SPI_Receive_DMA+0x70>
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d102      	bne.n	800199a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001998:	e07d      	b.n	8001a96 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2204      	movs	r2, #4
 800199e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	88fa      	ldrh	r2, [r7, #6]
 80019b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	88fa      	ldrh	r2, [r7, #6]
 80019b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019da:	d10f      	bne.n	80019fc <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80019fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a00:	4a29      	ldr	r2, [pc, #164]	; (8001aa8 <HAL_SPI_Receive_DMA+0x184>)
 8001a02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a08:	4a28      	ldr	r2, [pc, #160]	; (8001aac <HAL_SPI_Receive_DMA+0x188>)
 8001a0a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a10:	4a27      	ldr	r2, [pc, #156]	; (8001ab0 <HAL_SPI_Receive_DMA+0x18c>)
 8001a12:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a18:	2200      	movs	r2, #0
 8001a1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	330c      	adds	r3, #12
 8001a26:	4619      	mov	r1, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a32:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001a34:	f7fe ffc0 	bl	80009b8 <HAL_DMA_Start_IT>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00c      	beq.n	8001a58 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a42:	f043 0210 	orr.w	r2, r3, #16
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8001a56:	e01e      	b.n	8001a96 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a62:	2b40      	cmp	r3, #64	; 0x40
 8001a64:	d007      	beq.n	8001a76 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a74:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f042 0220 	orr.w	r2, r2, #32
 8001a84:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f042 0201 	orr.w	r2, r2, #1
 8001a94:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	08001e35 	.word	0x08001e35
 8001aac:	08001d01 	.word	0x08001d01
 8001ab0:	08001e6d 	.word	0x08001e6d

08001ab4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <HAL_SPI_TransmitReceive_DMA+0x20>
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	e0e3      	b.n	8001c9c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ae2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8001aea:	7dbb      	ldrb	r3, [r7, #22]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d00d      	beq.n	8001b0c <HAL_SPI_TransmitReceive_DMA+0x58>
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001af6:	d106      	bne.n	8001b06 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d102      	bne.n	8001b06 <HAL_SPI_TransmitReceive_DMA+0x52>
 8001b00:	7dbb      	ldrb	r3, [r7, #22]
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d002      	beq.n	8001b0c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8001b06:	2302      	movs	r3, #2
 8001b08:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001b0a:	e0c2      	b.n	8001c92 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d005      	beq.n	8001b1e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d002      	beq.n	8001b1e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d102      	bne.n	8001b24 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001b22:	e0b6      	b.n	8001c92 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d003      	beq.n	8001b38 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2205      	movs	r2, #5
 8001b34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	887a      	ldrh	r2, [r7, #2]
 8001b48:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	887a      	ldrh	r2, [r7, #2]
 8001b4e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	887a      	ldrh	r2, [r7, #2]
 8001b5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	887a      	ldrh	r2, [r7, #2]
 8001b60:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d108      	bne.n	8001b8c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7e:	4a49      	ldr	r2, [pc, #292]	; (8001ca4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8001b80:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b86:	4a48      	ldr	r2, [pc, #288]	; (8001ca8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8001b88:	629a      	str	r2, [r3, #40]	; 0x28
 8001b8a:	e007      	b.n	8001b9c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b90:	4a46      	ldr	r2, [pc, #280]	; (8001cac <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8001b92:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b98:	4a45      	ldr	r2, [pc, #276]	; (8001cb0 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8001b9a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba0:	4a44      	ldr	r2, [pc, #272]	; (8001cb4 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8001ba2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba8:	2200      	movs	r2, #0
 8001baa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	330c      	adds	r3, #12
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bbc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bc2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001bc4:	f7fe fef8 	bl	80009b8 <HAL_DMA_Start_IT>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00c      	beq.n	8001be8 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd2:	f043 0210 	orr.w	r2, r3, #16
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8001be6:	e054      	b.n	8001c92 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c04:	2200      	movs	r2, #0
 8001c06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c14:	2200      	movs	r2, #0
 8001c16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c20:	4619      	mov	r1, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	330c      	adds	r3, #12
 8001c28:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c2e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8001c30:	f7fe fec2 	bl	80009b8 <HAL_DMA_Start_IT>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00c      	beq.n	8001c54 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3e:	f043 0210 	orr.w	r2, r3, #16
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8001c52:	e01e      	b.n	8001c92 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5e:	2b40      	cmp	r3, #64	; 0x40
 8001c60:	d007      	beq.n	8001c72 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c70:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f042 0220 	orr.w	r2, r2, #32
 8001c80:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f042 0202 	orr.w	r2, r2, #2
 8001c90:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	08001e35 	.word	0x08001e35
 8001ca8:	08001d01 	.word	0x08001d01
 8001cac:	08001e51 	.word	0x08001e51
 8001cb0:	08001da7 	.word	0x08001da7
 8001cb4:	08001e6d 	.word	0x08001e6d

08001cb8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr

08001cca <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr

08001cee <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d0e:	f7fe fcbd 	bl	800068c <HAL_GetTick>
 8001d12:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0320 	and.w	r3, r3, #32
 8001d1e:	2b20      	cmp	r3, #32
 8001d20:	d03b      	beq.n	8001d9a <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0220 	bic.w	r2, r2, #32
 8001d30:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10d      	bne.n	8001d56 <SPI_DMAReceiveCplt+0x56>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d42:	d108      	bne.n	8001d56 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0203 	bic.w	r2, r2, #3
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	e007      	b.n	8001d66 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0201 	bic.w	r2, r2, #1
 8001d64:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	2164      	movs	r1, #100	; 0x64
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f000 f926 	bl	8001fbc <SPI_EndRxTransaction>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d002      	beq.n	8001d7c <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2220      	movs	r2, #32
 8001d7a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f7ff ffab 	bl	8001cee <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8001d98:	e002      	b.n	8001da0 <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f7fe f9fa 	bl	8000194 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b084      	sub	sp, #16
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001db4:	f7fe fc6a 	bl	800068c <HAL_GetTick>
 8001db8:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0320 	and.w	r3, r3, #32
 8001dc4:	2b20      	cmp	r3, #32
 8001dc6:	d02f      	beq.n	8001e28 <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0220 	bic.w	r2, r2, #32
 8001dd6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	2164      	movs	r1, #100	; 0x64
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f000 f93f 	bl	8002060 <SPI_EndRxTxTransaction>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dec:	f043 0220 	orr.w	r2, r3, #32
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0203 	bic.w	r2, r2, #3
 8001e02:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f7ff ff64 	bl	8001cee <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8001e26:	e002      	b.n	8001e2e <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f7ff ff45 	bl	8001cb8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f7ff ff41 	bl	8001cca <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001e48:	bf00      	nop
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f7ff ff3c 	bl	8001cdc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001e64:	bf00      	nop
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0203 	bic.w	r2, r2, #3
 8001e88:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8e:	f043 0210 	orr.w	r2, r3, #16
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f7ff ff25 	bl	8001cee <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001ea4:	bf00      	nop
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	603b      	str	r3, [r7, #0]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ebc:	f7fe fbe6 	bl	800068c <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec4:	1a9b      	subs	r3, r3, r2
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	4413      	add	r3, r2
 8001eca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001ecc:	f7fe fbde 	bl	800068c <HAL_GetTick>
 8001ed0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001ed2:	4b39      	ldr	r3, [pc, #228]	; (8001fb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	015b      	lsls	r3, r3, #5
 8001ed8:	0d1b      	lsrs	r3, r3, #20
 8001eda:	69fa      	ldr	r2, [r7, #28]
 8001edc:	fb02 f303 	mul.w	r3, r2, r3
 8001ee0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ee2:	e054      	b.n	8001f8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eea:	d050      	beq.n	8001f8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001eec:	f7fe fbce 	bl	800068c <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d902      	bls.n	8001f02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d13d      	bne.n	8001f7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001f10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f1a:	d111      	bne.n	8001f40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f24:	d004      	beq.n	8001f30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f2e:	d107      	bne.n	8001f40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f48:	d10f      	bne.n	8001f6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e017      	b.n	8001fae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	4013      	ands	r3, r2
 8001f98:	68ba      	ldr	r2, [r7, #8]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	bf0c      	ite	eq
 8001f9e:	2301      	moveq	r3, #1
 8001fa0:	2300      	movne	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d19b      	bne.n	8001ee4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3720      	adds	r7, #32
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000000 	.word	0x20000000

08001fbc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af02      	add	r7, sp, #8
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fd0:	d111      	bne.n	8001ff6 <SPI_EndRxTransaction+0x3a>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fda:	d004      	beq.n	8001fe6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fe4:	d107      	bne.n	8001ff6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ff4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ffe:	d117      	bne.n	8002030 <SPI_EndRxTransaction+0x74>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002008:	d112      	bne.n	8002030 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2200      	movs	r2, #0
 8002012:	2101      	movs	r1, #1
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f7ff ff49 	bl	8001eac <SPI_WaitFlagStateUntilTimeout>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01a      	beq.n	8002056 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002024:	f043 0220 	orr.w	r2, r3, #32
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e013      	b.n	8002058 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2200      	movs	r2, #0
 8002038:	2180      	movs	r1, #128	; 0x80
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f7ff ff36 	bl	8001eac <SPI_WaitFlagStateUntilTimeout>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d007      	beq.n	8002056 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204a:	f043 0220 	orr.w	r2, r3, #32
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e000      	b.n	8002058 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af02      	add	r7, sp, #8
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2200      	movs	r2, #0
 8002074:	2180      	movs	r1, #128	; 0x80
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f7ff ff18 	bl	8001eac <SPI_WaitFlagStateUntilTimeout>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d007      	beq.n	8002092 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002086:	f043 0220 	orr.w	r2, r3, #32
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e000      	b.n	8002094 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <__libc_init_array>:
 800209c:	b570      	push	{r4, r5, r6, lr}
 800209e:	2600      	movs	r6, #0
 80020a0:	4d0c      	ldr	r5, [pc, #48]	; (80020d4 <__libc_init_array+0x38>)
 80020a2:	4c0d      	ldr	r4, [pc, #52]	; (80020d8 <__libc_init_array+0x3c>)
 80020a4:	1b64      	subs	r4, r4, r5
 80020a6:	10a4      	asrs	r4, r4, #2
 80020a8:	42a6      	cmp	r6, r4
 80020aa:	d109      	bne.n	80020c0 <__libc_init_array+0x24>
 80020ac:	f000 f822 	bl	80020f4 <_init>
 80020b0:	2600      	movs	r6, #0
 80020b2:	4d0a      	ldr	r5, [pc, #40]	; (80020dc <__libc_init_array+0x40>)
 80020b4:	4c0a      	ldr	r4, [pc, #40]	; (80020e0 <__libc_init_array+0x44>)
 80020b6:	1b64      	subs	r4, r4, r5
 80020b8:	10a4      	asrs	r4, r4, #2
 80020ba:	42a6      	cmp	r6, r4
 80020bc:	d105      	bne.n	80020ca <__libc_init_array+0x2e>
 80020be:	bd70      	pop	{r4, r5, r6, pc}
 80020c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80020c4:	4798      	blx	r3
 80020c6:	3601      	adds	r6, #1
 80020c8:	e7ee      	b.n	80020a8 <__libc_init_array+0xc>
 80020ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80020ce:	4798      	blx	r3
 80020d0:	3601      	adds	r6, #1
 80020d2:	e7f2      	b.n	80020ba <__libc_init_array+0x1e>
 80020d4:	0800212c 	.word	0x0800212c
 80020d8:	0800212c 	.word	0x0800212c
 80020dc:	0800212c 	.word	0x0800212c
 80020e0:	08002130 	.word	0x08002130

080020e4 <memset>:
 80020e4:	4603      	mov	r3, r0
 80020e6:	4402      	add	r2, r0
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d100      	bne.n	80020ee <memset+0xa>
 80020ec:	4770      	bx	lr
 80020ee:	f803 1b01 	strb.w	r1, [r3], #1
 80020f2:	e7f9      	b.n	80020e8 <memset+0x4>

080020f4 <_init>:
 80020f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f6:	bf00      	nop
 80020f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020fa:	bc08      	pop	{r3}
 80020fc:	469e      	mov	lr, r3
 80020fe:	4770      	bx	lr

08002100 <_fini>:
 8002100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002102:	bf00      	nop
 8002104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002106:	bc08      	pop	{r3}
 8002108:	469e      	mov	lr, r3
 800210a:	4770      	bx	lr
